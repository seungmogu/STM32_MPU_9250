
practice.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008090  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000484  08008278  08008278  00018278  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086fc  080086fc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080086fc  080086fc  000186fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008704  08008704  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008704  08008704  00018704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008708  08008708  00018708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800870c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  200001dc  080088e8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000041c  080088e8  0002041c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001093a  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000239e  00000000  00000000  00030b3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  00032ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f10  00000000  00000000  00033ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021599  00000000  00000000  00034db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011590  00000000  00000000  00056349  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bf050  00000000  00000000  000678d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00126929  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005510  00000000  00000000  0012697c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001dc 	.word	0x200001dc
 8000204:	00000000 	.word	0x00000000
 8000208:	08008260 	.word	0x08008260

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e0 	.word	0x200001e0
 8000224:	08008260 	.word	0x08008260

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2f>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b68:	bf24      	itt	cs
 8000b6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b72:	d90d      	bls.n	8000b90 <__aeabi_d2f+0x30>
 8000b74:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b80:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b88:	bf08      	it	eq
 8000b8a:	f020 0001 	biceq.w	r0, r0, #1
 8000b8e:	4770      	bx	lr
 8000b90:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b94:	d121      	bne.n	8000bda <__aeabi_d2f+0x7a>
 8000b96:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b9a:	bfbc      	itt	lt
 8000b9c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	4770      	bxlt	lr
 8000ba2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000baa:	f1c2 0218 	rsb	r2, r2, #24
 8000bae:	f1c2 0c20 	rsb	ip, r2, #32
 8000bb2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bba:	bf18      	it	ne
 8000bbc:	f040 0001 	orrne.w	r0, r0, #1
 8000bc0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bcc:	ea40 000c 	orr.w	r0, r0, ip
 8000bd0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd8:	e7cc      	b.n	8000b74 <__aeabi_d2f+0x14>
 8000bda:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bde:	d107      	bne.n	8000bf0 <__aeabi_d2f+0x90>
 8000be0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be4:	bf1e      	ittt	ne
 8000be6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bee:	4770      	bxne	lr
 8000bf0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <__aeabi_uldivmod>:
 8000c00:	b953      	cbnz	r3, 8000c18 <__aeabi_uldivmod+0x18>
 8000c02:	b94a      	cbnz	r2, 8000c18 <__aeabi_uldivmod+0x18>
 8000c04:	2900      	cmp	r1, #0
 8000c06:	bf08      	it	eq
 8000c08:	2800      	cmpeq	r0, #0
 8000c0a:	bf1c      	itt	ne
 8000c0c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c10:	f04f 30ff 	movne.w	r0, #4294967295
 8000c14:	f000 b96e 	b.w	8000ef4 <__aeabi_idiv0>
 8000c18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c20:	f000 f806 	bl	8000c30 <__udivmoddi4>
 8000c24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c2c:	b004      	add	sp, #16
 8000c2e:	4770      	bx	lr

08000c30 <__udivmoddi4>:
 8000c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c34:	9e08      	ldr	r6, [sp, #32]
 8000c36:	460d      	mov	r5, r1
 8000c38:	4604      	mov	r4, r0
 8000c3a:	468e      	mov	lr, r1
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	f040 8083 	bne.w	8000d48 <__udivmoddi4+0x118>
 8000c42:	428a      	cmp	r2, r1
 8000c44:	4617      	mov	r7, r2
 8000c46:	d947      	bls.n	8000cd8 <__udivmoddi4+0xa8>
 8000c48:	fab2 f382 	clz	r3, r2
 8000c4c:	b14b      	cbz	r3, 8000c62 <__udivmoddi4+0x32>
 8000c4e:	f1c3 0120 	rsb	r1, r3, #32
 8000c52:	fa05 fe03 	lsl.w	lr, r5, r3
 8000c56:	fa20 f101 	lsr.w	r1, r0, r1
 8000c5a:	409f      	lsls	r7, r3
 8000c5c:	ea41 0e0e 	orr.w	lr, r1, lr
 8000c60:	409c      	lsls	r4, r3
 8000c62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c66:	fbbe fcf8 	udiv	ip, lr, r8
 8000c6a:	fa1f f987 	uxth.w	r9, r7
 8000c6e:	fb08 e21c 	mls	r2, r8, ip, lr
 8000c72:	fb0c f009 	mul.w	r0, ip, r9
 8000c76:	0c21      	lsrs	r1, r4, #16
 8000c78:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000c7c:	4290      	cmp	r0, r2
 8000c7e:	d90a      	bls.n	8000c96 <__udivmoddi4+0x66>
 8000c80:	18ba      	adds	r2, r7, r2
 8000c82:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000c86:	f080 8118 	bcs.w	8000eba <__udivmoddi4+0x28a>
 8000c8a:	4290      	cmp	r0, r2
 8000c8c:	f240 8115 	bls.w	8000eba <__udivmoddi4+0x28a>
 8000c90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c94:	443a      	add	r2, r7
 8000c96:	1a12      	subs	r2, r2, r0
 8000c98:	fbb2 f0f8 	udiv	r0, r2, r8
 8000c9c:	fb08 2210 	mls	r2, r8, r0, r2
 8000ca0:	fb00 f109 	mul.w	r1, r0, r9
 8000ca4:	b2a4      	uxth	r4, r4
 8000ca6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000caa:	42a1      	cmp	r1, r4
 8000cac:	d909      	bls.n	8000cc2 <__udivmoddi4+0x92>
 8000cae:	193c      	adds	r4, r7, r4
 8000cb0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cb4:	f080 8103 	bcs.w	8000ebe <__udivmoddi4+0x28e>
 8000cb8:	42a1      	cmp	r1, r4
 8000cba:	f240 8100 	bls.w	8000ebe <__udivmoddi4+0x28e>
 8000cbe:	3802      	subs	r0, #2
 8000cc0:	443c      	add	r4, r7
 8000cc2:	1a64      	subs	r4, r4, r1
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cca:	b11e      	cbz	r6, 8000cd4 <__udivmoddi4+0xa4>
 8000ccc:	2200      	movs	r2, #0
 8000cce:	40dc      	lsrs	r4, r3
 8000cd0:	e9c6 4200 	strd	r4, r2, [r6]
 8000cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd8:	b902      	cbnz	r2, 8000cdc <__udivmoddi4+0xac>
 8000cda:	deff      	udf	#255	; 0xff
 8000cdc:	fab2 f382 	clz	r3, r2
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d14f      	bne.n	8000d84 <__udivmoddi4+0x154>
 8000ce4:	1a8d      	subs	r5, r1, r2
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000cec:	fa1f f882 	uxth.w	r8, r2
 8000cf0:	fbb5 fcfe 	udiv	ip, r5, lr
 8000cf4:	fb0e 551c 	mls	r5, lr, ip, r5
 8000cf8:	fb08 f00c 	mul.w	r0, r8, ip
 8000cfc:	0c22      	lsrs	r2, r4, #16
 8000cfe:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000d02:	42a8      	cmp	r0, r5
 8000d04:	d907      	bls.n	8000d16 <__udivmoddi4+0xe6>
 8000d06:	197d      	adds	r5, r7, r5
 8000d08:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0xe4>
 8000d0e:	42a8      	cmp	r0, r5
 8000d10:	f200 80e9 	bhi.w	8000ee6 <__udivmoddi4+0x2b6>
 8000d14:	4694      	mov	ip, r2
 8000d16:	1a2d      	subs	r5, r5, r0
 8000d18:	fbb5 f0fe 	udiv	r0, r5, lr
 8000d1c:	fb0e 5510 	mls	r5, lr, r0, r5
 8000d20:	fb08 f800 	mul.w	r8, r8, r0
 8000d24:	b2a4      	uxth	r4, r4
 8000d26:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d2a:	45a0      	cmp	r8, r4
 8000d2c:	d907      	bls.n	8000d3e <__udivmoddi4+0x10e>
 8000d2e:	193c      	adds	r4, r7, r4
 8000d30:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x10c>
 8000d36:	45a0      	cmp	r8, r4
 8000d38:	f200 80d9 	bhi.w	8000eee <__udivmoddi4+0x2be>
 8000d3c:	4610      	mov	r0, r2
 8000d3e:	eba4 0408 	sub.w	r4, r4, r8
 8000d42:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d46:	e7c0      	b.n	8000cca <__udivmoddi4+0x9a>
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x12e>
 8000d4c:	2e00      	cmp	r6, #0
 8000d4e:	f000 80b1 	beq.w	8000eb4 <__udivmoddi4+0x284>
 8000d52:	2100      	movs	r1, #0
 8000d54:	e9c6 0500 	strd	r0, r5, [r6]
 8000d58:	4608      	mov	r0, r1
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	fab3 f183 	clz	r1, r3
 8000d62:	2900      	cmp	r1, #0
 8000d64:	d14b      	bne.n	8000dfe <__udivmoddi4+0x1ce>
 8000d66:	42ab      	cmp	r3, r5
 8000d68:	d302      	bcc.n	8000d70 <__udivmoddi4+0x140>
 8000d6a:	4282      	cmp	r2, r0
 8000d6c:	f200 80b9 	bhi.w	8000ee2 <__udivmoddi4+0x2b2>
 8000d70:	1a84      	subs	r4, r0, r2
 8000d72:	eb65 0303 	sbc.w	r3, r5, r3
 8000d76:	2001      	movs	r0, #1
 8000d78:	469e      	mov	lr, r3
 8000d7a:	2e00      	cmp	r6, #0
 8000d7c:	d0aa      	beq.n	8000cd4 <__udivmoddi4+0xa4>
 8000d7e:	e9c6 4e00 	strd	r4, lr, [r6]
 8000d82:	e7a7      	b.n	8000cd4 <__udivmoddi4+0xa4>
 8000d84:	409f      	lsls	r7, r3
 8000d86:	f1c3 0220 	rsb	r2, r3, #32
 8000d8a:	40d1      	lsrs	r1, r2
 8000d8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d90:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d94:	fa1f f887 	uxth.w	r8, r7
 8000d98:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d9c:	fa24 f202 	lsr.w	r2, r4, r2
 8000da0:	409d      	lsls	r5, r3
 8000da2:	fb00 fc08 	mul.w	ip, r0, r8
 8000da6:	432a      	orrs	r2, r5
 8000da8:	0c15      	lsrs	r5, r2, #16
 8000daa:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000dae:	45ac      	cmp	ip, r5
 8000db0:	fa04 f403 	lsl.w	r4, r4, r3
 8000db4:	d909      	bls.n	8000dca <__udivmoddi4+0x19a>
 8000db6:	197d      	adds	r5, r7, r5
 8000db8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dbc:	f080 808f 	bcs.w	8000ede <__udivmoddi4+0x2ae>
 8000dc0:	45ac      	cmp	ip, r5
 8000dc2:	f240 808c 	bls.w	8000ede <__udivmoddi4+0x2ae>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	443d      	add	r5, r7
 8000dca:	eba5 050c 	sub.w	r5, r5, ip
 8000dce:	fbb5 f1fe 	udiv	r1, r5, lr
 8000dd2:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000dd6:	fb01 f908 	mul.w	r9, r1, r8
 8000dda:	b295      	uxth	r5, r2
 8000ddc:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000de0:	45a9      	cmp	r9, r5
 8000de2:	d907      	bls.n	8000df4 <__udivmoddi4+0x1c4>
 8000de4:	197d      	adds	r5, r7, r5
 8000de6:	f101 32ff 	add.w	r2, r1, #4294967295
 8000dea:	d274      	bcs.n	8000ed6 <__udivmoddi4+0x2a6>
 8000dec:	45a9      	cmp	r9, r5
 8000dee:	d972      	bls.n	8000ed6 <__udivmoddi4+0x2a6>
 8000df0:	3902      	subs	r1, #2
 8000df2:	443d      	add	r5, r7
 8000df4:	eba5 0509 	sub.w	r5, r5, r9
 8000df8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000dfc:	e778      	b.n	8000cf0 <__udivmoddi4+0xc0>
 8000dfe:	f1c1 0720 	rsb	r7, r1, #32
 8000e02:	408b      	lsls	r3, r1
 8000e04:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e08:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e0c:	fa25 f407 	lsr.w	r4, r5, r7
 8000e10:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e14:	fbb4 f9fe 	udiv	r9, r4, lr
 8000e18:	fa1f f88c 	uxth.w	r8, ip
 8000e1c:	fb0e 4419 	mls	r4, lr, r9, r4
 8000e20:	fa20 f307 	lsr.w	r3, r0, r7
 8000e24:	fb09 fa08 	mul.w	sl, r9, r8
 8000e28:	408d      	lsls	r5, r1
 8000e2a:	431d      	orrs	r5, r3
 8000e2c:	0c2b      	lsrs	r3, r5, #16
 8000e2e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e32:	45a2      	cmp	sl, r4
 8000e34:	fa02 f201 	lsl.w	r2, r2, r1
 8000e38:	fa00 f301 	lsl.w	r3, r0, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x222>
 8000e3e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e42:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e46:	d248      	bcs.n	8000eda <__udivmoddi4+0x2aa>
 8000e48:	45a2      	cmp	sl, r4
 8000e4a:	d946      	bls.n	8000eda <__udivmoddi4+0x2aa>
 8000e4c:	f1a9 0902 	sub.w	r9, r9, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	eba4 040a 	sub.w	r4, r4, sl
 8000e56:	fbb4 f0fe 	udiv	r0, r4, lr
 8000e5a:	fb0e 4410 	mls	r4, lr, r0, r4
 8000e5e:	fb00 fa08 	mul.w	sl, r0, r8
 8000e62:	b2ad      	uxth	r5, r5
 8000e64:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e68:	45a2      	cmp	sl, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x24e>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e74:	d22d      	bcs.n	8000ed2 <__udivmoddi4+0x2a2>
 8000e76:	45a2      	cmp	sl, r4
 8000e78:	d92b      	bls.n	8000ed2 <__udivmoddi4+0x2a2>
 8000e7a:	3802      	subs	r0, #2
 8000e7c:	4464      	add	r4, ip
 8000e7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e82:	fba0 8902 	umull	r8, r9, r0, r2
 8000e86:	eba4 040a 	sub.w	r4, r4, sl
 8000e8a:	454c      	cmp	r4, r9
 8000e8c:	46c6      	mov	lr, r8
 8000e8e:	464d      	mov	r5, r9
 8000e90:	d319      	bcc.n	8000ec6 <__udivmoddi4+0x296>
 8000e92:	d016      	beq.n	8000ec2 <__udivmoddi4+0x292>
 8000e94:	b15e      	cbz	r6, 8000eae <__udivmoddi4+0x27e>
 8000e96:	ebb3 020e 	subs.w	r2, r3, lr
 8000e9a:	eb64 0405 	sbc.w	r4, r4, r5
 8000e9e:	fa04 f707 	lsl.w	r7, r4, r7
 8000ea2:	fa22 f301 	lsr.w	r3, r2, r1
 8000ea6:	431f      	orrs	r7, r3
 8000ea8:	40cc      	lsrs	r4, r1
 8000eaa:	e9c6 7400 	strd	r7, r4, [r6]
 8000eae:	2100      	movs	r1, #0
 8000eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb4:	4631      	mov	r1, r6
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e70c      	b.n	8000cd4 <__udivmoddi4+0xa4>
 8000eba:	468c      	mov	ip, r1
 8000ebc:	e6eb      	b.n	8000c96 <__udivmoddi4+0x66>
 8000ebe:	4610      	mov	r0, r2
 8000ec0:	e6ff      	b.n	8000cc2 <__udivmoddi4+0x92>
 8000ec2:	4543      	cmp	r3, r8
 8000ec4:	d2e6      	bcs.n	8000e94 <__udivmoddi4+0x264>
 8000ec6:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eca:	eb69 050c 	sbc.w	r5, r9, ip
 8000ece:	3801      	subs	r0, #1
 8000ed0:	e7e0      	b.n	8000e94 <__udivmoddi4+0x264>
 8000ed2:	4628      	mov	r0, r5
 8000ed4:	e7d3      	b.n	8000e7e <__udivmoddi4+0x24e>
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	e78c      	b.n	8000df4 <__udivmoddi4+0x1c4>
 8000eda:	4681      	mov	r9, r0
 8000edc:	e7b9      	b.n	8000e52 <__udivmoddi4+0x222>
 8000ede:	4608      	mov	r0, r1
 8000ee0:	e773      	b.n	8000dca <__udivmoddi4+0x19a>
 8000ee2:	4608      	mov	r0, r1
 8000ee4:	e749      	b.n	8000d7a <__udivmoddi4+0x14a>
 8000ee6:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eea:	443d      	add	r5, r7
 8000eec:	e713      	b.n	8000d16 <__udivmoddi4+0xe6>
 8000eee:	3802      	subs	r0, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	e724      	b.n	8000d3e <__udivmoddi4+0x10e>

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <gyro_who_am_i>:
uint8_t rx_data;
uart_t uart;
bool send_flag = false;

void gyro_who_am_i() //gyro action check
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af02      	add	r7, sp, #8
	uint8_t i2c_data[2] = {0x75, 0x00};
 8000efe:	2375      	movs	r3, #117	; 0x75
 8000f00:	81bb      	strh	r3, [r7, #12]
	uint8_t recvData[1] = {0,};
 8000f02:	2300      	movs	r3, #0
 8000f04:	723b      	strb	r3, [r7, #8]

	uint8_t uartData[5] = {0,};
 8000f06:	2300      	movs	r3, #0
 8000f08:	603b      	str	r3, [r7, #0]
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	713b      	strb	r3, [r7, #4]

	HAL_I2C_Master_Transmit(&hi2c1, MPU9250_ADDRESS, &i2c_data[0], 1, 50);
 8000f0e:	f107 020c 	add.w	r2, r7, #12
 8000f12:	2332      	movs	r3, #50	; 0x32
 8000f14:	9300      	str	r3, [sp, #0]
 8000f16:	2301      	movs	r3, #1
 8000f18:	21d0      	movs	r1, #208	; 0xd0
 8000f1a:	480e      	ldr	r0, [pc, #56]	; (8000f54 <gyro_who_am_i+0x5c>)
 8000f1c:	f001 fc30 	bl	8002780 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, MPU9250_ADDRESS, recvData, 1, 50);
 8000f20:	f107 0208 	add.w	r2, r7, #8
 8000f24:	2332      	movs	r3, #50	; 0x32
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	2301      	movs	r3, #1
 8000f2a:	21d0      	movs	r1, #208	; 0xd0
 8000f2c:	4809      	ldr	r0, [pc, #36]	; (8000f54 <gyro_who_am_i+0x5c>)
 8000f2e:	f001 fd25 	bl	800297c <HAL_I2C_Master_Receive>
	sprintf((char *)uartData, "0x%x\n", recvData[0]);
 8000f32:	7a3b      	ldrb	r3, [r7, #8]
 8000f34:	461a      	mov	r2, r3
 8000f36:	463b      	mov	r3, r7
 8000f38:	4907      	ldr	r1, [pc, #28]	; (8000f58 <gyro_who_am_i+0x60>)
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f004 ff66 	bl	8005e0c <siprintf>
	HAL_UART_Transmit(&huart1, uartData, 5, 50);
 8000f40:	4639      	mov	r1, r7
 8000f42:	2332      	movs	r3, #50	; 0x32
 8000f44:	2205      	movs	r2, #5
 8000f46:	4805      	ldr	r0, [pc, #20]	; (8000f5c <gyro_who_am_i+0x64>)
 8000f48:	f003 fdd5 	bl	8004af6 <HAL_UART_Transmit>
}
 8000f4c:	bf00      	nop
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000210 	.word	0x20000210
 8000f58:	08008278 	.word	0x08008278
 8000f5c:	20000268 	.word	0x20000268

08000f60 <Gyro_Writebyte>:

//use gyro
float f_gyx, f_gyy,f_gyz;
int32_t getmpuaccx,getmpuaccy,getmpuaccz;

void Gyro_Writebyte(MPU9250 * I2C,uint8_t register_address,uint8_t data){
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af02      	add	r7, sp, #8
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	70fb      	strb	r3, [r7, #3]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	70bb      	strb	r3, [r7, #2]
    uint8_t Trans[2]={register_address, data};
 8000f70:	78fb      	ldrb	r3, [r7, #3]
 8000f72:	733b      	strb	r3, [r7, #12]
 8000f74:	78bb      	ldrb	r3, [r7, #2]
 8000f76:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&(I2C->i2c), I2C->gyro_address,Trans,2,10);
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8000f80:	b299      	uxth	r1, r3
 8000f82:	f107 020c 	add.w	r2, r7, #12
 8000f86:	230a      	movs	r3, #10
 8000f88:	9300      	str	r3, [sp, #0]
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	f001 fbf8 	bl	8002780 <HAL_I2C_Master_Transmit>
}
 8000f90:	bf00      	nop
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <init_MPU9250>:
    HAL_I2C_Master_Receive(&(I2C->i2c),I2C->gyro_address,Receive,1,10);

    return Receive[0];
}

void init_MPU9250(MPU9250* mpu9250){
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
    Gyro_Writebyte(mpu9250,PWR_MGMT_1,0x00);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	216b      	movs	r1, #107	; 0x6b
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff ffdb 	bl	8000f60 <Gyro_Writebyte>

    HAL_Delay(100);
 8000faa:	2064      	movs	r0, #100	; 0x64
 8000fac:	f000 feac 	bl	8001d08 <HAL_Delay>
    Gyro_Writebyte(mpu9250,PWR_MGMT_1,0x01);
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	216b      	movs	r1, #107	; 0x6b
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f7ff ffd3 	bl	8000f60 <Gyro_Writebyte>
    Gyro_Writebyte(mpu9250,SMPLRT_DIV,0X07);
 8000fba:	2207      	movs	r2, #7
 8000fbc:	2119      	movs	r1, #25
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff ffce 	bl	8000f60 <Gyro_Writebyte>

    Gyro_Writebyte(mpu9250,GYRO_CONFIG,0x08);
 8000fc4:	2208      	movs	r2, #8
 8000fc6:	211b      	movs	r1, #27
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff ffc9 	bl	8000f60 <Gyro_Writebyte>
    Gyro_Writebyte(mpu9250,INT_PIN_CFG,0X02);
 8000fce:	2202      	movs	r2, #2
 8000fd0:	2137      	movs	r1, #55	; 0x37
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f7ff ffc4 	bl	8000f60 <Gyro_Writebyte>
    Gyro_Writebyte(mpu9250,ACCEL_CONFIG,0x08);
 8000fd8:	2208      	movs	r2, #8
 8000fda:	211c      	movs	r1, #28
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff ffbf 	bl	8000f60 <Gyro_Writebyte>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <MPU_read_acc_gyro>:

void MPU_read_acc_gyro(MPU9250* mpu9250){
 8000fec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ff0:	b0ca      	sub	sp, #296	; 0x128
 8000ff2:	af04      	add	r7, sp, #16
 8000ff4:	1d3b      	adds	r3, r7, #4
 8000ff6:	6018      	str	r0, [r3, #0]
    uint8_t databuf[14];
    int16_t ax,ay,az;
    int16_t gx,gy,gz;

    float Axyz[30] = {0,};
 8000ff8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000ffc:	2278      	movs	r2, #120	; 0x78
 8000ffe:	2100      	movs	r1, #0
 8001000:	4618      	mov	r0, r3
 8001002:	f004 fa9b 	bl	800553c <memset>
    float Gxyz[30] = {0,};
 8001006:	f107 030c 	add.w	r3, r7, #12
 800100a:	4618      	mov	r0, r3
 800100c:	2378      	movs	r3, #120	; 0x78
 800100e:	461a      	mov	r2, r3
 8001010:	2100      	movs	r1, #0
 8001012:	f004 fa93 	bl	800553c <memset>

    HAL_I2C_Mem_Read(&(mpu9250->i2c),mpu9250->gyro_address,0x3b,I2C_MEMADD_SIZE_8BIT,databuf,14,10);
 8001016:	1d3b      	adds	r3, r7, #4
 8001018:	6818      	ldr	r0, [r3, #0]
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001022:	b299      	uxth	r1, r3
 8001024:	230a      	movs	r3, #10
 8001026:	9302      	str	r3, [sp, #8]
 8001028:	230e      	movs	r3, #14
 800102a:	9301      	str	r3, [sp, #4]
 800102c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	223b      	movs	r2, #59	; 0x3b
 8001036:	f001 ff01 	bl	8002e3c <HAL_I2C_Mem_Read>
    ax=(((int16_t)databuf[0]<<8)|databuf[1]); Axyz[0] = (double) ax / 16384; //accelerometer X-axis value
 800103a:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 800103e:	021b      	lsls	r3, r3, #8
 8001040:	b21a      	sxth	r2, r3
 8001042:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 8001046:	b21b      	sxth	r3, r3
 8001048:	4313      	orrs	r3, r2
 800104a:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
 800104e:	f9b7 3116 	ldrsh.w	r3, [r7, #278]	; 0x116
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff fa42 	bl	80004dc <__aeabi_i2d>
 8001058:	f04f 0200 	mov.w	r2, #0
 800105c:	4b8e      	ldr	r3, [pc, #568]	; (8001298 <MPU_read_acc_gyro+0x2ac>)
 800105e:	f7ff fbd1 	bl	8000804 <__aeabi_ddiv>
 8001062:	4602      	mov	r2, r0
 8001064:	460b      	mov	r3, r1
 8001066:	4610      	mov	r0, r2
 8001068:	4619      	mov	r1, r3
 800106a:	f7ff fd79 	bl	8000b60 <__aeabi_d2f>
 800106e:	4603      	mov	r3, r0
 8001070:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    ay=(((int16_t)databuf[2]<<8)|databuf[3]); Axyz[1] = (double) ay / 16384; //accelerometer Y-axis value
 8001074:	f897 30fe 	ldrb.w	r3, [r7, #254]	; 0xfe
 8001078:	021b      	lsls	r3, r3, #8
 800107a:	b21a      	sxth	r2, r3
 800107c:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 8001080:	b21b      	sxth	r3, r3
 8001082:	4313      	orrs	r3, r2
 8001084:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
 8001088:	f9b7 3114 	ldrsh.w	r3, [r7, #276]	; 0x114
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fa25 	bl	80004dc <__aeabi_i2d>
 8001092:	f04f 0200 	mov.w	r2, #0
 8001096:	4b80      	ldr	r3, [pc, #512]	; (8001298 <MPU_read_acc_gyro+0x2ac>)
 8001098:	f7ff fbb4 	bl	8000804 <__aeabi_ddiv>
 800109c:	4602      	mov	r2, r0
 800109e:	460b      	mov	r3, r1
 80010a0:	4610      	mov	r0, r2
 80010a2:	4619      	mov	r1, r3
 80010a4:	f7ff fd5c 	bl	8000b60 <__aeabi_d2f>
 80010a8:	4603      	mov	r3, r0
 80010aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    az=(((int16_t)databuf[4]<<8)|databuf[5]); Axyz[2] = (double) az / 16384; //accelerometer Z-axis value
 80010ae:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
 80010b2:	021b      	lsls	r3, r3, #8
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 80010ba:	b21b      	sxth	r3, r3
 80010bc:	4313      	orrs	r3, r2
 80010be:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 80010c2:	f9b7 3112 	ldrsh.w	r3, [r7, #274]	; 0x112
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fa08 	bl	80004dc <__aeabi_i2d>
 80010cc:	f04f 0200 	mov.w	r2, #0
 80010d0:	4b71      	ldr	r3, [pc, #452]	; (8001298 <MPU_read_acc_gyro+0x2ac>)
 80010d2:	f7ff fb97 	bl	8000804 <__aeabi_ddiv>
 80010d6:	4602      	mov	r2, r0
 80010d8:	460b      	mov	r3, r1
 80010da:	4610      	mov	r0, r2
 80010dc:	4619      	mov	r1, r3
 80010de:	f7ff fd3f 	bl	8000b60 <__aeabi_d2f>
 80010e2:	4603      	mov	r3, r0
 80010e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    gx=(((int16_t)databuf[8]<<8)|databuf[9]); Gxyz[0] = (double) gx * 250 / 32768; //gyroscope X-axis value
 80010e8:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 80010ec:	021b      	lsls	r3, r3, #8
 80010ee:	b21a      	sxth	r2, r3
 80010f0:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 80010f4:	b21b      	sxth	r3, r3
 80010f6:	4313      	orrs	r3, r2
 80010f8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 80010fc:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff f9eb 	bl	80004dc <__aeabi_i2d>
 8001106:	f04f 0200 	mov.w	r2, #0
 800110a:	4b64      	ldr	r3, [pc, #400]	; (800129c <MPU_read_acc_gyro+0x2b0>)
 800110c:	f7ff fa50 	bl	80005b0 <__aeabi_dmul>
 8001110:	4602      	mov	r2, r0
 8001112:	460b      	mov	r3, r1
 8001114:	4610      	mov	r0, r2
 8001116:	4619      	mov	r1, r3
 8001118:	f04f 0200 	mov.w	r2, #0
 800111c:	4b60      	ldr	r3, [pc, #384]	; (80012a0 <MPU_read_acc_gyro+0x2b4>)
 800111e:	f7ff fb71 	bl	8000804 <__aeabi_ddiv>
 8001122:	4602      	mov	r2, r0
 8001124:	460b      	mov	r3, r1
 8001126:	4610      	mov	r0, r2
 8001128:	4619      	mov	r1, r3
 800112a:	f7ff fd19 	bl	8000b60 <__aeabi_d2f>
 800112e:	4602      	mov	r2, r0
 8001130:	f107 030c 	add.w	r3, r7, #12
 8001134:	601a      	str	r2, [r3, #0]
    gy=(((int16_t)databuf[10]<<8)|databuf[11]); Gxyz[1] = (double) gy * 250 / 32768; //gyroscope Y-axis value
 8001136:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800113a:	021b      	lsls	r3, r3, #8
 800113c:	b21a      	sxth	r2, r3
 800113e:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8001142:	b21b      	sxth	r3, r3
 8001144:	4313      	orrs	r3, r2
 8001146:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 800114a:	f9b7 310e 	ldrsh.w	r3, [r7, #270]	; 0x10e
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff f9c4 	bl	80004dc <__aeabi_i2d>
 8001154:	f04f 0200 	mov.w	r2, #0
 8001158:	4b50      	ldr	r3, [pc, #320]	; (800129c <MPU_read_acc_gyro+0x2b0>)
 800115a:	f7ff fa29 	bl	80005b0 <__aeabi_dmul>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
 8001162:	4610      	mov	r0, r2
 8001164:	4619      	mov	r1, r3
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	4b4d      	ldr	r3, [pc, #308]	; (80012a0 <MPU_read_acc_gyro+0x2b4>)
 800116c:	f7ff fb4a 	bl	8000804 <__aeabi_ddiv>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	4610      	mov	r0, r2
 8001176:	4619      	mov	r1, r3
 8001178:	f7ff fcf2 	bl	8000b60 <__aeabi_d2f>
 800117c:	4602      	mov	r2, r0
 800117e:	f107 030c 	add.w	r3, r7, #12
 8001182:	605a      	str	r2, [r3, #4]
    gz=(((int16_t)databuf[12]<<8)|databuf[13]); Gxyz[2] = (double) gz * 250 / 32768; //gyroscope Z-axis value
 8001184:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 8001188:	021b      	lsls	r3, r3, #8
 800118a:	b21a      	sxth	r2, r3
 800118c:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
 8001190:	b21b      	sxth	r3, r3
 8001192:	4313      	orrs	r3, r2
 8001194:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
 8001198:	f9b7 310c 	ldrsh.w	r3, [r7, #268]	; 0x10c
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff f99d 	bl	80004dc <__aeabi_i2d>
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	4b3d      	ldr	r3, [pc, #244]	; (800129c <MPU_read_acc_gyro+0x2b0>)
 80011a8:	f7ff fa02 	bl	80005b0 <__aeabi_dmul>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4610      	mov	r0, r2
 80011b2:	4619      	mov	r1, r3
 80011b4:	f04f 0200 	mov.w	r2, #0
 80011b8:	4b39      	ldr	r3, [pc, #228]	; (80012a0 <MPU_read_acc_gyro+0x2b4>)
 80011ba:	f7ff fb23 	bl	8000804 <__aeabi_ddiv>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	4610      	mov	r0, r2
 80011c4:	4619      	mov	r1, r3
 80011c6:	f7ff fccb 	bl	8000b60 <__aeabi_d2f>
 80011ca:	4602      	mov	r2, r0
 80011cc:	f107 030c 	add.w	r3, r7, #12
 80011d0:	609a      	str	r2, [r3, #8]

    sprintf((char *)Axyz, "Accel_x: %.1f, y: %.1f, z: %.1f\n", Axyz[0], Axyz[1], Axyz[2]);
 80011d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff f992 	bl	8000500 <__aeabi_f2d>
 80011dc:	4680      	mov	r8, r0
 80011de:	4689      	mov	r9, r1
 80011e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff f98b 	bl	8000500 <__aeabi_f2d>
 80011ea:	4604      	mov	r4, r0
 80011ec:	460d      	mov	r5, r1
 80011ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff f984 	bl	8000500 <__aeabi_f2d>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8001200:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001204:	e9cd 4500 	strd	r4, r5, [sp]
 8001208:	4642      	mov	r2, r8
 800120a:	464b      	mov	r3, r9
 800120c:	4925      	ldr	r1, [pc, #148]	; (80012a4 <MPU_read_acc_gyro+0x2b8>)
 800120e:	f004 fdfd 	bl	8005e0c <siprintf>
    HAL_UART_Transmit(&huart1, Axyz, strlen((char*)Axyz), 10);
 8001212:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff f806 	bl	8000228 <strlen>
 800121c:	4603      	mov	r3, r0
 800121e:	b29a      	uxth	r2, r3
 8001220:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8001224:	230a      	movs	r3, #10
 8001226:	4820      	ldr	r0, [pc, #128]	; (80012a8 <MPU_read_acc_gyro+0x2bc>)
 8001228:	f003 fc65 	bl	8004af6 <HAL_UART_Transmit>

    sprintf((char *)Gxyz, "Giro_x: %.1f, y: %.1f, z: %.1f\n", Gxyz[0], Gxyz[1], Gxyz[2]);
 800122c:	f107 030c 	add.w	r3, r7, #12
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff f964 	bl	8000500 <__aeabi_f2d>
 8001238:	4680      	mov	r8, r0
 800123a:	4689      	mov	r9, r1
 800123c:	f107 030c 	add.w	r3, r7, #12
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff f95c 	bl	8000500 <__aeabi_f2d>
 8001248:	4604      	mov	r4, r0
 800124a:	460d      	mov	r5, r1
 800124c:	f107 030c 	add.w	r3, r7, #12
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff f954 	bl	8000500 <__aeabi_f2d>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	f107 000c 	add.w	r0, r7, #12
 8001260:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001264:	e9cd 4500 	strd	r4, r5, [sp]
 8001268:	4642      	mov	r2, r8
 800126a:	464b      	mov	r3, r9
 800126c:	490f      	ldr	r1, [pc, #60]	; (80012ac <MPU_read_acc_gyro+0x2c0>)
 800126e:	f004 fdcd 	bl	8005e0c <siprintf>
    HAL_UART_Transmit(&huart1, Gxyz, strlen((char*)Gxyz), 10);
 8001272:	f107 030c 	add.w	r3, r7, #12
 8001276:	4618      	mov	r0, r3
 8001278:	f7fe ffd6 	bl	8000228 <strlen>
 800127c:	4603      	mov	r3, r0
 800127e:	b29a      	uxth	r2, r3
 8001280:	f107 010c 	add.w	r1, r7, #12
 8001284:	230a      	movs	r3, #10
 8001286:	4808      	ldr	r0, [pc, #32]	; (80012a8 <MPU_read_acc_gyro+0x2bc>)
 8001288:	f003 fc35 	bl	8004af6 <HAL_UART_Transmit>
}
 800128c:	bf00      	nop
 800128e:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8001292:	46bd      	mov	sp, r7
 8001294:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001298:	40d00000 	.word	0x40d00000
 800129c:	406f4000 	.word	0x406f4000
 80012a0:	40e00000 	.word	0x40e00000
 80012a4:	08008280 	.word	0x08008280
 80012a8:	20000268 	.word	0x20000268
 80012ac:	080082a4 	.word	0x080082a4

080012b0 <MPU_read_mag>:

void MPU_read_mag(MPU9250* mpu9250){
 80012b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012b4:	b0a8      	sub	sp, #160	; 0xa0
 80012b6:	af04      	add	r7, sp, #16
 80012b8:	6078      	str	r0, [r7, #4]
	uint8_t databuf[6];
	int16_t mx,my,mz;
	float Mxyz[30] = {0,};
 80012ba:	f107 030c 	add.w	r3, r7, #12
 80012be:	2278      	movs	r2, #120	; 0x78
 80012c0:	2100      	movs	r1, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f004 f93a 	bl	800553c <memset>

	HAL_I2C_Master_Transmit(AK8963_ADDRESS, AK8963_CNTL, 0x01, 1, 10); //enable the magnetometer
 80012c8:	230a      	movs	r3, #10
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	2301      	movs	r3, #1
 80012ce:	2201      	movs	r2, #1
 80012d0:	210a      	movs	r1, #10
 80012d2:	200c      	movs	r0, #12
 80012d4:	f001 fa54 	bl	8002780 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 80012d8:	200a      	movs	r0, #10
 80012da:	f000 fd15 	bl	8001d08 <HAL_Delay>

	HAL_I2C_Master_Receive(AK8963_ADDRESS, AK8963_XOUT_L, databuf, 6, 10);
 80012de:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80012e2:	230a      	movs	r3, #10
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	2306      	movs	r3, #6
 80012e8:	2103      	movs	r1, #3
 80012ea:	200c      	movs	r0, #12
 80012ec:	f001 fb46 	bl	800297c <HAL_I2C_Master_Receive>

	mx = (((int16_t)databuf[1]) << 8) | databuf[0];
 80012f0:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80012f4:	021b      	lsls	r3, r3, #8
 80012f6:	b21a      	sxth	r2, r3
 80012f8:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80012fc:	b21b      	sxth	r3, r3
 80012fe:	4313      	orrs	r3, r2
 8001300:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	my = (((int16_t)databuf[3]) << 8) | databuf[2];
 8001304:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001308:	021b      	lsls	r3, r3, #8
 800130a:	b21a      	sxth	r2, r3
 800130c:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001310:	b21b      	sxth	r3, r3
 8001312:	4313      	orrs	r3, r2
 8001314:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
	mz = (((int16_t)databuf[5]) << 8) | databuf[4];
 8001318:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800131c:	021b      	lsls	r3, r3, #8
 800131e:	b21a      	sxth	r2, r3
 8001320:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8001324:	b21b      	sxth	r3, r3
 8001326:	4313      	orrs	r3, r2
 8001328:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	Mxyz[0] = (double) mx * 1200 / 4096;
 800132c:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff f8d3 	bl	80004dc <__aeabi_i2d>
 8001336:	f04f 0200 	mov.w	r2, #0
 800133a:	4b3c      	ldr	r3, [pc, #240]	; (800142c <MPU_read_mag+0x17c>)
 800133c:	f7ff f938 	bl	80005b0 <__aeabi_dmul>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4610      	mov	r0, r2
 8001346:	4619      	mov	r1, r3
 8001348:	f04f 0200 	mov.w	r2, #0
 800134c:	4b38      	ldr	r3, [pc, #224]	; (8001430 <MPU_read_mag+0x180>)
 800134e:	f7ff fa59 	bl	8000804 <__aeabi_ddiv>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	4610      	mov	r0, r2
 8001358:	4619      	mov	r1, r3
 800135a:	f7ff fc01 	bl	8000b60 <__aeabi_d2f>
 800135e:	4603      	mov	r3, r0
 8001360:	60fb      	str	r3, [r7, #12]
	Mxyz[1] = (double) my * 1200 / 4096;
 8001362:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	; 0x8c
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff f8b8 	bl	80004dc <__aeabi_i2d>
 800136c:	f04f 0200 	mov.w	r2, #0
 8001370:	4b2e      	ldr	r3, [pc, #184]	; (800142c <MPU_read_mag+0x17c>)
 8001372:	f7ff f91d 	bl	80005b0 <__aeabi_dmul>
 8001376:	4602      	mov	r2, r0
 8001378:	460b      	mov	r3, r1
 800137a:	4610      	mov	r0, r2
 800137c:	4619      	mov	r1, r3
 800137e:	f04f 0200 	mov.w	r2, #0
 8001382:	4b2b      	ldr	r3, [pc, #172]	; (8001430 <MPU_read_mag+0x180>)
 8001384:	f7ff fa3e 	bl	8000804 <__aeabi_ddiv>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	4610      	mov	r0, r2
 800138e:	4619      	mov	r1, r3
 8001390:	f7ff fbe6 	bl	8000b60 <__aeabi_d2f>
 8001394:	4603      	mov	r3, r0
 8001396:	613b      	str	r3, [r7, #16]
	Mxyz[2] = (double) mz * 1200 / 4096;
 8001398:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff f89d 	bl	80004dc <__aeabi_i2d>
 80013a2:	f04f 0200 	mov.w	r2, #0
 80013a6:	4b21      	ldr	r3, [pc, #132]	; (800142c <MPU_read_mag+0x17c>)
 80013a8:	f7ff f902 	bl	80005b0 <__aeabi_dmul>
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	4610      	mov	r0, r2
 80013b2:	4619      	mov	r1, r3
 80013b4:	f04f 0200 	mov.w	r2, #0
 80013b8:	4b1d      	ldr	r3, [pc, #116]	; (8001430 <MPU_read_mag+0x180>)
 80013ba:	f7ff fa23 	bl	8000804 <__aeabi_ddiv>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	4610      	mov	r0, r2
 80013c4:	4619      	mov	r1, r3
 80013c6:	f7ff fbcb 	bl	8000b60 <__aeabi_d2f>
 80013ca:	4603      	mov	r3, r0
 80013cc:	617b      	str	r3, [r7, #20]

	sprintf((char *)Mxyz, "Mag_x: %.1f, y: %.1f, z: %.1f\n", Mxyz[0], Mxyz[1], Mxyz[2]);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff f895 	bl	8000500 <__aeabi_f2d>
 80013d6:	4680      	mov	r8, r0
 80013d8:	4689      	mov	r9, r1
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff f88f 	bl	8000500 <__aeabi_f2d>
 80013e2:	4604      	mov	r4, r0
 80013e4:	460d      	mov	r5, r1
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff f889 	bl	8000500 <__aeabi_f2d>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	f107 000c 	add.w	r0, r7, #12
 80013f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80013fa:	e9cd 4500 	strd	r4, r5, [sp]
 80013fe:	4642      	mov	r2, r8
 8001400:	464b      	mov	r3, r9
 8001402:	490c      	ldr	r1, [pc, #48]	; (8001434 <MPU_read_mag+0x184>)
 8001404:	f004 fd02 	bl	8005e0c <siprintf>
	HAL_UART_Transmit(&huart1, Mxyz, strlen((char*)Mxyz), 10);
 8001408:	f107 030c 	add.w	r3, r7, #12
 800140c:	4618      	mov	r0, r3
 800140e:	f7fe ff0b 	bl	8000228 <strlen>
 8001412:	4603      	mov	r3, r0
 8001414:	b29a      	uxth	r2, r3
 8001416:	f107 010c 	add.w	r1, r7, #12
 800141a:	230a      	movs	r3, #10
 800141c:	4806      	ldr	r0, [pc, #24]	; (8001438 <MPU_read_mag+0x188>)
 800141e:	f003 fb6a 	bl	8004af6 <HAL_UART_Transmit>
}
 8001422:	bf00      	nop
 8001424:	3790      	adds	r7, #144	; 0x90
 8001426:	46bd      	mov	sp, r7
 8001428:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800142c:	4092c000 	.word	0x4092c000
 8001430:	40b00000 	.word	0x40b00000
 8001434:	080082c4 	.word	0x080082c4
 8001438:	20000268 	.word	0x20000268

0800143c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b098      	sub	sp, #96	; 0x60
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t data;
	MPU9250 mpu9250={hi2c1,MPU9250_ADDRESS,AK8963_ADDRESS};
 8001442:	4a23      	ldr	r2, [pc, #140]	; (80014d0 <main+0x94>)
 8001444:	1d3b      	adds	r3, r7, #4
 8001446:	4611      	mov	r1, r2
 8001448:	2254      	movs	r2, #84	; 0x54
 800144a:	4618      	mov	r0, r3
 800144c:	f004 f868 	bl	8005520 <memcpy>
 8001450:	23d0      	movs	r3, #208	; 0xd0
 8001452:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
 8001456:	230c      	movs	r3, #12
 8001458:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800145c:	f000 fbf2 	bl	8001c44 <HAL_Init>

  /* USER CODE BEGIN Init */
  init_uart(&uart);
 8001460:	481c      	ldr	r0, [pc, #112]	; (80014d4 <main+0x98>)
 8001462:	f000 f978 	bl	8001756 <init_uart>
  init_MPU9250(&mpu9250);
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff fd95 	bl	8000f98 <init_MPU9250>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800146e:	f000 f839 	bl	80014e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001472:	f000 f913 	bl	800169c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001476:	f000 f8e7 	bl	8001648 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800147a:	f000 f881 	bl	8001580 <MX_I2C1_Init>
  MX_TIM6_Init();
 800147e:	f000 f8ad 	bl	80015dc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 8001482:	2201      	movs	r2, #1
 8001484:	4914      	ldr	r1, [pc, #80]	; (80014d8 <main+0x9c>)
 8001486:	4815      	ldr	r0, [pc, #84]	; (80014dc <main+0xa0>)
 8001488:	f003 fbc7 	bl	8004c1a <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (isEmpty(&uart) == 0) {
 800148c:	4811      	ldr	r0, [pc, #68]	; (80014d4 <main+0x98>)
 800148e:	f000 f9b4 	bl	80017fa <isEmpty>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d10b      	bne.n	80014b0 <main+0x74>
		  data = pop(&uart);
 8001498:	480e      	ldr	r0, [pc, #56]	; (80014d4 <main+0x98>)
 800149a:	f000 f990 	bl	80017be <pop>
 800149e:	4603      	mov	r3, r0
 80014a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		  if(data == '1')
 80014a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80014a8:	2b31      	cmp	r3, #49	; 0x31
 80014aa:	d101      	bne.n	80014b0 <main+0x74>
			  gyro_who_am_i();
 80014ac:	f7ff fd24 	bl	8000ef8 <gyro_who_am_i>
	  }

	  if(send_flag == true) //1초마다 업데이트
 80014b0:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <main+0xa4>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d0e9      	beq.n	800148c <main+0x50>
	  {
		  MPU_read_acc_gyro(&mpu9250);
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fd96 	bl	8000fec <MPU_read_acc_gyro>
		  MPU_read_mag(&mpu9250);
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff fef4 	bl	80012b0 <MPU_read_mag>
		  send_flag = false;
 80014c8:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <main+0xa4>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	701a      	strb	r2, [r3, #0]
	  if (isEmpty(&uart) == 0) {
 80014ce:	e7dd      	b.n	800148c <main+0x50>
 80014d0:	20000210 	.word	0x20000210
 80014d4:	20000304 	.word	0x20000304
 80014d8:	200002f8 	.word	0x200002f8
 80014dc:	20000268 	.word	0x20000268
 80014e0:	200001f8 	.word	0x200001f8

080014e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b094      	sub	sp, #80	; 0x50
 80014e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ea:	f107 0318 	add.w	r3, r7, #24
 80014ee:	2238      	movs	r2, #56	; 0x38
 80014f0:	2100      	movs	r1, #0
 80014f2:	4618      	mov	r0, r3
 80014f4:	f004 f822 	bl	800553c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
 8001504:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001506:	2301      	movs	r3, #1
 8001508:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800150a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800150e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001510:	2300      	movs	r3, #0
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001514:	2301      	movs	r3, #1
 8001516:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8001518:	2300      	movs	r3, #0
 800151a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800151c:	2302      	movs	r3, #2
 800151e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001520:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001524:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001526:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800152a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 800152c:	2300      	movs	r3, #0
 800152e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001530:	f107 0318 	add.w	r3, r7, #24
 8001534:	4618      	mov	r0, r3
 8001536:	f002 fafd 	bl	8003b34 <HAL_RCC_OscConfig>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8001540:	f000 f904 	bl	800174c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001544:	230f      	movs	r3, #15
 8001546:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001548:	2302      	movs	r3, #2
 800154a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800154c:	2300      	movs	r3, #0
 800154e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001550:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001554:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	2102      	movs	r1, #2
 800155e:	4618      	mov	r0, r3
 8001560:	f002 fdfe 	bl	8004160 <HAL_RCC_ClockConfig>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800156a:	f000 f8ef 	bl	800174c <Error_Handler>
  }
  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 800156e:	4b03      	ldr	r3, [pc, #12]	; (800157c <SystemClock_Config+0x98>)
 8001570:	2201      	movs	r2, #1
 8001572:	601a      	str	r2, [r3, #0]
}
 8001574:	bf00      	nop
 8001576:	3750      	adds	r7, #80	; 0x50
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	42420070 	.word	0x42420070

08001580 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001584:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <MX_I2C1_Init+0x50>)
 8001586:	4a13      	ldr	r2, [pc, #76]	; (80015d4 <MX_I2C1_Init+0x54>)
 8001588:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800158a:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <MX_I2C1_Init+0x50>)
 800158c:	4a12      	ldr	r2, [pc, #72]	; (80015d8 <MX_I2C1_Init+0x58>)
 800158e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001590:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <MX_I2C1_Init+0x50>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001596:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <MX_I2C1_Init+0x50>)
 8001598:	2200      	movs	r2, #0
 800159a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800159c:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <MX_I2C1_Init+0x50>)
 800159e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015a4:	4b0a      	ldr	r3, [pc, #40]	; (80015d0 <MX_I2C1_Init+0x50>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015aa:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <MX_I2C1_Init+0x50>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015b0:	4b07      	ldr	r3, [pc, #28]	; (80015d0 <MX_I2C1_Init+0x50>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <MX_I2C1_Init+0x50>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015bc:	4804      	ldr	r0, [pc, #16]	; (80015d0 <MX_I2C1_Init+0x50>)
 80015be:	f000 ff9b 	bl	80024f8 <HAL_I2C_Init>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015c8:	f000 f8c0 	bl	800174c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015cc:	bf00      	nop
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000210 	.word	0x20000210
 80015d4:	40005400 	.word	0x40005400
 80015d8:	00061a80 	.word	0x00061a80

080015dc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e2:	463b      	mov	r3, r7
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80015ea:	4b15      	ldr	r3, [pc, #84]	; (8001640 <MX_TIM6_Init+0x64>)
 80015ec:	4a15      	ldr	r2, [pc, #84]	; (8001644 <MX_TIM6_Init+0x68>)
 80015ee:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7200 - 1;
 80015f0:	4b13      	ldr	r3, [pc, #76]	; (8001640 <MX_TIM6_Init+0x64>)
 80015f2:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80015f6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f8:	4b11      	ldr	r3, [pc, #68]	; (8001640 <MX_TIM6_Init+0x64>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 80015fe:	4b10      	ldr	r3, [pc, #64]	; (8001640 <MX_TIM6_Init+0x64>)
 8001600:	f242 720f 	movw	r2, #9999	; 0x270f
 8001604:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001606:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <MX_TIM6_Init+0x64>)
 8001608:	2200      	movs	r2, #0
 800160a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800160c:	480c      	ldr	r0, [pc, #48]	; (8001640 <MX_TIM6_Init+0x64>)
 800160e:	f002 ffc5 	bl	800459c <HAL_TIM_Base_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001618:	f000 f898 	bl	800174c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800161c:	2300      	movs	r3, #0
 800161e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001620:	2300      	movs	r3, #0
 8001622:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001624:	463b      	mov	r3, r7
 8001626:	4619      	mov	r1, r3
 8001628:	4805      	ldr	r0, [pc, #20]	; (8001640 <MX_TIM6_Init+0x64>)
 800162a:	f003 f99f 	bl	800496c <HAL_TIMEx_MasterConfigSynchronization>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001634:	f000 f88a 	bl	800174c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001638:	bf00      	nop
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	200002b0 	.word	0x200002b0
 8001644:	40001000 	.word	0x40001000

08001648 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800164c:	4b11      	ldr	r3, [pc, #68]	; (8001694 <MX_USART1_UART_Init+0x4c>)
 800164e:	4a12      	ldr	r2, [pc, #72]	; (8001698 <MX_USART1_UART_Init+0x50>)
 8001650:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001652:	4b10      	ldr	r3, [pc, #64]	; (8001694 <MX_USART1_UART_Init+0x4c>)
 8001654:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001658:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800165a:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <MX_USART1_UART_Init+0x4c>)
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001660:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <MX_USART1_UART_Init+0x4c>)
 8001662:	2200      	movs	r2, #0
 8001664:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001666:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <MX_USART1_UART_Init+0x4c>)
 8001668:	2200      	movs	r2, #0
 800166a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800166c:	4b09      	ldr	r3, [pc, #36]	; (8001694 <MX_USART1_UART_Init+0x4c>)
 800166e:	220c      	movs	r2, #12
 8001670:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001672:	4b08      	ldr	r3, [pc, #32]	; (8001694 <MX_USART1_UART_Init+0x4c>)
 8001674:	2200      	movs	r2, #0
 8001676:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001678:	4b06      	ldr	r3, [pc, #24]	; (8001694 <MX_USART1_UART_Init+0x4c>)
 800167a:	2200      	movs	r2, #0
 800167c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800167e:	4805      	ldr	r0, [pc, #20]	; (8001694 <MX_USART1_UART_Init+0x4c>)
 8001680:	f003 f9ec 	bl	8004a5c <HAL_UART_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800168a:	f000 f85f 	bl	800174c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000268 	.word	0x20000268
 8001698:	40013800 	.word	0x40013800

0800169c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a2:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <MX_GPIO_Init+0x40>)
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	4a0d      	ldr	r2, [pc, #52]	; (80016dc <MX_GPIO_Init+0x40>)
 80016a8:	f043 0304 	orr.w	r3, r3, #4
 80016ac:	6193      	str	r3, [r2, #24]
 80016ae:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <MX_GPIO_Init+0x40>)
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	f003 0304 	and.w	r3, r3, #4
 80016b6:	607b      	str	r3, [r7, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ba:	4b08      	ldr	r3, [pc, #32]	; (80016dc <MX_GPIO_Init+0x40>)
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	4a07      	ldr	r2, [pc, #28]	; (80016dc <MX_GPIO_Init+0x40>)
 80016c0:	f043 0308 	orr.w	r3, r3, #8
 80016c4:	6193      	str	r3, [r2, #24]
 80016c6:	4b05      	ldr	r3, [pc, #20]	; (80016dc <MX_GPIO_Init+0x40>)
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	f003 0308 	and.w	r3, r3, #8
 80016ce:	603b      	str	r3, [r7, #0]
 80016d0:	683b      	ldr	r3, [r7, #0]

}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr
 80016dc:	40021000 	.word	0x40021000

080016e0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM6) //1Hz
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a05      	ldr	r2, [pc, #20]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d102      	bne.n	80016f8 <HAL_TIM_PeriodElapsedCallback+0x18>
  {
	  send_flag = true;
 80016f2:	4b05      	ldr	r3, [pc, #20]	; (8001708 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80016f4:	2201      	movs	r2, #1
 80016f6:	701a      	strb	r2, [r3, #0]
  }
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	40001000 	.word	0x40001000
 8001708:	200001f8 	.word	0x200001f8

0800170c <HAL_UART_RxCpltCallback>:

/*Interrupts RX Callback************************************************************/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1) {
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a08      	ldr	r2, [pc, #32]	; (800173c <HAL_UART_RxCpltCallback+0x30>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d10a      	bne.n	8001734 <HAL_UART_RxCpltCallback+0x28>
    push(&uart, rx_data);
 800171e:	4b08      	ldr	r3, [pc, #32]	; (8001740 <HAL_UART_RxCpltCallback+0x34>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	4619      	mov	r1, r3
 8001724:	4807      	ldr	r0, [pc, #28]	; (8001744 <HAL_UART_RxCpltCallback+0x38>)
 8001726:	f000 f82b 	bl	8001780 <push>
    HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 800172a:	2201      	movs	r2, #1
 800172c:	4904      	ldr	r1, [pc, #16]	; (8001740 <HAL_UART_RxCpltCallback+0x34>)
 800172e:	4806      	ldr	r0, [pc, #24]	; (8001748 <HAL_UART_RxCpltCallback+0x3c>)
 8001730:	f003 fa73 	bl	8004c1a <HAL_UART_Receive_IT>
  }
}
 8001734:	bf00      	nop
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40013800 	.word	0x40013800
 8001740:	200002f8 	.word	0x200002f8
 8001744:	20000304 	.word	0x20000304
 8001748:	20000268 	.word	0x20000268

0800174c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001750:	b672      	cpsid	i
}
 8001752:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001754:	e7fe      	b.n	8001754 <Error_Handler+0x8>

08001756 <init_uart>:
#include "module_uart.h"
#include <string.h>
#include "stdio.h"

void init_uart(uart_t* u)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b082      	sub	sp, #8
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
  u->head = 0;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	701a      	strb	r2, [r3, #0]
  u->tail = 0;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	705a      	strb	r2, [r3, #1]
  memset(u->buffer, 0, sizeof(u->buffer));
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	3302      	adds	r3, #2
 800176e:	22ff      	movs	r2, #255	; 0xff
 8001770:	2100      	movs	r1, #0
 8001772:	4618      	mov	r0, r3
 8001774:	f003 fee2 	bl	800553c <memset>
}
 8001778:	bf00      	nop
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <push>:

void push(uart_t* u, uint8_t data)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	460b      	mov	r3, r1
 800178a:	70fb      	strb	r3, [r7, #3]
  u->buffer[u->head] = data;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	461a      	mov	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4413      	add	r3, r2
 8001796:	78fa      	ldrb	r2, [r7, #3]
 8001798:	709a      	strb	r2, [r3, #2]

  u->head++;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	3301      	adds	r3, #1
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	701a      	strb	r2, [r3, #0]

  if (u->head >= MAX_BUFFER_SIZE) {
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2bff      	cmp	r3, #255	; 0xff
 80017ac:	d102      	bne.n	80017b4 <push+0x34>
    u->head = 0;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	701a      	strb	r2, [r3, #0]
  }
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr

080017be <pop>:

uint8_t pop(uart_t* u)
{
 80017be:	b480      	push	{r7}
 80017c0:	b085      	sub	sp, #20
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
  uint8_t data = u->buffer[u->tail];
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	785b      	ldrb	r3, [r3, #1]
 80017ca:	461a      	mov	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4413      	add	r3, r2
 80017d0:	789b      	ldrb	r3, [r3, #2]
 80017d2:	73fb      	strb	r3, [r7, #15]

  u->tail++;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	785b      	ldrb	r3, [r3, #1]
 80017d8:	3301      	adds	r3, #1
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	705a      	strb	r2, [r3, #1]

  if (u->tail >= MAX_BUFFER_SIZE) {
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	785b      	ldrb	r3, [r3, #1]
 80017e4:	2bff      	cmp	r3, #255	; 0xff
 80017e6:	d102      	bne.n	80017ee <pop+0x30>
    u->tail = 0;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	705a      	strb	r2, [r3, #1]
  }

  return data;
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bc80      	pop	{r7}
 80017f8:	4770      	bx	lr

080017fa <isEmpty>:

uint8_t isEmpty(uart_t* u)
{
 80017fa:	b480      	push	{r7}
 80017fc:	b083      	sub	sp, #12
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
  return u->head == u->tail;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	781a      	ldrb	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	785b      	ldrb	r3, [r3, #1]
 800180a:	429a      	cmp	r2, r3
 800180c:	bf0c      	ite	eq
 800180e:	2301      	moveq	r3, #1
 8001810:	2300      	movne	r3, #0
 8001812:	b2db      	uxtb	r3, r3
}
 8001814:	4618      	mov	r0, r3
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	bc80      	pop	{r7}
 800181c:	4770      	bx	lr
	...

08001820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001826:	4b15      	ldr	r3, [pc, #84]	; (800187c <HAL_MspInit+0x5c>)
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	4a14      	ldr	r2, [pc, #80]	; (800187c <HAL_MspInit+0x5c>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	6193      	str	r3, [r2, #24]
 8001832:	4b12      	ldr	r3, [pc, #72]	; (800187c <HAL_MspInit+0x5c>)
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	60bb      	str	r3, [r7, #8]
 800183c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800183e:	4b0f      	ldr	r3, [pc, #60]	; (800187c <HAL_MspInit+0x5c>)
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	4a0e      	ldr	r2, [pc, #56]	; (800187c <HAL_MspInit+0x5c>)
 8001844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001848:	61d3      	str	r3, [r2, #28]
 800184a:	4b0c      	ldr	r3, [pc, #48]	; (800187c <HAL_MspInit+0x5c>)
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001852:	607b      	str	r3, [r7, #4]
 8001854:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001856:	4b0a      	ldr	r3, [pc, #40]	; (8001880 <HAL_MspInit+0x60>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	4a04      	ldr	r2, [pc, #16]	; (8001880 <HAL_MspInit+0x60>)
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001872:	bf00      	nop
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr
 800187c:	40021000 	.word	0x40021000
 8001880:	40010000 	.word	0x40010000

08001884 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b088      	sub	sp, #32
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188c:	f107 0310 	add.w	r3, r7, #16
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a15      	ldr	r2, [pc, #84]	; (80018f4 <HAL_I2C_MspInit+0x70>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d123      	bne.n	80018ec <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a4:	4b14      	ldr	r3, [pc, #80]	; (80018f8 <HAL_I2C_MspInit+0x74>)
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	4a13      	ldr	r2, [pc, #76]	; (80018f8 <HAL_I2C_MspInit+0x74>)
 80018aa:	f043 0308 	orr.w	r3, r3, #8
 80018ae:	6193      	str	r3, [r2, #24]
 80018b0:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <HAL_I2C_MspInit+0x74>)
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	f003 0308 	and.w	r3, r3, #8
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018bc:	23c0      	movs	r3, #192	; 0xc0
 80018be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018c0:	2312      	movs	r3, #18
 80018c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018c4:	2303      	movs	r3, #3
 80018c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c8:	f107 0310 	add.w	r3, r7, #16
 80018cc:	4619      	mov	r1, r3
 80018ce:	480b      	ldr	r0, [pc, #44]	; (80018fc <HAL_I2C_MspInit+0x78>)
 80018d0:	f000 fc8e 	bl	80021f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018d4:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <HAL_I2C_MspInit+0x74>)
 80018d6:	69db      	ldr	r3, [r3, #28]
 80018d8:	4a07      	ldr	r2, [pc, #28]	; (80018f8 <HAL_I2C_MspInit+0x74>)
 80018da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018de:	61d3      	str	r3, [r2, #28]
 80018e0:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <HAL_I2C_MspInit+0x74>)
 80018e2:	69db      	ldr	r3, [r3, #28]
 80018e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018e8:	60bb      	str	r3, [r7, #8]
 80018ea:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018ec:	bf00      	nop
 80018ee:	3720      	adds	r7, #32
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40005400 	.word	0x40005400
 80018f8:	40021000 	.word	0x40021000
 80018fc:	40010c00 	.word	0x40010c00

08001900 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a0d      	ldr	r2, [pc, #52]	; (8001944 <HAL_TIM_Base_MspInit+0x44>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d113      	bne.n	800193a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001912:	4b0d      	ldr	r3, [pc, #52]	; (8001948 <HAL_TIM_Base_MspInit+0x48>)
 8001914:	69db      	ldr	r3, [r3, #28]
 8001916:	4a0c      	ldr	r2, [pc, #48]	; (8001948 <HAL_TIM_Base_MspInit+0x48>)
 8001918:	f043 0310 	orr.w	r3, r3, #16
 800191c:	61d3      	str	r3, [r2, #28]
 800191e:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <HAL_TIM_Base_MspInit+0x48>)
 8001920:	69db      	ldr	r3, [r3, #28]
 8001922:	f003 0310 	and.w	r3, r3, #16
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 800192a:	2200      	movs	r2, #0
 800192c:	2100      	movs	r1, #0
 800192e:	2036      	movs	r0, #54	; 0x36
 8001930:	f000 fae5 	bl	8001efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001934:	2036      	movs	r0, #54	; 0x36
 8001936:	f000 fafe 	bl	8001f36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800193a:	bf00      	nop
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40001000 	.word	0x40001000
 8001948:	40021000 	.word	0x40021000

0800194c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001954:	f107 0310 	add.w	r3, r7, #16
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a20      	ldr	r2, [pc, #128]	; (80019e8 <HAL_UART_MspInit+0x9c>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d139      	bne.n	80019e0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800196c:	4b1f      	ldr	r3, [pc, #124]	; (80019ec <HAL_UART_MspInit+0xa0>)
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	4a1e      	ldr	r2, [pc, #120]	; (80019ec <HAL_UART_MspInit+0xa0>)
 8001972:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001976:	6193      	str	r3, [r2, #24]
 8001978:	4b1c      	ldr	r3, [pc, #112]	; (80019ec <HAL_UART_MspInit+0xa0>)
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001984:	4b19      	ldr	r3, [pc, #100]	; (80019ec <HAL_UART_MspInit+0xa0>)
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	4a18      	ldr	r2, [pc, #96]	; (80019ec <HAL_UART_MspInit+0xa0>)
 800198a:	f043 0304 	orr.w	r3, r3, #4
 800198e:	6193      	str	r3, [r2, #24]
 8001990:	4b16      	ldr	r3, [pc, #88]	; (80019ec <HAL_UART_MspInit+0xa0>)
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	f003 0304 	and.w	r3, r3, #4
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800199c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a2:	2302      	movs	r3, #2
 80019a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019a6:	2303      	movs	r3, #3
 80019a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019aa:	f107 0310 	add.w	r3, r7, #16
 80019ae:	4619      	mov	r1, r3
 80019b0:	480f      	ldr	r0, [pc, #60]	; (80019f0 <HAL_UART_MspInit+0xa4>)
 80019b2:	f000 fc1d 	bl	80021f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c4:	f107 0310 	add.w	r3, r7, #16
 80019c8:	4619      	mov	r1, r3
 80019ca:	4809      	ldr	r0, [pc, #36]	; (80019f0 <HAL_UART_MspInit+0xa4>)
 80019cc:	f000 fc10 	bl	80021f0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80019d0:	2200      	movs	r2, #0
 80019d2:	2100      	movs	r1, #0
 80019d4:	2025      	movs	r0, #37	; 0x25
 80019d6:	f000 fa92 	bl	8001efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019da:	2025      	movs	r0, #37	; 0x25
 80019dc:	f000 faab 	bl	8001f36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80019e0:	bf00      	nop
 80019e2:	3720      	adds	r7, #32
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40013800 	.word	0x40013800
 80019ec:	40021000 	.word	0x40021000
 80019f0:	40010800 	.word	0x40010800

080019f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019f8:	e7fe      	b.n	80019f8 <NMI_Handler+0x4>

080019fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019fe:	e7fe      	b.n	80019fe <HardFault_Handler+0x4>

08001a00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a04:	e7fe      	b.n	8001a04 <MemManage_Handler+0x4>

08001a06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a0a:	e7fe      	b.n	8001a0a <BusFault_Handler+0x4>

08001a0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a10:	e7fe      	b.n	8001a10 <UsageFault_Handler+0x4>

08001a12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc80      	pop	{r7}
 8001a1c:	4770      	bx	lr

08001a1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc80      	pop	{r7}
 8001a28:	4770      	bx	lr

08001a2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bc80      	pop	{r7}
 8001a34:	4770      	bx	lr

08001a36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a3a:	f000 f949 	bl	8001cd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a48:	4802      	ldr	r0, [pc, #8]	; (8001a54 <USART1_IRQHandler+0x10>)
 8001a4a:	f003 f917 	bl	8004c7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000268 	.word	0x20000268

08001a58 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a5c:	4802      	ldr	r0, [pc, #8]	; (8001a68 <TIM6_IRQHandler+0x10>)
 8001a5e:	f002 fdec 	bl	800463a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	200002b0 	.word	0x200002b0

08001a6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
	return 1;
 8001a70:	2301      	movs	r3, #1
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bc80      	pop	{r7}
 8001a78:	4770      	bx	lr

08001a7a <_kill>:

int _kill(int pid, int sig)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b082      	sub	sp, #8
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
 8001a82:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a84:	f003 fd22 	bl	80054cc <__errno>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2216      	movs	r2, #22
 8001a8c:	601a      	str	r2, [r3, #0]
	return -1;
 8001a8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <_exit>:

void _exit (int status)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b082      	sub	sp, #8
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001aa2:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff ffe7 	bl	8001a7a <_kill>
	while (1) {}		/* Make sure we hang here */
 8001aac:	e7fe      	b.n	8001aac <_exit+0x12>

08001aae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b086      	sub	sp, #24
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	60f8      	str	r0, [r7, #12]
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
 8001abe:	e00a      	b.n	8001ad6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ac0:	f3af 8000 	nop.w
 8001ac4:	4601      	mov	r1, r0
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	1c5a      	adds	r2, r3, #1
 8001aca:	60ba      	str	r2, [r7, #8]
 8001acc:	b2ca      	uxtb	r2, r1
 8001ace:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	617b      	str	r3, [r7, #20]
 8001ad6:	697a      	ldr	r2, [r7, #20]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	dbf0      	blt.n	8001ac0 <_read+0x12>
	}

return len;
 8001ade:	687b      	ldr	r3, [r7, #4]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3718      	adds	r7, #24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]
 8001af8:	e009      	b.n	8001b0e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	1c5a      	adds	r2, r3, #1
 8001afe:	60ba      	str	r2, [r7, #8]
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	617b      	str	r3, [r7, #20]
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	dbf1      	blt.n	8001afa <_write+0x12>
	}
	return len;
 8001b16:	687b      	ldr	r3, [r7, #4]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <_close>:

int _close(int file)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
	return -1;
 8001b28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc80      	pop	{r7}
 8001b34:	4770      	bx	lr

08001b36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
 8001b3e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b46:	605a      	str	r2, [r3, #4]
	return 0;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr

08001b54 <_isatty>:

int _isatty(int file)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
	return 1;
 8001b5c:	2301      	movs	r3, #1
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr

08001b68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
	return 0;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr

08001b80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b88:	4a14      	ldr	r2, [pc, #80]	; (8001bdc <_sbrk+0x5c>)
 8001b8a:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <_sbrk+0x60>)
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b94:	4b13      	ldr	r3, [pc, #76]	; (8001be4 <_sbrk+0x64>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d102      	bne.n	8001ba2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b9c:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <_sbrk+0x64>)
 8001b9e:	4a12      	ldr	r2, [pc, #72]	; (8001be8 <_sbrk+0x68>)
 8001ba0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ba2:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <_sbrk+0x64>)
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4413      	add	r3, r2
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d207      	bcs.n	8001bc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bb0:	f003 fc8c 	bl	80054cc <__errno>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	220c      	movs	r2, #12
 8001bb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bba:	f04f 33ff 	mov.w	r3, #4294967295
 8001bbe:	e009      	b.n	8001bd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bc0:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <_sbrk+0x64>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bc6:	4b07      	ldr	r3, [pc, #28]	; (8001be4 <_sbrk+0x64>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4413      	add	r3, r2
 8001bce:	4a05      	ldr	r2, [pc, #20]	; (8001be4 <_sbrk+0x64>)
 8001bd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20010000 	.word	0x20010000
 8001be0:	00000400 	.word	0x00000400
 8001be4:	200001fc 	.word	0x200001fc
 8001be8:	20000420 	.word	0x20000420

08001bec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bf0:	bf00      	nop
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr

08001bf8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bf8:	480c      	ldr	r0, [pc, #48]	; (8001c2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bfa:	490d      	ldr	r1, [pc, #52]	; (8001c30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bfc:	4a0d      	ldr	r2, [pc, #52]	; (8001c34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c00:	e002      	b.n	8001c08 <LoopCopyDataInit>

08001c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c06:	3304      	adds	r3, #4

08001c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c0c:	d3f9      	bcc.n	8001c02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c0e:	4a0a      	ldr	r2, [pc, #40]	; (8001c38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c10:	4c0a      	ldr	r4, [pc, #40]	; (8001c3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c14:	e001      	b.n	8001c1a <LoopFillZerobss>

08001c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c18:	3204      	adds	r2, #4

08001c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c1c:	d3fb      	bcc.n	8001c16 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c1e:	f7ff ffe5 	bl	8001bec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c22:	f003 fc59 	bl	80054d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c26:	f7ff fc09 	bl	800143c <main>
  bx lr
 8001c2a:	4770      	bx	lr
  ldr r0, =_sdata
 8001c2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c30:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001c34:	0800870c 	.word	0x0800870c
  ldr r2, =_sbss
 8001c38:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001c3c:	2000041c 	.word	0x2000041c

08001c40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c40:	e7fe      	b.n	8001c40 <ADC1_2_IRQHandler>
	...

08001c44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c48:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <HAL_Init+0x28>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a07      	ldr	r2, [pc, #28]	; (8001c6c <HAL_Init+0x28>)
 8001c4e:	f043 0310 	orr.w	r3, r3, #16
 8001c52:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c54:	2003      	movs	r0, #3
 8001c56:	f000 f947 	bl	8001ee8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c5a:	200f      	movs	r0, #15
 8001c5c:	f000 f808 	bl	8001c70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c60:	f7ff fdde 	bl	8001820 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40022000 	.word	0x40022000

08001c70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c78:	4b12      	ldr	r3, [pc, #72]	; (8001cc4 <HAL_InitTick+0x54>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	4b12      	ldr	r3, [pc, #72]	; (8001cc8 <HAL_InitTick+0x58>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	4619      	mov	r1, r3
 8001c82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c86:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f000 f95f 	bl	8001f52 <HAL_SYSTICK_Config>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e00e      	b.n	8001cbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2b0f      	cmp	r3, #15
 8001ca2:	d80a      	bhi.n	8001cba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	6879      	ldr	r1, [r7, #4]
 8001ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cac:	f000 f927 	bl	8001efe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cb0:	4a06      	ldr	r2, [pc, #24]	; (8001ccc <HAL_InitTick+0x5c>)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	e000      	b.n	8001cbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20000000 	.word	0x20000000
 8001cc8:	20000008 	.word	0x20000008
 8001ccc:	20000004 	.word	0x20000004

08001cd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cd4:	4b05      	ldr	r3, [pc, #20]	; (8001cec <HAL_IncTick+0x1c>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <HAL_IncTick+0x20>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4413      	add	r3, r2
 8001ce0:	4a03      	ldr	r2, [pc, #12]	; (8001cf0 <HAL_IncTick+0x20>)
 8001ce2:	6013      	str	r3, [r2, #0]
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr
 8001cec:	20000008 	.word	0x20000008
 8001cf0:	20000408 	.word	0x20000408

08001cf4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cf8:	4b02      	ldr	r3, [pc, #8]	; (8001d04 <HAL_GetTick+0x10>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr
 8001d04:	20000408 	.word	0x20000408

08001d08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d10:	f7ff fff0 	bl	8001cf4 <HAL_GetTick>
 8001d14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d20:	d005      	beq.n	8001d2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d22:	4b0a      	ldr	r3, [pc, #40]	; (8001d4c <HAL_Delay+0x44>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	461a      	mov	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d2e:	bf00      	nop
 8001d30:	f7ff ffe0 	bl	8001cf4 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d8f7      	bhi.n	8001d30 <HAL_Delay+0x28>
  {
  }
}
 8001d40:	bf00      	nop
 8001d42:	bf00      	nop
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20000008 	.word	0x20000008

08001d50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d60:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <__NVIC_SetPriorityGrouping+0x44>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d82:	4a04      	ldr	r2, [pc, #16]	; (8001d94 <__NVIC_SetPriorityGrouping+0x44>)
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	60d3      	str	r3, [r2, #12]
}
 8001d88:	bf00      	nop
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d9c:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <__NVIC_GetPriorityGrouping+0x18>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	0a1b      	lsrs	r3, r3, #8
 8001da2:	f003 0307 	and.w	r3, r3, #7
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bc80      	pop	{r7}
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	db0b      	blt.n	8001dde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	f003 021f 	and.w	r2, r3, #31
 8001dcc:	4906      	ldr	r1, [pc, #24]	; (8001de8 <__NVIC_EnableIRQ+0x34>)
 8001dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd2:	095b      	lsrs	r3, r3, #5
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr
 8001de8:	e000e100 	.word	0xe000e100

08001dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	6039      	str	r1, [r7, #0]
 8001df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	db0a      	blt.n	8001e16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	490c      	ldr	r1, [pc, #48]	; (8001e38 <__NVIC_SetPriority+0x4c>)
 8001e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0a:	0112      	lsls	r2, r2, #4
 8001e0c:	b2d2      	uxtb	r2, r2
 8001e0e:	440b      	add	r3, r1
 8001e10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e14:	e00a      	b.n	8001e2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	4908      	ldr	r1, [pc, #32]	; (8001e3c <__NVIC_SetPriority+0x50>)
 8001e1c:	79fb      	ldrb	r3, [r7, #7]
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	3b04      	subs	r3, #4
 8001e24:	0112      	lsls	r2, r2, #4
 8001e26:	b2d2      	uxtb	r2, r2
 8001e28:	440b      	add	r3, r1
 8001e2a:	761a      	strb	r2, [r3, #24]
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bc80      	pop	{r7}
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	e000e100 	.word	0xe000e100
 8001e3c:	e000ed00 	.word	0xe000ed00

08001e40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b089      	sub	sp, #36	; 0x24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f1c3 0307 	rsb	r3, r3, #7
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	bf28      	it	cs
 8001e5e:	2304      	movcs	r3, #4
 8001e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	3304      	adds	r3, #4
 8001e66:	2b06      	cmp	r3, #6
 8001e68:	d902      	bls.n	8001e70 <NVIC_EncodePriority+0x30>
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	3b03      	subs	r3, #3
 8001e6e:	e000      	b.n	8001e72 <NVIC_EncodePriority+0x32>
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e74:	f04f 32ff 	mov.w	r2, #4294967295
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43da      	mvns	r2, r3
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	401a      	ands	r2, r3
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e88:	f04f 31ff 	mov.w	r1, #4294967295
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e92:	43d9      	mvns	r1, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e98:	4313      	orrs	r3, r2
         );
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3724      	adds	r7, #36	; 0x24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr

08001ea4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eb4:	d301      	bcc.n	8001eba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e00f      	b.n	8001eda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eba:	4a0a      	ldr	r2, [pc, #40]	; (8001ee4 <SysTick_Config+0x40>)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ec2:	210f      	movs	r1, #15
 8001ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec8:	f7ff ff90 	bl	8001dec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ecc:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <SysTick_Config+0x40>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ed2:	4b04      	ldr	r3, [pc, #16]	; (8001ee4 <SysTick_Config+0x40>)
 8001ed4:	2207      	movs	r2, #7
 8001ed6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	e000e010 	.word	0xe000e010

08001ee8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f7ff ff2d 	bl	8001d50 <__NVIC_SetPriorityGrouping>
}
 8001ef6:	bf00      	nop
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b086      	sub	sp, #24
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	4603      	mov	r3, r0
 8001f06:	60b9      	str	r1, [r7, #8]
 8001f08:	607a      	str	r2, [r7, #4]
 8001f0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f10:	f7ff ff42 	bl	8001d98 <__NVIC_GetPriorityGrouping>
 8001f14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	68b9      	ldr	r1, [r7, #8]
 8001f1a:	6978      	ldr	r0, [r7, #20]
 8001f1c:	f7ff ff90 	bl	8001e40 <NVIC_EncodePriority>
 8001f20:	4602      	mov	r2, r0
 8001f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f26:	4611      	mov	r1, r2
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff ff5f 	bl	8001dec <__NVIC_SetPriority>
}
 8001f2e:	bf00      	nop
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff ff35 	bl	8001db4 <__NVIC_EnableIRQ>
}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b082      	sub	sp, #8
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7ff ffa2 	bl	8001ea4 <SysTick_Config>
 8001f60:	4603      	mov	r3, r0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b085      	sub	sp, #20
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f72:	2300      	movs	r3, #0
 8001f74:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d008      	beq.n	8001f92 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2204      	movs	r2, #4
 8001f84:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e020      	b.n	8001fd4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 020e 	bic.w	r2, r2, #14
 8001fa0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 0201 	bic.w	r2, r2, #1
 8001fb0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fba:	2101      	movs	r1, #1
 8001fbc:	fa01 f202 	lsl.w	r2, r1, r2
 8001fc0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3714      	adds	r7, #20
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bc80      	pop	{r7}
 8001fdc:	4770      	bx	lr
	...

08001fe0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d005      	beq.n	8002002 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2204      	movs	r2, #4
 8001ffa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	73fb      	strb	r3, [r7, #15]
 8002000:	e0d6      	b.n	80021b0 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 020e 	bic.w	r2, r2, #14
 8002010:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 0201 	bic.w	r2, r2, #1
 8002020:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	461a      	mov	r2, r3
 8002028:	4b64      	ldr	r3, [pc, #400]	; (80021bc <HAL_DMA_Abort_IT+0x1dc>)
 800202a:	429a      	cmp	r2, r3
 800202c:	d958      	bls.n	80020e0 <HAL_DMA_Abort_IT+0x100>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a63      	ldr	r2, [pc, #396]	; (80021c0 <HAL_DMA_Abort_IT+0x1e0>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d04f      	beq.n	80020d8 <HAL_DMA_Abort_IT+0xf8>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a61      	ldr	r2, [pc, #388]	; (80021c4 <HAL_DMA_Abort_IT+0x1e4>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d048      	beq.n	80020d4 <HAL_DMA_Abort_IT+0xf4>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a60      	ldr	r2, [pc, #384]	; (80021c8 <HAL_DMA_Abort_IT+0x1e8>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d040      	beq.n	80020ce <HAL_DMA_Abort_IT+0xee>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a5e      	ldr	r2, [pc, #376]	; (80021cc <HAL_DMA_Abort_IT+0x1ec>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d038      	beq.n	80020c8 <HAL_DMA_Abort_IT+0xe8>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a5d      	ldr	r2, [pc, #372]	; (80021d0 <HAL_DMA_Abort_IT+0x1f0>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d030      	beq.n	80020c2 <HAL_DMA_Abort_IT+0xe2>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a5b      	ldr	r2, [pc, #364]	; (80021d4 <HAL_DMA_Abort_IT+0x1f4>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d028      	beq.n	80020bc <HAL_DMA_Abort_IT+0xdc>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a53      	ldr	r2, [pc, #332]	; (80021bc <HAL_DMA_Abort_IT+0x1dc>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d020      	beq.n	80020b6 <HAL_DMA_Abort_IT+0xd6>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a57      	ldr	r2, [pc, #348]	; (80021d8 <HAL_DMA_Abort_IT+0x1f8>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d019      	beq.n	80020b2 <HAL_DMA_Abort_IT+0xd2>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a56      	ldr	r2, [pc, #344]	; (80021dc <HAL_DMA_Abort_IT+0x1fc>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d012      	beq.n	80020ae <HAL_DMA_Abort_IT+0xce>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a54      	ldr	r2, [pc, #336]	; (80021e0 <HAL_DMA_Abort_IT+0x200>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d00a      	beq.n	80020a8 <HAL_DMA_Abort_IT+0xc8>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a53      	ldr	r2, [pc, #332]	; (80021e4 <HAL_DMA_Abort_IT+0x204>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d102      	bne.n	80020a2 <HAL_DMA_Abort_IT+0xc2>
 800209c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020a0:	e01b      	b.n	80020da <HAL_DMA_Abort_IT+0xfa>
 80020a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020a6:	e018      	b.n	80020da <HAL_DMA_Abort_IT+0xfa>
 80020a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020ac:	e015      	b.n	80020da <HAL_DMA_Abort_IT+0xfa>
 80020ae:	2310      	movs	r3, #16
 80020b0:	e013      	b.n	80020da <HAL_DMA_Abort_IT+0xfa>
 80020b2:	2301      	movs	r3, #1
 80020b4:	e011      	b.n	80020da <HAL_DMA_Abort_IT+0xfa>
 80020b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020ba:	e00e      	b.n	80020da <HAL_DMA_Abort_IT+0xfa>
 80020bc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80020c0:	e00b      	b.n	80020da <HAL_DMA_Abort_IT+0xfa>
 80020c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020c6:	e008      	b.n	80020da <HAL_DMA_Abort_IT+0xfa>
 80020c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020cc:	e005      	b.n	80020da <HAL_DMA_Abort_IT+0xfa>
 80020ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020d2:	e002      	b.n	80020da <HAL_DMA_Abort_IT+0xfa>
 80020d4:	2310      	movs	r3, #16
 80020d6:	e000      	b.n	80020da <HAL_DMA_Abort_IT+0xfa>
 80020d8:	2301      	movs	r3, #1
 80020da:	4a43      	ldr	r2, [pc, #268]	; (80021e8 <HAL_DMA_Abort_IT+0x208>)
 80020dc:	6053      	str	r3, [r2, #4]
 80020de:	e057      	b.n	8002190 <HAL_DMA_Abort_IT+0x1b0>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a36      	ldr	r2, [pc, #216]	; (80021c0 <HAL_DMA_Abort_IT+0x1e0>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d04f      	beq.n	800218a <HAL_DMA_Abort_IT+0x1aa>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a35      	ldr	r2, [pc, #212]	; (80021c4 <HAL_DMA_Abort_IT+0x1e4>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d048      	beq.n	8002186 <HAL_DMA_Abort_IT+0x1a6>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a33      	ldr	r2, [pc, #204]	; (80021c8 <HAL_DMA_Abort_IT+0x1e8>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d040      	beq.n	8002180 <HAL_DMA_Abort_IT+0x1a0>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a32      	ldr	r2, [pc, #200]	; (80021cc <HAL_DMA_Abort_IT+0x1ec>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d038      	beq.n	800217a <HAL_DMA_Abort_IT+0x19a>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a30      	ldr	r2, [pc, #192]	; (80021d0 <HAL_DMA_Abort_IT+0x1f0>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d030      	beq.n	8002174 <HAL_DMA_Abort_IT+0x194>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a2f      	ldr	r2, [pc, #188]	; (80021d4 <HAL_DMA_Abort_IT+0x1f4>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d028      	beq.n	800216e <HAL_DMA_Abort_IT+0x18e>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a26      	ldr	r2, [pc, #152]	; (80021bc <HAL_DMA_Abort_IT+0x1dc>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d020      	beq.n	8002168 <HAL_DMA_Abort_IT+0x188>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a2b      	ldr	r2, [pc, #172]	; (80021d8 <HAL_DMA_Abort_IT+0x1f8>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d019      	beq.n	8002164 <HAL_DMA_Abort_IT+0x184>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a29      	ldr	r2, [pc, #164]	; (80021dc <HAL_DMA_Abort_IT+0x1fc>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d012      	beq.n	8002160 <HAL_DMA_Abort_IT+0x180>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a28      	ldr	r2, [pc, #160]	; (80021e0 <HAL_DMA_Abort_IT+0x200>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d00a      	beq.n	800215a <HAL_DMA_Abort_IT+0x17a>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a26      	ldr	r2, [pc, #152]	; (80021e4 <HAL_DMA_Abort_IT+0x204>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d102      	bne.n	8002154 <HAL_DMA_Abort_IT+0x174>
 800214e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002152:	e01b      	b.n	800218c <HAL_DMA_Abort_IT+0x1ac>
 8002154:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002158:	e018      	b.n	800218c <HAL_DMA_Abort_IT+0x1ac>
 800215a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800215e:	e015      	b.n	800218c <HAL_DMA_Abort_IT+0x1ac>
 8002160:	2310      	movs	r3, #16
 8002162:	e013      	b.n	800218c <HAL_DMA_Abort_IT+0x1ac>
 8002164:	2301      	movs	r3, #1
 8002166:	e011      	b.n	800218c <HAL_DMA_Abort_IT+0x1ac>
 8002168:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800216c:	e00e      	b.n	800218c <HAL_DMA_Abort_IT+0x1ac>
 800216e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002172:	e00b      	b.n	800218c <HAL_DMA_Abort_IT+0x1ac>
 8002174:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002178:	e008      	b.n	800218c <HAL_DMA_Abort_IT+0x1ac>
 800217a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800217e:	e005      	b.n	800218c <HAL_DMA_Abort_IT+0x1ac>
 8002180:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002184:	e002      	b.n	800218c <HAL_DMA_Abort_IT+0x1ac>
 8002186:	2310      	movs	r3, #16
 8002188:	e000      	b.n	800218c <HAL_DMA_Abort_IT+0x1ac>
 800218a:	2301      	movs	r3, #1
 800218c:	4a17      	ldr	r2, [pc, #92]	; (80021ec <HAL_DMA_Abort_IT+0x20c>)
 800218e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d003      	beq.n	80021b0 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	4798      	blx	r3
    } 
  }
  return status;
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40020080 	.word	0x40020080
 80021c0:	40020008 	.word	0x40020008
 80021c4:	4002001c 	.word	0x4002001c
 80021c8:	40020030 	.word	0x40020030
 80021cc:	40020044 	.word	0x40020044
 80021d0:	40020058 	.word	0x40020058
 80021d4:	4002006c 	.word	0x4002006c
 80021d8:	40020408 	.word	0x40020408
 80021dc:	4002041c 	.word	0x4002041c
 80021e0:	40020430 	.word	0x40020430
 80021e4:	40020444 	.word	0x40020444
 80021e8:	40020400 	.word	0x40020400
 80021ec:	40020000 	.word	0x40020000

080021f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b08b      	sub	sp, #44	; 0x2c
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021fa:	2300      	movs	r3, #0
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021fe:	2300      	movs	r3, #0
 8002200:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002202:	e169      	b.n	80024d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002204:	2201      	movs	r2, #1
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	69fa      	ldr	r2, [r7, #28]
 8002214:	4013      	ands	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	429a      	cmp	r2, r3
 800221e:	f040 8158 	bne.w	80024d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	4a9a      	ldr	r2, [pc, #616]	; (8002490 <HAL_GPIO_Init+0x2a0>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d05e      	beq.n	80022ea <HAL_GPIO_Init+0xfa>
 800222c:	4a98      	ldr	r2, [pc, #608]	; (8002490 <HAL_GPIO_Init+0x2a0>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d875      	bhi.n	800231e <HAL_GPIO_Init+0x12e>
 8002232:	4a98      	ldr	r2, [pc, #608]	; (8002494 <HAL_GPIO_Init+0x2a4>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d058      	beq.n	80022ea <HAL_GPIO_Init+0xfa>
 8002238:	4a96      	ldr	r2, [pc, #600]	; (8002494 <HAL_GPIO_Init+0x2a4>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d86f      	bhi.n	800231e <HAL_GPIO_Init+0x12e>
 800223e:	4a96      	ldr	r2, [pc, #600]	; (8002498 <HAL_GPIO_Init+0x2a8>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d052      	beq.n	80022ea <HAL_GPIO_Init+0xfa>
 8002244:	4a94      	ldr	r2, [pc, #592]	; (8002498 <HAL_GPIO_Init+0x2a8>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d869      	bhi.n	800231e <HAL_GPIO_Init+0x12e>
 800224a:	4a94      	ldr	r2, [pc, #592]	; (800249c <HAL_GPIO_Init+0x2ac>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d04c      	beq.n	80022ea <HAL_GPIO_Init+0xfa>
 8002250:	4a92      	ldr	r2, [pc, #584]	; (800249c <HAL_GPIO_Init+0x2ac>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d863      	bhi.n	800231e <HAL_GPIO_Init+0x12e>
 8002256:	4a92      	ldr	r2, [pc, #584]	; (80024a0 <HAL_GPIO_Init+0x2b0>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d046      	beq.n	80022ea <HAL_GPIO_Init+0xfa>
 800225c:	4a90      	ldr	r2, [pc, #576]	; (80024a0 <HAL_GPIO_Init+0x2b0>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d85d      	bhi.n	800231e <HAL_GPIO_Init+0x12e>
 8002262:	2b12      	cmp	r3, #18
 8002264:	d82a      	bhi.n	80022bc <HAL_GPIO_Init+0xcc>
 8002266:	2b12      	cmp	r3, #18
 8002268:	d859      	bhi.n	800231e <HAL_GPIO_Init+0x12e>
 800226a:	a201      	add	r2, pc, #4	; (adr r2, 8002270 <HAL_GPIO_Init+0x80>)
 800226c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002270:	080022eb 	.word	0x080022eb
 8002274:	080022c5 	.word	0x080022c5
 8002278:	080022d7 	.word	0x080022d7
 800227c:	08002319 	.word	0x08002319
 8002280:	0800231f 	.word	0x0800231f
 8002284:	0800231f 	.word	0x0800231f
 8002288:	0800231f 	.word	0x0800231f
 800228c:	0800231f 	.word	0x0800231f
 8002290:	0800231f 	.word	0x0800231f
 8002294:	0800231f 	.word	0x0800231f
 8002298:	0800231f 	.word	0x0800231f
 800229c:	0800231f 	.word	0x0800231f
 80022a0:	0800231f 	.word	0x0800231f
 80022a4:	0800231f 	.word	0x0800231f
 80022a8:	0800231f 	.word	0x0800231f
 80022ac:	0800231f 	.word	0x0800231f
 80022b0:	0800231f 	.word	0x0800231f
 80022b4:	080022cd 	.word	0x080022cd
 80022b8:	080022e1 	.word	0x080022e1
 80022bc:	4a79      	ldr	r2, [pc, #484]	; (80024a4 <HAL_GPIO_Init+0x2b4>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d013      	beq.n	80022ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022c2:	e02c      	b.n	800231e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	623b      	str	r3, [r7, #32]
          break;
 80022ca:	e029      	b.n	8002320 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	3304      	adds	r3, #4
 80022d2:	623b      	str	r3, [r7, #32]
          break;
 80022d4:	e024      	b.n	8002320 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	3308      	adds	r3, #8
 80022dc:	623b      	str	r3, [r7, #32]
          break;
 80022de:	e01f      	b.n	8002320 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	330c      	adds	r3, #12
 80022e6:	623b      	str	r3, [r7, #32]
          break;
 80022e8:	e01a      	b.n	8002320 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d102      	bne.n	80022f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022f2:	2304      	movs	r3, #4
 80022f4:	623b      	str	r3, [r7, #32]
          break;
 80022f6:	e013      	b.n	8002320 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d105      	bne.n	800230c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002300:	2308      	movs	r3, #8
 8002302:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	69fa      	ldr	r2, [r7, #28]
 8002308:	611a      	str	r2, [r3, #16]
          break;
 800230a:	e009      	b.n	8002320 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800230c:	2308      	movs	r3, #8
 800230e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	69fa      	ldr	r2, [r7, #28]
 8002314:	615a      	str	r2, [r3, #20]
          break;
 8002316:	e003      	b.n	8002320 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002318:	2300      	movs	r3, #0
 800231a:	623b      	str	r3, [r7, #32]
          break;
 800231c:	e000      	b.n	8002320 <HAL_GPIO_Init+0x130>
          break;
 800231e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	2bff      	cmp	r3, #255	; 0xff
 8002324:	d801      	bhi.n	800232a <HAL_GPIO_Init+0x13a>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	e001      	b.n	800232e <HAL_GPIO_Init+0x13e>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	3304      	adds	r3, #4
 800232e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	2bff      	cmp	r3, #255	; 0xff
 8002334:	d802      	bhi.n	800233c <HAL_GPIO_Init+0x14c>
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	e002      	b.n	8002342 <HAL_GPIO_Init+0x152>
 800233c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233e:	3b08      	subs	r3, #8
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	210f      	movs	r1, #15
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	fa01 f303 	lsl.w	r3, r1, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	401a      	ands	r2, r3
 8002354:	6a39      	ldr	r1, [r7, #32]
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	fa01 f303 	lsl.w	r3, r1, r3
 800235c:	431a      	orrs	r2, r3
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236a:	2b00      	cmp	r3, #0
 800236c:	f000 80b1 	beq.w	80024d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002370:	4b4d      	ldr	r3, [pc, #308]	; (80024a8 <HAL_GPIO_Init+0x2b8>)
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	4a4c      	ldr	r2, [pc, #304]	; (80024a8 <HAL_GPIO_Init+0x2b8>)
 8002376:	f043 0301 	orr.w	r3, r3, #1
 800237a:	6193      	str	r3, [r2, #24]
 800237c:	4b4a      	ldr	r3, [pc, #296]	; (80024a8 <HAL_GPIO_Init+0x2b8>)
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	60bb      	str	r3, [r7, #8]
 8002386:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002388:	4a48      	ldr	r2, [pc, #288]	; (80024ac <HAL_GPIO_Init+0x2bc>)
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	089b      	lsrs	r3, r3, #2
 800238e:	3302      	adds	r3, #2
 8002390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002394:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	f003 0303 	and.w	r3, r3, #3
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	220f      	movs	r2, #15
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	43db      	mvns	r3, r3
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	4013      	ands	r3, r2
 80023aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a40      	ldr	r2, [pc, #256]	; (80024b0 <HAL_GPIO_Init+0x2c0>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d013      	beq.n	80023dc <HAL_GPIO_Init+0x1ec>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a3f      	ldr	r2, [pc, #252]	; (80024b4 <HAL_GPIO_Init+0x2c4>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d00d      	beq.n	80023d8 <HAL_GPIO_Init+0x1e8>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a3e      	ldr	r2, [pc, #248]	; (80024b8 <HAL_GPIO_Init+0x2c8>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d007      	beq.n	80023d4 <HAL_GPIO_Init+0x1e4>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a3d      	ldr	r2, [pc, #244]	; (80024bc <HAL_GPIO_Init+0x2cc>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d101      	bne.n	80023d0 <HAL_GPIO_Init+0x1e0>
 80023cc:	2303      	movs	r3, #3
 80023ce:	e006      	b.n	80023de <HAL_GPIO_Init+0x1ee>
 80023d0:	2304      	movs	r3, #4
 80023d2:	e004      	b.n	80023de <HAL_GPIO_Init+0x1ee>
 80023d4:	2302      	movs	r3, #2
 80023d6:	e002      	b.n	80023de <HAL_GPIO_Init+0x1ee>
 80023d8:	2301      	movs	r3, #1
 80023da:	e000      	b.n	80023de <HAL_GPIO_Init+0x1ee>
 80023dc:	2300      	movs	r3, #0
 80023de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e0:	f002 0203 	and.w	r2, r2, #3
 80023e4:	0092      	lsls	r2, r2, #2
 80023e6:	4093      	lsls	r3, r2
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023ee:	492f      	ldr	r1, [pc, #188]	; (80024ac <HAL_GPIO_Init+0x2bc>)
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	089b      	lsrs	r3, r3, #2
 80023f4:	3302      	adds	r3, #2
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d006      	beq.n	8002416 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002408:	4b2d      	ldr	r3, [pc, #180]	; (80024c0 <HAL_GPIO_Init+0x2d0>)
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	492c      	ldr	r1, [pc, #176]	; (80024c0 <HAL_GPIO_Init+0x2d0>)
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	4313      	orrs	r3, r2
 8002412:	600b      	str	r3, [r1, #0]
 8002414:	e006      	b.n	8002424 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002416:	4b2a      	ldr	r3, [pc, #168]	; (80024c0 <HAL_GPIO_Init+0x2d0>)
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	43db      	mvns	r3, r3
 800241e:	4928      	ldr	r1, [pc, #160]	; (80024c0 <HAL_GPIO_Init+0x2d0>)
 8002420:	4013      	ands	r3, r2
 8002422:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d006      	beq.n	800243e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002430:	4b23      	ldr	r3, [pc, #140]	; (80024c0 <HAL_GPIO_Init+0x2d0>)
 8002432:	685a      	ldr	r2, [r3, #4]
 8002434:	4922      	ldr	r1, [pc, #136]	; (80024c0 <HAL_GPIO_Init+0x2d0>)
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	4313      	orrs	r3, r2
 800243a:	604b      	str	r3, [r1, #4]
 800243c:	e006      	b.n	800244c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800243e:	4b20      	ldr	r3, [pc, #128]	; (80024c0 <HAL_GPIO_Init+0x2d0>)
 8002440:	685a      	ldr	r2, [r3, #4]
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	43db      	mvns	r3, r3
 8002446:	491e      	ldr	r1, [pc, #120]	; (80024c0 <HAL_GPIO_Init+0x2d0>)
 8002448:	4013      	ands	r3, r2
 800244a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d006      	beq.n	8002466 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002458:	4b19      	ldr	r3, [pc, #100]	; (80024c0 <HAL_GPIO_Init+0x2d0>)
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	4918      	ldr	r1, [pc, #96]	; (80024c0 <HAL_GPIO_Init+0x2d0>)
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	4313      	orrs	r3, r2
 8002462:	608b      	str	r3, [r1, #8]
 8002464:	e006      	b.n	8002474 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002466:	4b16      	ldr	r3, [pc, #88]	; (80024c0 <HAL_GPIO_Init+0x2d0>)
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	43db      	mvns	r3, r3
 800246e:	4914      	ldr	r1, [pc, #80]	; (80024c0 <HAL_GPIO_Init+0x2d0>)
 8002470:	4013      	ands	r3, r2
 8002472:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d021      	beq.n	80024c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002480:	4b0f      	ldr	r3, [pc, #60]	; (80024c0 <HAL_GPIO_Init+0x2d0>)
 8002482:	68da      	ldr	r2, [r3, #12]
 8002484:	490e      	ldr	r1, [pc, #56]	; (80024c0 <HAL_GPIO_Init+0x2d0>)
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	4313      	orrs	r3, r2
 800248a:	60cb      	str	r3, [r1, #12]
 800248c:	e021      	b.n	80024d2 <HAL_GPIO_Init+0x2e2>
 800248e:	bf00      	nop
 8002490:	10320000 	.word	0x10320000
 8002494:	10310000 	.word	0x10310000
 8002498:	10220000 	.word	0x10220000
 800249c:	10210000 	.word	0x10210000
 80024a0:	10120000 	.word	0x10120000
 80024a4:	10110000 	.word	0x10110000
 80024a8:	40021000 	.word	0x40021000
 80024ac:	40010000 	.word	0x40010000
 80024b0:	40010800 	.word	0x40010800
 80024b4:	40010c00 	.word	0x40010c00
 80024b8:	40011000 	.word	0x40011000
 80024bc:	40011400 	.word	0x40011400
 80024c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80024c4:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <HAL_GPIO_Init+0x304>)
 80024c6:	68da      	ldr	r2, [r3, #12]
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	43db      	mvns	r3, r3
 80024cc:	4909      	ldr	r1, [pc, #36]	; (80024f4 <HAL_GPIO_Init+0x304>)
 80024ce:	4013      	ands	r3, r2
 80024d0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	3301      	adds	r3, #1
 80024d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	fa22 f303 	lsr.w	r3, r2, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f47f ae8e 	bne.w	8002204 <HAL_GPIO_Init+0x14>
  }
}
 80024e8:	bf00      	nop
 80024ea:	bf00      	nop
 80024ec:	372c      	adds	r7, #44	; 0x2c
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bc80      	pop	{r7}
 80024f2:	4770      	bx	lr
 80024f4:	40010400 	.word	0x40010400

080024f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e12b      	b.n	8002762 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d106      	bne.n	8002524 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7ff f9b0 	bl	8001884 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2224      	movs	r2, #36	; 0x24
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 0201 	bic.w	r2, r2, #1
 800253a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800254a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800255a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800255c:	f001 ffd8 	bl	8004510 <HAL_RCC_GetPCLK1Freq>
 8002560:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	4a81      	ldr	r2, [pc, #516]	; (800276c <HAL_I2C_Init+0x274>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d807      	bhi.n	800257c <HAL_I2C_Init+0x84>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	4a80      	ldr	r2, [pc, #512]	; (8002770 <HAL_I2C_Init+0x278>)
 8002570:	4293      	cmp	r3, r2
 8002572:	bf94      	ite	ls
 8002574:	2301      	movls	r3, #1
 8002576:	2300      	movhi	r3, #0
 8002578:	b2db      	uxtb	r3, r3
 800257a:	e006      	b.n	800258a <HAL_I2C_Init+0x92>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	4a7d      	ldr	r2, [pc, #500]	; (8002774 <HAL_I2C_Init+0x27c>)
 8002580:	4293      	cmp	r3, r2
 8002582:	bf94      	ite	ls
 8002584:	2301      	movls	r3, #1
 8002586:	2300      	movhi	r3, #0
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e0e7      	b.n	8002762 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	4a78      	ldr	r2, [pc, #480]	; (8002778 <HAL_I2C_Init+0x280>)
 8002596:	fba2 2303 	umull	r2, r3, r2, r3
 800259a:	0c9b      	lsrs	r3, r3, #18
 800259c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68ba      	ldr	r2, [r7, #8]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	4a6a      	ldr	r2, [pc, #424]	; (800276c <HAL_I2C_Init+0x274>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d802      	bhi.n	80025cc <HAL_I2C_Init+0xd4>
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	3301      	adds	r3, #1
 80025ca:	e009      	b.n	80025e0 <HAL_I2C_Init+0xe8>
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025d2:	fb02 f303 	mul.w	r3, r2, r3
 80025d6:	4a69      	ldr	r2, [pc, #420]	; (800277c <HAL_I2C_Init+0x284>)
 80025d8:	fba2 2303 	umull	r2, r3, r2, r3
 80025dc:	099b      	lsrs	r3, r3, #6
 80025de:	3301      	adds	r3, #1
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6812      	ldr	r2, [r2, #0]
 80025e4:	430b      	orrs	r3, r1
 80025e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80025f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	495c      	ldr	r1, [pc, #368]	; (800276c <HAL_I2C_Init+0x274>)
 80025fc:	428b      	cmp	r3, r1
 80025fe:	d819      	bhi.n	8002634 <HAL_I2C_Init+0x13c>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	1e59      	subs	r1, r3, #1
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	fbb1 f3f3 	udiv	r3, r1, r3
 800260e:	1c59      	adds	r1, r3, #1
 8002610:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002614:	400b      	ands	r3, r1
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00a      	beq.n	8002630 <HAL_I2C_Init+0x138>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	1e59      	subs	r1, r3, #1
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	fbb1 f3f3 	udiv	r3, r1, r3
 8002628:	3301      	adds	r3, #1
 800262a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800262e:	e051      	b.n	80026d4 <HAL_I2C_Init+0x1dc>
 8002630:	2304      	movs	r3, #4
 8002632:	e04f      	b.n	80026d4 <HAL_I2C_Init+0x1dc>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d111      	bne.n	8002660 <HAL_I2C_Init+0x168>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	1e58      	subs	r0, r3, #1
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6859      	ldr	r1, [r3, #4]
 8002644:	460b      	mov	r3, r1
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	440b      	add	r3, r1
 800264a:	fbb0 f3f3 	udiv	r3, r0, r3
 800264e:	3301      	adds	r3, #1
 8002650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002654:	2b00      	cmp	r3, #0
 8002656:	bf0c      	ite	eq
 8002658:	2301      	moveq	r3, #1
 800265a:	2300      	movne	r3, #0
 800265c:	b2db      	uxtb	r3, r3
 800265e:	e012      	b.n	8002686 <HAL_I2C_Init+0x18e>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	1e58      	subs	r0, r3, #1
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6859      	ldr	r1, [r3, #4]
 8002668:	460b      	mov	r3, r1
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	0099      	lsls	r1, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	fbb0 f3f3 	udiv	r3, r0, r3
 8002676:	3301      	adds	r3, #1
 8002678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800267c:	2b00      	cmp	r3, #0
 800267e:	bf0c      	ite	eq
 8002680:	2301      	moveq	r3, #1
 8002682:	2300      	movne	r3, #0
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_I2C_Init+0x196>
 800268a:	2301      	movs	r3, #1
 800268c:	e022      	b.n	80026d4 <HAL_I2C_Init+0x1dc>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10e      	bne.n	80026b4 <HAL_I2C_Init+0x1bc>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	1e58      	subs	r0, r3, #1
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6859      	ldr	r1, [r3, #4]
 800269e:	460b      	mov	r3, r1
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	440b      	add	r3, r1
 80026a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80026a8:	3301      	adds	r3, #1
 80026aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026b2:	e00f      	b.n	80026d4 <HAL_I2C_Init+0x1dc>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	1e58      	subs	r0, r3, #1
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6859      	ldr	r1, [r3, #4]
 80026bc:	460b      	mov	r3, r1
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	0099      	lsls	r1, r3, #2
 80026c4:	440b      	add	r3, r1
 80026c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ca:	3301      	adds	r3, #1
 80026cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026d4:	6879      	ldr	r1, [r7, #4]
 80026d6:	6809      	ldr	r1, [r1, #0]
 80026d8:	4313      	orrs	r3, r2
 80026da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69da      	ldr	r2, [r3, #28]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	431a      	orrs	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	430a      	orrs	r2, r1
 80026f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002702:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6911      	ldr	r1, [r2, #16]
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	68d2      	ldr	r2, [r2, #12]
 800270e:	4311      	orrs	r1, r2
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	6812      	ldr	r2, [r2, #0]
 8002714:	430b      	orrs	r3, r1
 8002716:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	695a      	ldr	r2, [r3, #20]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	430a      	orrs	r2, r1
 8002732:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f042 0201 	orr.w	r2, r2, #1
 8002742:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2220      	movs	r2, #32
 800274e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	000186a0 	.word	0x000186a0
 8002770:	001e847f 	.word	0x001e847f
 8002774:	003d08ff 	.word	0x003d08ff
 8002778:	431bde83 	.word	0x431bde83
 800277c:	10624dd3 	.word	0x10624dd3

08002780 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b088      	sub	sp, #32
 8002784:	af02      	add	r7, sp, #8
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	607a      	str	r2, [r7, #4]
 800278a:	461a      	mov	r2, r3
 800278c:	460b      	mov	r3, r1
 800278e:	817b      	strh	r3, [r7, #10]
 8002790:	4613      	mov	r3, r2
 8002792:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002794:	f7ff faae 	bl	8001cf4 <HAL_GetTick>
 8002798:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b20      	cmp	r3, #32
 80027a4:	f040 80e0 	bne.w	8002968 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	2319      	movs	r3, #25
 80027ae:	2201      	movs	r2, #1
 80027b0:	4970      	ldr	r1, [pc, #448]	; (8002974 <HAL_I2C_Master_Transmit+0x1f4>)
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 ffe2 	bl	800377c <I2C_WaitOnFlagUntilTimeout>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80027be:	2302      	movs	r3, #2
 80027c0:	e0d3      	b.n	800296a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d101      	bne.n	80027d0 <HAL_I2C_Master_Transmit+0x50>
 80027cc:	2302      	movs	r3, #2
 80027ce:	e0cc      	b.n	800296a <HAL_I2C_Master_Transmit+0x1ea>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d007      	beq.n	80027f6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f042 0201 	orr.w	r2, r2, #1
 80027f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002804:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2221      	movs	r2, #33	; 0x21
 800280a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2210      	movs	r2, #16
 8002812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	893a      	ldrh	r2, [r7, #8]
 8002826:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800282c:	b29a      	uxth	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	4a50      	ldr	r2, [pc, #320]	; (8002978 <HAL_I2C_Master_Transmit+0x1f8>)
 8002836:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002838:	8979      	ldrh	r1, [r7, #10]
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	6a3a      	ldr	r2, [r7, #32]
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f000 fd64 	bl	800330c <I2C_MasterRequestWrite>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e08d      	b.n	800296a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800284e:	2300      	movs	r3, #0
 8002850:	613b      	str	r3, [r7, #16]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	613b      	str	r3, [r7, #16]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	613b      	str	r3, [r7, #16]
 8002862:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002864:	e066      	b.n	8002934 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	6a39      	ldr	r1, [r7, #32]
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f001 f85c 	bl	8003928 <I2C_WaitOnTXEFlagUntilTimeout>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00d      	beq.n	8002892 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	2b04      	cmp	r3, #4
 800287c:	d107      	bne.n	800288e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800288c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e06b      	b.n	800296a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002896:	781a      	ldrb	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a2:	1c5a      	adds	r2, r3, #1
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	3b01      	subs	r3, #1
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ba:	3b01      	subs	r3, #1
 80028bc:	b29a      	uxth	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	2b04      	cmp	r3, #4
 80028ce:	d11b      	bne.n	8002908 <HAL_I2C_Master_Transmit+0x188>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d017      	beq.n	8002908 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028dc:	781a      	ldrb	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e8:	1c5a      	adds	r2, r3, #1
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	3b01      	subs	r3, #1
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002900:	3b01      	subs	r3, #1
 8002902:	b29a      	uxth	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	6a39      	ldr	r1, [r7, #32]
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f001 f84c 	bl	80039aa <I2C_WaitOnBTFFlagUntilTimeout>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00d      	beq.n	8002934 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	2b04      	cmp	r3, #4
 800291e:	d107      	bne.n	8002930 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800292e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e01a      	b.n	800296a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002938:	2b00      	cmp	r3, #0
 800293a:	d194      	bne.n	8002866 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800294a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2220      	movs	r2, #32
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002964:	2300      	movs	r3, #0
 8002966:	e000      	b.n	800296a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002968:	2302      	movs	r3, #2
  }
}
 800296a:	4618      	mov	r0, r3
 800296c:	3718      	adds	r7, #24
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	00100002 	.word	0x00100002
 8002978:	ffff0000 	.word	0xffff0000

0800297c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b08c      	sub	sp, #48	; 0x30
 8002980:	af02      	add	r7, sp, #8
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	607a      	str	r2, [r7, #4]
 8002986:	461a      	mov	r2, r3
 8002988:	460b      	mov	r3, r1
 800298a:	817b      	strh	r3, [r7, #10]
 800298c:	4613      	mov	r3, r2
 800298e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002990:	2300      	movs	r3, #0
 8002992:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002994:	f7ff f9ae 	bl	8001cf4 <HAL_GetTick>
 8002998:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b20      	cmp	r3, #32
 80029a4:	f040 823f 	bne.w	8002e26 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	2319      	movs	r3, #25
 80029ae:	2201      	movs	r2, #1
 80029b0:	497f      	ldr	r1, [pc, #508]	; (8002bb0 <HAL_I2C_Master_Receive+0x234>)
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f000 fee2 	bl	800377c <I2C_WaitOnFlagUntilTimeout>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80029be:	2302      	movs	r3, #2
 80029c0:	e232      	b.n	8002e28 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d101      	bne.n	80029d0 <HAL_I2C_Master_Receive+0x54>
 80029cc:	2302      	movs	r3, #2
 80029ce:	e22b      	b.n	8002e28 <HAL_I2C_Master_Receive+0x4ac>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d007      	beq.n	80029f6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f042 0201 	orr.w	r2, r2, #1
 80029f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a04:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2222      	movs	r2, #34	; 0x22
 8002a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2210      	movs	r2, #16
 8002a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	893a      	ldrh	r2, [r7, #8]
 8002a26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	4a5f      	ldr	r2, [pc, #380]	; (8002bb4 <HAL_I2C_Master_Receive+0x238>)
 8002a36:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a38:	8979      	ldrh	r1, [r7, #10]
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f000 fce6 	bl	8003410 <I2C_MasterRequestRead>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e1ec      	b.n	8002e28 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d113      	bne.n	8002a7e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a56:	2300      	movs	r3, #0
 8002a58:	61fb      	str	r3, [r7, #28]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	61fb      	str	r3, [r7, #28]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	61fb      	str	r3, [r7, #28]
 8002a6a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	e1c0      	b.n	8002e00 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d11e      	bne.n	8002ac4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a94:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a96:	b672      	cpsid	i
}
 8002a98:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61bb      	str	r3, [r7, #24]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	61bb      	str	r3, [r7, #24]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	61bb      	str	r3, [r7, #24]
 8002aae:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002abe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002ac0:	b662      	cpsie	i
}
 8002ac2:	e035      	b.n	8002b30 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d11e      	bne.n	8002b0a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ada:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002adc:	b672      	cpsid	i
}
 8002ade:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	617b      	str	r3, [r7, #20]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	617b      	str	r3, [r7, #20]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b04:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002b06:	b662      	cpsie	i
}
 8002b08:	e012      	b.n	8002b30 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	613b      	str	r3, [r7, #16]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	613b      	str	r3, [r7, #16]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	613b      	str	r3, [r7, #16]
 8002b2e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002b30:	e166      	b.n	8002e00 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b36:	2b03      	cmp	r3, #3
 8002b38:	f200 811f 	bhi.w	8002d7a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d123      	bne.n	8002b8c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f000 ff6f 	bl	8003a2c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e167      	b.n	8002e28 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	691a      	ldr	r2, [r3, #16]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6a:	1c5a      	adds	r2, r3, #1
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b74:	3b01      	subs	r3, #1
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	3b01      	subs	r3, #1
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b8a:	e139      	b.n	8002e00 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d152      	bne.n	8002c3a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	4906      	ldr	r1, [pc, #24]	; (8002bb8 <HAL_I2C_Master_Receive+0x23c>)
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	f000 fdec 	bl	800377c <I2C_WaitOnFlagUntilTimeout>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d008      	beq.n	8002bbc <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e13c      	b.n	8002e28 <HAL_I2C_Master_Receive+0x4ac>
 8002bae:	bf00      	nop
 8002bb0:	00100002 	.word	0x00100002
 8002bb4:	ffff0000 	.word	0xffff0000
 8002bb8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002bbc:	b672      	cpsid	i
}
 8002bbe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	691a      	ldr	r2, [r3, #16]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be2:	1c5a      	adds	r2, r3, #1
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bec:	3b01      	subs	r3, #1
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002c02:	b662      	cpsie	i
}
 8002c04:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	691a      	ldr	r2, [r3, #16]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	b2d2      	uxtb	r2, r2
 8002c12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c18:	1c5a      	adds	r2, r3, #1
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c22:	3b01      	subs	r3, #1
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	3b01      	subs	r3, #1
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c38:	e0e2      	b.n	8002e00 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c40:	2200      	movs	r2, #0
 8002c42:	497b      	ldr	r1, [pc, #492]	; (8002e30 <HAL_I2C_Master_Receive+0x4b4>)
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	f000 fd99 	bl	800377c <I2C_WaitOnFlagUntilTimeout>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e0e9      	b.n	8002e28 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c62:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c64:	b672      	cpsid	i
}
 8002c66:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	691a      	ldr	r2, [r3, #16]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c72:	b2d2      	uxtb	r2, r2
 8002c74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7a:	1c5a      	adds	r2, r3, #1
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c84:	3b01      	subs	r3, #1
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	3b01      	subs	r3, #1
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002c9a:	4b66      	ldr	r3, [pc, #408]	; (8002e34 <HAL_I2C_Master_Receive+0x4b8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	08db      	lsrs	r3, r3, #3
 8002ca0:	4a65      	ldr	r2, [pc, #404]	; (8002e38 <HAL_I2C_Master_Receive+0x4bc>)
 8002ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca6:	0a1a      	lsrs	r2, r3, #8
 8002ca8:	4613      	mov	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	00da      	lsls	r2, r3, #3
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002cb4:	6a3b      	ldr	r3, [r7, #32]
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002cba:	6a3b      	ldr	r3, [r7, #32]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d118      	bne.n	8002cf2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2220      	movs	r2, #32
 8002cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	f043 0220 	orr.w	r2, r3, #32
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002ce2:	b662      	cpsie	i
}
 8002ce4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e09a      	b.n	8002e28 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d1d9      	bne.n	8002cb4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	691a      	ldr	r2, [r3, #16]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1a:	b2d2      	uxtb	r2, r2
 8002d1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d22:	1c5a      	adds	r2, r3, #1
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002d42:	b662      	cpsie	i
}
 8002d44:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	691a      	ldr	r2, [r3, #16]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	b2d2      	uxtb	r2, r2
 8002d52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d58:	1c5a      	adds	r2, r3, #1
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d62:	3b01      	subs	r3, #1
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	3b01      	subs	r3, #1
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d78:	e042      	b.n	8002e00 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 fe54 	bl	8003a2c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e04c      	b.n	8002e28 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	691a      	ldr	r2, [r3, #16]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	b2d2      	uxtb	r2, r2
 8002d9a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	1c5a      	adds	r2, r3, #1
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002daa:	3b01      	subs	r3, #1
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	3b01      	subs	r3, #1
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	f003 0304 	and.w	r3, r3, #4
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	d118      	bne.n	8002e00 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	691a      	ldr	r2, [r3, #16]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de0:	1c5a      	adds	r2, r3, #1
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dea:	3b01      	subs	r3, #1
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f47f ae94 	bne.w	8002b32 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e22:	2300      	movs	r3, #0
 8002e24:	e000      	b.n	8002e28 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8002e26:	2302      	movs	r3, #2
  }
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3728      	adds	r7, #40	; 0x28
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	00010004 	.word	0x00010004
 8002e34:	20000000 	.word	0x20000000
 8002e38:	14f8b589 	.word	0x14f8b589

08002e3c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b08c      	sub	sp, #48	; 0x30
 8002e40:	af02      	add	r7, sp, #8
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	4608      	mov	r0, r1
 8002e46:	4611      	mov	r1, r2
 8002e48:	461a      	mov	r2, r3
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	817b      	strh	r3, [r7, #10]
 8002e4e:	460b      	mov	r3, r1
 8002e50:	813b      	strh	r3, [r7, #8]
 8002e52:	4613      	mov	r3, r2
 8002e54:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002e56:	2300      	movs	r3, #0
 8002e58:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e5a:	f7fe ff4b 	bl	8001cf4 <HAL_GetTick>
 8002e5e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2b20      	cmp	r3, #32
 8002e6a:	f040 8244 	bne.w	80032f6 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	2319      	movs	r3, #25
 8002e74:	2201      	movs	r2, #1
 8002e76:	4982      	ldr	r1, [pc, #520]	; (8003080 <HAL_I2C_Mem_Read+0x244>)
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f000 fc7f 	bl	800377c <I2C_WaitOnFlagUntilTimeout>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002e84:	2302      	movs	r3, #2
 8002e86:	e237      	b.n	80032f8 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d101      	bne.n	8002e96 <HAL_I2C_Mem_Read+0x5a>
 8002e92:	2302      	movs	r3, #2
 8002e94:	e230      	b.n	80032f8 <HAL_I2C_Mem_Read+0x4bc>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d007      	beq.n	8002ebc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 0201 	orr.w	r2, r2, #1
 8002eba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2222      	movs	r2, #34	; 0x22
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2240      	movs	r2, #64	; 0x40
 8002ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ee6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002eec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	4a62      	ldr	r2, [pc, #392]	; (8003084 <HAL_I2C_Mem_Read+0x248>)
 8002efc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002efe:	88f8      	ldrh	r0, [r7, #6]
 8002f00:	893a      	ldrh	r2, [r7, #8]
 8002f02:	8979      	ldrh	r1, [r7, #10]
 8002f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f06:	9301      	str	r3, [sp, #4]
 8002f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f000 fb4c 	bl	80035ac <I2C_RequestMemoryRead>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e1ec      	b.n	80032f8 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d113      	bne.n	8002f4e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f26:	2300      	movs	r3, #0
 8002f28:	61fb      	str	r3, [r7, #28]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	61fb      	str	r3, [r7, #28]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	61fb      	str	r3, [r7, #28]
 8002f3a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	e1c0      	b.n	80032d0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d11e      	bne.n	8002f94 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f64:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f66:	b672      	cpsid	i
}
 8002f68:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	61bb      	str	r3, [r7, #24]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	61bb      	str	r3, [r7, #24]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	61bb      	str	r3, [r7, #24]
 8002f7e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f8e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002f90:	b662      	cpsie	i
}
 8002f92:	e035      	b.n	8003000 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d11e      	bne.n	8002fda <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002faa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002fac:	b672      	cpsid	i
}
 8002fae:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	617b      	str	r3, [r7, #20]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	617b      	str	r3, [r7, #20]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	617b      	str	r3, [r7, #20]
 8002fc4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fd4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002fd6:	b662      	cpsie	i
}
 8002fd8:	e012      	b.n	8003000 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fe8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fea:	2300      	movs	r3, #0
 8002fec:	613b      	str	r3, [r7, #16]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	613b      	str	r3, [r7, #16]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	613b      	str	r3, [r7, #16]
 8002ffe:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003000:	e166      	b.n	80032d0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003006:	2b03      	cmp	r3, #3
 8003008:	f200 811f 	bhi.w	800324a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003010:	2b01      	cmp	r3, #1
 8003012:	d123      	bne.n	800305c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003016:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f000 fd07 	bl	8003a2c <I2C_WaitOnRXNEFlagUntilTimeout>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e167      	b.n	80032f8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	691a      	ldr	r2, [r3, #16]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003032:	b2d2      	uxtb	r2, r2
 8003034:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303a:	1c5a      	adds	r2, r3, #1
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003044:	3b01      	subs	r3, #1
 8003046:	b29a      	uxth	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003050:	b29b      	uxth	r3, r3
 8003052:	3b01      	subs	r3, #1
 8003054:	b29a      	uxth	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	855a      	strh	r2, [r3, #42]	; 0x2a
 800305a:	e139      	b.n	80032d0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003060:	2b02      	cmp	r3, #2
 8003062:	d152      	bne.n	800310a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003066:	9300      	str	r3, [sp, #0]
 8003068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800306a:	2200      	movs	r2, #0
 800306c:	4906      	ldr	r1, [pc, #24]	; (8003088 <HAL_I2C_Mem_Read+0x24c>)
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f000 fb84 	bl	800377c <I2C_WaitOnFlagUntilTimeout>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d008      	beq.n	800308c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e13c      	b.n	80032f8 <HAL_I2C_Mem_Read+0x4bc>
 800307e:	bf00      	nop
 8003080:	00100002 	.word	0x00100002
 8003084:	ffff0000 	.word	0xffff0000
 8003088:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800308c:	b672      	cpsid	i
}
 800308e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800309e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	691a      	ldr	r2, [r3, #16]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030aa:	b2d2      	uxtb	r2, r2
 80030ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	1c5a      	adds	r2, r3, #1
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030bc:	3b01      	subs	r3, #1
 80030be:	b29a      	uxth	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	3b01      	subs	r3, #1
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80030d2:	b662      	cpsie	i
}
 80030d4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	691a      	ldr	r2, [r3, #16]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e0:	b2d2      	uxtb	r2, r2
 80030e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	1c5a      	adds	r2, r3, #1
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f2:	3b01      	subs	r3, #1
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030fe:	b29b      	uxth	r3, r3
 8003100:	3b01      	subs	r3, #1
 8003102:	b29a      	uxth	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003108:	e0e2      	b.n	80032d0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310c:	9300      	str	r3, [sp, #0]
 800310e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003110:	2200      	movs	r2, #0
 8003112:	497b      	ldr	r1, [pc, #492]	; (8003300 <HAL_I2C_Mem_Read+0x4c4>)
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f000 fb31 	bl	800377c <I2C_WaitOnFlagUntilTimeout>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e0e9      	b.n	80032f8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003132:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003134:	b672      	cpsid	i
}
 8003136:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	691a      	ldr	r2, [r3, #16]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003142:	b2d2      	uxtb	r2, r2
 8003144:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	1c5a      	adds	r2, r3, #1
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003154:	3b01      	subs	r3, #1
 8003156:	b29a      	uxth	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003160:	b29b      	uxth	r3, r3
 8003162:	3b01      	subs	r3, #1
 8003164:	b29a      	uxth	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800316a:	4b66      	ldr	r3, [pc, #408]	; (8003304 <HAL_I2C_Mem_Read+0x4c8>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	08db      	lsrs	r3, r3, #3
 8003170:	4a65      	ldr	r2, [pc, #404]	; (8003308 <HAL_I2C_Mem_Read+0x4cc>)
 8003172:	fba2 2303 	umull	r2, r3, r2, r3
 8003176:	0a1a      	lsrs	r2, r3, #8
 8003178:	4613      	mov	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4413      	add	r3, r2
 800317e:	00da      	lsls	r2, r3, #3
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003184:	6a3b      	ldr	r3, [r7, #32]
 8003186:	3b01      	subs	r3, #1
 8003188:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800318a:	6a3b      	ldr	r3, [r7, #32]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d118      	bne.n	80031c2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2220      	movs	r2, #32
 800319a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	f043 0220 	orr.w	r2, r3, #32
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80031b2:	b662      	cpsie	i
}
 80031b4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e09a      	b.n	80032f8 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2b04      	cmp	r3, #4
 80031ce:	d1d9      	bne.n	8003184 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	691a      	ldr	r2, [r3, #16]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ea:	b2d2      	uxtb	r2, r2
 80031ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f2:	1c5a      	adds	r2, r3, #1
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031fc:	3b01      	subs	r3, #1
 80031fe:	b29a      	uxth	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003208:	b29b      	uxth	r3, r3
 800320a:	3b01      	subs	r3, #1
 800320c:	b29a      	uxth	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003212:	b662      	cpsie	i
}
 8003214:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	691a      	ldr	r2, [r3, #16]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003220:	b2d2      	uxtb	r2, r2
 8003222:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	1c5a      	adds	r2, r3, #1
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003232:	3b01      	subs	r3, #1
 8003234:	b29a      	uxth	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800323e:	b29b      	uxth	r3, r3
 8003240:	3b01      	subs	r3, #1
 8003242:	b29a      	uxth	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003248:	e042      	b.n	80032d0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800324a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800324c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f000 fbec 	bl	8003a2c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e04c      	b.n	80032f8 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	691a      	ldr	r2, [r3, #16]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003268:	b2d2      	uxtb	r2, r2
 800326a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003270:	1c5a      	adds	r2, r3, #1
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800327a:	3b01      	subs	r3, #1
 800327c:	b29a      	uxth	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003286:	b29b      	uxth	r3, r3
 8003288:	3b01      	subs	r3, #1
 800328a:	b29a      	uxth	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	f003 0304 	and.w	r3, r3, #4
 800329a:	2b04      	cmp	r3, #4
 800329c:	d118      	bne.n	80032d0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	691a      	ldr	r2, [r3, #16]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	b2d2      	uxtb	r2, r2
 80032aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	1c5a      	adds	r2, r3, #1
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ba:	3b01      	subs	r3, #1
 80032bc:	b29a      	uxth	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	3b01      	subs	r3, #1
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f47f ae94 	bne.w	8003002 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2220      	movs	r2, #32
 80032de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032f2:	2300      	movs	r3, #0
 80032f4:	e000      	b.n	80032f8 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80032f6:	2302      	movs	r3, #2
  }
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3728      	adds	r7, #40	; 0x28
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	00010004 	.word	0x00010004
 8003304:	20000000 	.word	0x20000000
 8003308:	14f8b589 	.word	0x14f8b589

0800330c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b088      	sub	sp, #32
 8003310:	af02      	add	r7, sp, #8
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	607a      	str	r2, [r7, #4]
 8003316:	603b      	str	r3, [r7, #0]
 8003318:	460b      	mov	r3, r1
 800331a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003320:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	2b08      	cmp	r3, #8
 8003326:	d006      	beq.n	8003336 <I2C_MasterRequestWrite+0x2a>
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d003      	beq.n	8003336 <I2C_MasterRequestWrite+0x2a>
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003334:	d108      	bne.n	8003348 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	e00b      	b.n	8003360 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334c:	2b12      	cmp	r3, #18
 800334e:	d107      	bne.n	8003360 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800335e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	9300      	str	r3, [sp, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	f000 fa05 	bl	800377c <I2C_WaitOnFlagUntilTimeout>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00d      	beq.n	8003394 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003382:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003386:	d103      	bne.n	8003390 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800338e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e035      	b.n	8003400 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800339c:	d108      	bne.n	80033b0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800339e:	897b      	ldrh	r3, [r7, #10]
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	461a      	mov	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033ac:	611a      	str	r2, [r3, #16]
 80033ae:	e01b      	b.n	80033e8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80033b0:	897b      	ldrh	r3, [r7, #10]
 80033b2:	11db      	asrs	r3, r3, #7
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	f003 0306 	and.w	r3, r3, #6
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	f063 030f 	orn	r3, r3, #15
 80033c0:	b2da      	uxtb	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	490e      	ldr	r1, [pc, #56]	; (8003408 <I2C_MasterRequestWrite+0xfc>)
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	f000 fa2b 	bl	800382a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e010      	b.n	8003400 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80033de:	897b      	ldrh	r3, [r7, #10]
 80033e0:	b2da      	uxtb	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	4907      	ldr	r1, [pc, #28]	; (800340c <I2C_MasterRequestWrite+0x100>)
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	f000 fa1b 	bl	800382a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e000      	b.n	8003400 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3718      	adds	r7, #24
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	00010008 	.word	0x00010008
 800340c:	00010002 	.word	0x00010002

08003410 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b088      	sub	sp, #32
 8003414:	af02      	add	r7, sp, #8
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	607a      	str	r2, [r7, #4]
 800341a:	603b      	str	r3, [r7, #0]
 800341c:	460b      	mov	r3, r1
 800341e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003424:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003434:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	2b08      	cmp	r3, #8
 800343a:	d006      	beq.n	800344a <I2C_MasterRequestRead+0x3a>
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d003      	beq.n	800344a <I2C_MasterRequestRead+0x3a>
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003448:	d108      	bne.n	800345c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	e00b      	b.n	8003474 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003460:	2b11      	cmp	r3, #17
 8003462:	d107      	bne.n	8003474 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003472:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	9300      	str	r3, [sp, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f000 f97b 	bl	800377c <I2C_WaitOnFlagUntilTimeout>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00d      	beq.n	80034a8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800349a:	d103      	bne.n	80034a4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e079      	b.n	800359c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034b0:	d108      	bne.n	80034c4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80034b2:	897b      	ldrh	r3, [r7, #10]
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	f043 0301 	orr.w	r3, r3, #1
 80034ba:	b2da      	uxtb	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	611a      	str	r2, [r3, #16]
 80034c2:	e05f      	b.n	8003584 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80034c4:	897b      	ldrh	r3, [r7, #10]
 80034c6:	11db      	asrs	r3, r3, #7
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	f003 0306 	and.w	r3, r3, #6
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	f063 030f 	orn	r3, r3, #15
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	4930      	ldr	r1, [pc, #192]	; (80035a4 <I2C_MasterRequestRead+0x194>)
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f000 f9a1 	bl	800382a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e054      	b.n	800359c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80034f2:	897b      	ldrh	r3, [r7, #10]
 80034f4:	b2da      	uxtb	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	4929      	ldr	r1, [pc, #164]	; (80035a8 <I2C_MasterRequestRead+0x198>)
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 f991 	bl	800382a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e044      	b.n	800359c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003512:	2300      	movs	r3, #0
 8003514:	613b      	str	r3, [r7, #16]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	613b      	str	r3, [r7, #16]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	613b      	str	r3, [r7, #16]
 8003526:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003536:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	9300      	str	r3, [sp, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f000 f919 	bl	800377c <I2C_WaitOnFlagUntilTimeout>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00d      	beq.n	800356c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800355e:	d103      	bne.n	8003568 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003566:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e017      	b.n	800359c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800356c:	897b      	ldrh	r3, [r7, #10]
 800356e:	11db      	asrs	r3, r3, #7
 8003570:	b2db      	uxtb	r3, r3
 8003572:	f003 0306 	and.w	r3, r3, #6
 8003576:	b2db      	uxtb	r3, r3
 8003578:	f063 030e 	orn	r3, r3, #14
 800357c:	b2da      	uxtb	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	4907      	ldr	r1, [pc, #28]	; (80035a8 <I2C_MasterRequestRead+0x198>)
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f000 f94d 	bl	800382a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e000      	b.n	800359c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	3718      	adds	r7, #24
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	00010008 	.word	0x00010008
 80035a8:	00010002 	.word	0x00010002

080035ac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b088      	sub	sp, #32
 80035b0:	af02      	add	r7, sp, #8
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	4608      	mov	r0, r1
 80035b6:	4611      	mov	r1, r2
 80035b8:	461a      	mov	r2, r3
 80035ba:	4603      	mov	r3, r0
 80035bc:	817b      	strh	r3, [r7, #10]
 80035be:	460b      	mov	r3, r1
 80035c0:	813b      	strh	r3, [r7, #8]
 80035c2:	4613      	mov	r3, r2
 80035c4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035d4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e8:	9300      	str	r3, [sp, #0]
 80035ea:	6a3b      	ldr	r3, [r7, #32]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f000 f8c2 	bl	800377c <I2C_WaitOnFlagUntilTimeout>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00d      	beq.n	800361a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003608:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800360c:	d103      	bne.n	8003616 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003614:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e0aa      	b.n	8003770 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800361a:	897b      	ldrh	r3, [r7, #10]
 800361c:	b2db      	uxtb	r3, r3
 800361e:	461a      	mov	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003628:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362c:	6a3a      	ldr	r2, [r7, #32]
 800362e:	4952      	ldr	r1, [pc, #328]	; (8003778 <I2C_RequestMemoryRead+0x1cc>)
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f000 f8fa 	bl	800382a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e097      	b.n	8003770 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003640:	2300      	movs	r3, #0
 8003642:	617b      	str	r3, [r7, #20]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	617b      	str	r3, [r7, #20]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	617b      	str	r3, [r7, #20]
 8003654:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003658:	6a39      	ldr	r1, [r7, #32]
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f000 f964 	bl	8003928 <I2C_WaitOnTXEFlagUntilTimeout>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00d      	beq.n	8003682 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	2b04      	cmp	r3, #4
 800366c:	d107      	bne.n	800367e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800367c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e076      	b.n	8003770 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003682:	88fb      	ldrh	r3, [r7, #6]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d105      	bne.n	8003694 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003688:	893b      	ldrh	r3, [r7, #8]
 800368a:	b2da      	uxtb	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	611a      	str	r2, [r3, #16]
 8003692:	e021      	b.n	80036d8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003694:	893b      	ldrh	r3, [r7, #8]
 8003696:	0a1b      	lsrs	r3, r3, #8
 8003698:	b29b      	uxth	r3, r3
 800369a:	b2da      	uxtb	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036a4:	6a39      	ldr	r1, [r7, #32]
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f000 f93e 	bl	8003928 <I2C_WaitOnTXEFlagUntilTimeout>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00d      	beq.n	80036ce <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	d107      	bne.n	80036ca <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e050      	b.n	8003770 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036ce:	893b      	ldrh	r3, [r7, #8]
 80036d0:	b2da      	uxtb	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036da:	6a39      	ldr	r1, [r7, #32]
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f000 f923 	bl	8003928 <I2C_WaitOnTXEFlagUntilTimeout>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00d      	beq.n	8003704 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ec:	2b04      	cmp	r3, #4
 80036ee:	d107      	bne.n	8003700 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036fe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e035      	b.n	8003770 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003712:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	6a3b      	ldr	r3, [r7, #32]
 800371a:	2200      	movs	r2, #0
 800371c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f000 f82b 	bl	800377c <I2C_WaitOnFlagUntilTimeout>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00d      	beq.n	8003748 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003736:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800373a:	d103      	bne.n	8003744 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003742:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e013      	b.n	8003770 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003748:	897b      	ldrh	r3, [r7, #10]
 800374a:	b2db      	uxtb	r3, r3
 800374c:	f043 0301 	orr.w	r3, r3, #1
 8003750:	b2da      	uxtb	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375a:	6a3a      	ldr	r2, [r7, #32]
 800375c:	4906      	ldr	r1, [pc, #24]	; (8003778 <I2C_RequestMemoryRead+0x1cc>)
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f000 f863 	bl	800382a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e000      	b.n	8003770 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3718      	adds	r7, #24
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	00010002 	.word	0x00010002

0800377c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	603b      	str	r3, [r7, #0]
 8003788:	4613      	mov	r3, r2
 800378a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800378c:	e025      	b.n	80037da <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003794:	d021      	beq.n	80037da <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003796:	f7fe faad 	bl	8001cf4 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d302      	bcc.n	80037ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d116      	bne.n	80037da <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2220      	movs	r2, #32
 80037b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	f043 0220 	orr.w	r2, r3, #32
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e023      	b.n	8003822 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	0c1b      	lsrs	r3, r3, #16
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d10d      	bne.n	8003800 <I2C_WaitOnFlagUntilTimeout+0x84>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	43da      	mvns	r2, r3
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	4013      	ands	r3, r2
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	bf0c      	ite	eq
 80037f6:	2301      	moveq	r3, #1
 80037f8:	2300      	movne	r3, #0
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	461a      	mov	r2, r3
 80037fe:	e00c      	b.n	800381a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	43da      	mvns	r2, r3
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	4013      	ands	r3, r2
 800380c:	b29b      	uxth	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	bf0c      	ite	eq
 8003812:	2301      	moveq	r3, #1
 8003814:	2300      	movne	r3, #0
 8003816:	b2db      	uxtb	r3, r3
 8003818:	461a      	mov	r2, r3
 800381a:	79fb      	ldrb	r3, [r7, #7]
 800381c:	429a      	cmp	r2, r3
 800381e:	d0b6      	beq.n	800378e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800382a:	b580      	push	{r7, lr}
 800382c:	b084      	sub	sp, #16
 800382e:	af00      	add	r7, sp, #0
 8003830:	60f8      	str	r0, [r7, #12]
 8003832:	60b9      	str	r1, [r7, #8]
 8003834:	607a      	str	r2, [r7, #4]
 8003836:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003838:	e051      	b.n	80038de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003844:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003848:	d123      	bne.n	8003892 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003858:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003862:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2220      	movs	r2, #32
 800386e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387e:	f043 0204 	orr.w	r2, r3, #4
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e046      	b.n	8003920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003898:	d021      	beq.n	80038de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800389a:	f7fe fa2b 	bl	8001cf4 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d302      	bcc.n	80038b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d116      	bne.n	80038de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2220      	movs	r2, #32
 80038ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	f043 0220 	orr.w	r2, r3, #32
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e020      	b.n	8003920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	0c1b      	lsrs	r3, r3, #16
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d10c      	bne.n	8003902 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	43da      	mvns	r2, r3
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	4013      	ands	r3, r2
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	bf14      	ite	ne
 80038fa:	2301      	movne	r3, #1
 80038fc:	2300      	moveq	r3, #0
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	e00b      	b.n	800391a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	43da      	mvns	r2, r3
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	4013      	ands	r3, r2
 800390e:	b29b      	uxth	r3, r3
 8003910:	2b00      	cmp	r3, #0
 8003912:	bf14      	ite	ne
 8003914:	2301      	movne	r3, #1
 8003916:	2300      	moveq	r3, #0
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d18d      	bne.n	800383a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003934:	e02d      	b.n	8003992 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 f8ce 	bl	8003ad8 <I2C_IsAcknowledgeFailed>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e02d      	b.n	80039a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394c:	d021      	beq.n	8003992 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800394e:	f7fe f9d1 	bl	8001cf4 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	429a      	cmp	r2, r3
 800395c:	d302      	bcc.n	8003964 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d116      	bne.n	8003992 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2220      	movs	r2, #32
 800396e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397e:	f043 0220 	orr.w	r2, r3, #32
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e007      	b.n	80039a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399c:	2b80      	cmp	r3, #128	; 0x80
 800399e:	d1ca      	bne.n	8003936 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b084      	sub	sp, #16
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	60f8      	str	r0, [r7, #12]
 80039b2:	60b9      	str	r1, [r7, #8]
 80039b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039b6:	e02d      	b.n	8003a14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	f000 f88d 	bl	8003ad8 <I2C_IsAcknowledgeFailed>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e02d      	b.n	8003a24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ce:	d021      	beq.n	8003a14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039d0:	f7fe f990 	bl	8001cf4 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	68ba      	ldr	r2, [r7, #8]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d302      	bcc.n	80039e6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d116      	bne.n	8003a14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2220      	movs	r2, #32
 80039f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a00:	f043 0220 	orr.w	r2, r3, #32
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e007      	b.n	8003a24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	f003 0304 	and.w	r3, r3, #4
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	d1ca      	bne.n	80039b8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a38:	e042      	b.n	8003ac0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	695b      	ldr	r3, [r3, #20]
 8003a40:	f003 0310 	and.w	r3, r3, #16
 8003a44:	2b10      	cmp	r3, #16
 8003a46:	d119      	bne.n	8003a7c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f06f 0210 	mvn.w	r2, #16
 8003a50:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e029      	b.n	8003ad0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a7c:	f7fe f93a 	bl	8001cf4 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	68ba      	ldr	r2, [r7, #8]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d302      	bcc.n	8003a92 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d116      	bne.n	8003ac0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aac:	f043 0220 	orr.w	r2, r3, #32
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e007      	b.n	8003ad0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aca:	2b40      	cmp	r3, #64	; 0x40
 8003acc:	d1b5      	bne.n	8003a3a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aee:	d11b      	bne.n	8003b28 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003af8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2220      	movs	r2, #32
 8003b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b14:	f043 0204 	orr.w	r2, r3, #4
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e000      	b.n	8003b2a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bc80      	pop	{r7}
 8003b32:	4770      	bx	lr

08003b34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e304      	b.n	8004150 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f000 8087 	beq.w	8003c62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b54:	4b92      	ldr	r3, [pc, #584]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f003 030c 	and.w	r3, r3, #12
 8003b5c:	2b04      	cmp	r3, #4
 8003b5e:	d00c      	beq.n	8003b7a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b60:	4b8f      	ldr	r3, [pc, #572]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f003 030c 	and.w	r3, r3, #12
 8003b68:	2b08      	cmp	r3, #8
 8003b6a:	d112      	bne.n	8003b92 <HAL_RCC_OscConfig+0x5e>
 8003b6c:	4b8c      	ldr	r3, [pc, #560]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b78:	d10b      	bne.n	8003b92 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b7a:	4b89      	ldr	r3, [pc, #548]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d06c      	beq.n	8003c60 <HAL_RCC_OscConfig+0x12c>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d168      	bne.n	8003c60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e2de      	b.n	8004150 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b9a:	d106      	bne.n	8003baa <HAL_RCC_OscConfig+0x76>
 8003b9c:	4b80      	ldr	r3, [pc, #512]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a7f      	ldr	r2, [pc, #508]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003ba2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ba6:	6013      	str	r3, [r2, #0]
 8003ba8:	e02e      	b.n	8003c08 <HAL_RCC_OscConfig+0xd4>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10c      	bne.n	8003bcc <HAL_RCC_OscConfig+0x98>
 8003bb2:	4b7b      	ldr	r3, [pc, #492]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a7a      	ldr	r2, [pc, #488]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003bb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bbc:	6013      	str	r3, [r2, #0]
 8003bbe:	4b78      	ldr	r3, [pc, #480]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a77      	ldr	r2, [pc, #476]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003bc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bc8:	6013      	str	r3, [r2, #0]
 8003bca:	e01d      	b.n	8003c08 <HAL_RCC_OscConfig+0xd4>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bd4:	d10c      	bne.n	8003bf0 <HAL_RCC_OscConfig+0xbc>
 8003bd6:	4b72      	ldr	r3, [pc, #456]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a71      	ldr	r2, [pc, #452]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003bdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003be0:	6013      	str	r3, [r2, #0]
 8003be2:	4b6f      	ldr	r3, [pc, #444]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a6e      	ldr	r2, [pc, #440]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bec:	6013      	str	r3, [r2, #0]
 8003bee:	e00b      	b.n	8003c08 <HAL_RCC_OscConfig+0xd4>
 8003bf0:	4b6b      	ldr	r3, [pc, #428]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a6a      	ldr	r2, [pc, #424]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003bf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bfa:	6013      	str	r3, [r2, #0]
 8003bfc:	4b68      	ldr	r3, [pc, #416]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a67      	ldr	r2, [pc, #412]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003c02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c06:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d013      	beq.n	8003c38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c10:	f7fe f870 	bl	8001cf4 <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c18:	f7fe f86c 	bl	8001cf4 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b64      	cmp	r3, #100	; 0x64
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e292      	b.n	8004150 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c2a:	4b5d      	ldr	r3, [pc, #372]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0f0      	beq.n	8003c18 <HAL_RCC_OscConfig+0xe4>
 8003c36:	e014      	b.n	8003c62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c38:	f7fe f85c 	bl	8001cf4 <HAL_GetTick>
 8003c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c3e:	e008      	b.n	8003c52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c40:	f7fe f858 	bl	8001cf4 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b64      	cmp	r3, #100	; 0x64
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e27e      	b.n	8004150 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c52:	4b53      	ldr	r3, [pc, #332]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1f0      	bne.n	8003c40 <HAL_RCC_OscConfig+0x10c>
 8003c5e:	e000      	b.n	8003c62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d063      	beq.n	8003d36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c6e:	4b4c      	ldr	r3, [pc, #304]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f003 030c 	and.w	r3, r3, #12
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00b      	beq.n	8003c92 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003c7a:	4b49      	ldr	r3, [pc, #292]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f003 030c 	and.w	r3, r3, #12
 8003c82:	2b08      	cmp	r3, #8
 8003c84:	d11c      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x18c>
 8003c86:	4b46      	ldr	r3, [pc, #280]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d116      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c92:	4b43      	ldr	r3, [pc, #268]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d005      	beq.n	8003caa <HAL_RCC_OscConfig+0x176>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d001      	beq.n	8003caa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e252      	b.n	8004150 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003caa:	4b3d      	ldr	r3, [pc, #244]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	4939      	ldr	r1, [pc, #228]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cbe:	e03a      	b.n	8003d36 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	695b      	ldr	r3, [r3, #20]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d020      	beq.n	8003d0a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cc8:	4b36      	ldr	r3, [pc, #216]	; (8003da4 <HAL_RCC_OscConfig+0x270>)
 8003cca:	2201      	movs	r2, #1
 8003ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cce:	f7fe f811 	bl	8001cf4 <HAL_GetTick>
 8003cd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cd4:	e008      	b.n	8003ce8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cd6:	f7fe f80d 	bl	8001cf4 <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d901      	bls.n	8003ce8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e233      	b.n	8004150 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ce8:	4b2d      	ldr	r3, [pc, #180]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0302 	and.w	r3, r3, #2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d0f0      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cf4:	4b2a      	ldr	r3, [pc, #168]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	00db      	lsls	r3, r3, #3
 8003d02:	4927      	ldr	r1, [pc, #156]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	600b      	str	r3, [r1, #0]
 8003d08:	e015      	b.n	8003d36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d0a:	4b26      	ldr	r3, [pc, #152]	; (8003da4 <HAL_RCC_OscConfig+0x270>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d10:	f7fd fff0 	bl	8001cf4 <HAL_GetTick>
 8003d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d16:	e008      	b.n	8003d2a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d18:	f7fd ffec 	bl	8001cf4 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e212      	b.n	8004150 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d2a:	4b1d      	ldr	r3, [pc, #116]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1f0      	bne.n	8003d18 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0308 	and.w	r3, r3, #8
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d03a      	beq.n	8003db8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d019      	beq.n	8003d7e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d4a:	4b17      	ldr	r3, [pc, #92]	; (8003da8 <HAL_RCC_OscConfig+0x274>)
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d50:	f7fd ffd0 	bl	8001cf4 <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d56:	e008      	b.n	8003d6a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d58:	f7fd ffcc 	bl	8001cf4 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e1f2      	b.n	8004150 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d6a:	4b0d      	ldr	r3, [pc, #52]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d0f0      	beq.n	8003d58 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003d76:	2001      	movs	r0, #1
 8003d78:	f000 fbf2 	bl	8004560 <RCC_Delay>
 8003d7c:	e01c      	b.n	8003db8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d7e:	4b0a      	ldr	r3, [pc, #40]	; (8003da8 <HAL_RCC_OscConfig+0x274>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d84:	f7fd ffb6 	bl	8001cf4 <HAL_GetTick>
 8003d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d8a:	e00f      	b.n	8003dac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d8c:	f7fd ffb2 	bl	8001cf4 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d908      	bls.n	8003dac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e1d8      	b.n	8004150 <HAL_RCC_OscConfig+0x61c>
 8003d9e:	bf00      	nop
 8003da0:	40021000 	.word	0x40021000
 8003da4:	42420000 	.word	0x42420000
 8003da8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dac:	4b9b      	ldr	r3, [pc, #620]	; (800401c <HAL_RCC_OscConfig+0x4e8>)
 8003dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1e9      	bne.n	8003d8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0304 	and.w	r3, r3, #4
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f000 80a6 	beq.w	8003f12 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dca:	4b94      	ldr	r3, [pc, #592]	; (800401c <HAL_RCC_OscConfig+0x4e8>)
 8003dcc:	69db      	ldr	r3, [r3, #28]
 8003dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d10d      	bne.n	8003df2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dd6:	4b91      	ldr	r3, [pc, #580]	; (800401c <HAL_RCC_OscConfig+0x4e8>)
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	4a90      	ldr	r2, [pc, #576]	; (800401c <HAL_RCC_OscConfig+0x4e8>)
 8003ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003de0:	61d3      	str	r3, [r2, #28]
 8003de2:	4b8e      	ldr	r3, [pc, #568]	; (800401c <HAL_RCC_OscConfig+0x4e8>)
 8003de4:	69db      	ldr	r3, [r3, #28]
 8003de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dea:	60bb      	str	r3, [r7, #8]
 8003dec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dee:	2301      	movs	r3, #1
 8003df0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003df2:	4b8b      	ldr	r3, [pc, #556]	; (8004020 <HAL_RCC_OscConfig+0x4ec>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d118      	bne.n	8003e30 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dfe:	4b88      	ldr	r3, [pc, #544]	; (8004020 <HAL_RCC_OscConfig+0x4ec>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a87      	ldr	r2, [pc, #540]	; (8004020 <HAL_RCC_OscConfig+0x4ec>)
 8003e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e0a:	f7fd ff73 	bl	8001cf4 <HAL_GetTick>
 8003e0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e10:	e008      	b.n	8003e24 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e12:	f7fd ff6f 	bl	8001cf4 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	2b64      	cmp	r3, #100	; 0x64
 8003e1e:	d901      	bls.n	8003e24 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e195      	b.n	8004150 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e24:	4b7e      	ldr	r3, [pc, #504]	; (8004020 <HAL_RCC_OscConfig+0x4ec>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d0f0      	beq.n	8003e12 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d106      	bne.n	8003e46 <HAL_RCC_OscConfig+0x312>
 8003e38:	4b78      	ldr	r3, [pc, #480]	; (800401c <HAL_RCC_OscConfig+0x4e8>)
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	4a77      	ldr	r2, [pc, #476]	; (800401c <HAL_RCC_OscConfig+0x4e8>)
 8003e3e:	f043 0301 	orr.w	r3, r3, #1
 8003e42:	6213      	str	r3, [r2, #32]
 8003e44:	e02d      	b.n	8003ea2 <HAL_RCC_OscConfig+0x36e>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10c      	bne.n	8003e68 <HAL_RCC_OscConfig+0x334>
 8003e4e:	4b73      	ldr	r3, [pc, #460]	; (800401c <HAL_RCC_OscConfig+0x4e8>)
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	4a72      	ldr	r2, [pc, #456]	; (800401c <HAL_RCC_OscConfig+0x4e8>)
 8003e54:	f023 0301 	bic.w	r3, r3, #1
 8003e58:	6213      	str	r3, [r2, #32]
 8003e5a:	4b70      	ldr	r3, [pc, #448]	; (800401c <HAL_RCC_OscConfig+0x4e8>)
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	4a6f      	ldr	r2, [pc, #444]	; (800401c <HAL_RCC_OscConfig+0x4e8>)
 8003e60:	f023 0304 	bic.w	r3, r3, #4
 8003e64:	6213      	str	r3, [r2, #32]
 8003e66:	e01c      	b.n	8003ea2 <HAL_RCC_OscConfig+0x36e>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	2b05      	cmp	r3, #5
 8003e6e:	d10c      	bne.n	8003e8a <HAL_RCC_OscConfig+0x356>
 8003e70:	4b6a      	ldr	r3, [pc, #424]	; (800401c <HAL_RCC_OscConfig+0x4e8>)
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	4a69      	ldr	r2, [pc, #420]	; (800401c <HAL_RCC_OscConfig+0x4e8>)
 8003e76:	f043 0304 	orr.w	r3, r3, #4
 8003e7a:	6213      	str	r3, [r2, #32]
 8003e7c:	4b67      	ldr	r3, [pc, #412]	; (800401c <HAL_RCC_OscConfig+0x4e8>)
 8003e7e:	6a1b      	ldr	r3, [r3, #32]
 8003e80:	4a66      	ldr	r2, [pc, #408]	; (800401c <HAL_RCC_OscConfig+0x4e8>)
 8003e82:	f043 0301 	orr.w	r3, r3, #1
 8003e86:	6213      	str	r3, [r2, #32]
 8003e88:	e00b      	b.n	8003ea2 <HAL_RCC_OscConfig+0x36e>
 8003e8a:	4b64      	ldr	r3, [pc, #400]	; (800401c <HAL_RCC_OscConfig+0x4e8>)
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	4a63      	ldr	r2, [pc, #396]	; (800401c <HAL_RCC_OscConfig+0x4e8>)
 8003e90:	f023 0301 	bic.w	r3, r3, #1
 8003e94:	6213      	str	r3, [r2, #32]
 8003e96:	4b61      	ldr	r3, [pc, #388]	; (800401c <HAL_RCC_OscConfig+0x4e8>)
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	4a60      	ldr	r2, [pc, #384]	; (800401c <HAL_RCC_OscConfig+0x4e8>)
 8003e9c:	f023 0304 	bic.w	r3, r3, #4
 8003ea0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d015      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eaa:	f7fd ff23 	bl	8001cf4 <HAL_GetTick>
 8003eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eb0:	e00a      	b.n	8003ec8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eb2:	f7fd ff1f 	bl	8001cf4 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d901      	bls.n	8003ec8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e143      	b.n	8004150 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ec8:	4b54      	ldr	r3, [pc, #336]	; (800401c <HAL_RCC_OscConfig+0x4e8>)
 8003eca:	6a1b      	ldr	r3, [r3, #32]
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d0ee      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x37e>
 8003ed4:	e014      	b.n	8003f00 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ed6:	f7fd ff0d 	bl	8001cf4 <HAL_GetTick>
 8003eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003edc:	e00a      	b.n	8003ef4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ede:	f7fd ff09 	bl	8001cf4 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e12d      	b.n	8004150 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ef4:	4b49      	ldr	r3, [pc, #292]	; (800401c <HAL_RCC_OscConfig+0x4e8>)
 8003ef6:	6a1b      	ldr	r3, [r3, #32]
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1ee      	bne.n	8003ede <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f00:	7dfb      	ldrb	r3, [r7, #23]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d105      	bne.n	8003f12 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f06:	4b45      	ldr	r3, [pc, #276]	; (800401c <HAL_RCC_OscConfig+0x4e8>)
 8003f08:	69db      	ldr	r3, [r3, #28]
 8003f0a:	4a44      	ldr	r2, [pc, #272]	; (800401c <HAL_RCC_OscConfig+0x4e8>)
 8003f0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f10:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f000 808c 	beq.w	8004034 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003f1c:	4b3f      	ldr	r3, [pc, #252]	; (800401c <HAL_RCC_OscConfig+0x4e8>)
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f28:	d10e      	bne.n	8003f48 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8003f2a:	4b3c      	ldr	r3, [pc, #240]	; (800401c <HAL_RCC_OscConfig+0x4e8>)
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003f32:	2b08      	cmp	r3, #8
 8003f34:	d108      	bne.n	8003f48 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8003f36:	4b39      	ldr	r3, [pc, #228]	; (800401c <HAL_RCC_OscConfig+0x4e8>)
 8003f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8003f3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f42:	d101      	bne.n	8003f48 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e103      	b.n	8004150 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d14e      	bne.n	8003fee <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003f50:	4b32      	ldr	r3, [pc, #200]	; (800401c <HAL_RCC_OscConfig+0x4e8>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d009      	beq.n	8003f70 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8003f5c:	4b2f      	ldr	r3, [pc, #188]	; (800401c <HAL_RCC_OscConfig+0x4e8>)
 8003f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d001      	beq.n	8003f70 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e0ef      	b.n	8004150 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8003f70:	4b2c      	ldr	r3, [pc, #176]	; (8004024 <HAL_RCC_OscConfig+0x4f0>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f76:	f7fd febd 	bl	8001cf4 <HAL_GetTick>
 8003f7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003f7c:	e008      	b.n	8003f90 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003f7e:	f7fd feb9 	bl	8001cf4 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b64      	cmp	r3, #100	; 0x64
 8003f8a:	d901      	bls.n	8003f90 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e0df      	b.n	8004150 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003f90:	4b22      	ldr	r3, [pc, #136]	; (800401c <HAL_RCC_OscConfig+0x4e8>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1f0      	bne.n	8003f7e <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8003f9c:	4b1f      	ldr	r3, [pc, #124]	; (800401c <HAL_RCC_OscConfig+0x4e8>)
 8003f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa8:	491c      	ldr	r1, [pc, #112]	; (800401c <HAL_RCC_OscConfig+0x4e8>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8003fae:	4b1b      	ldr	r3, [pc, #108]	; (800401c <HAL_RCC_OscConfig+0x4e8>)
 8003fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fba:	4918      	ldr	r1, [pc, #96]	; (800401c <HAL_RCC_OscConfig+0x4e8>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8003fc0:	4b18      	ldr	r3, [pc, #96]	; (8004024 <HAL_RCC_OscConfig+0x4f0>)
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc6:	f7fd fe95 	bl	8001cf4 <HAL_GetTick>
 8003fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003fcc:	e008      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003fce:	f7fd fe91 	bl	8001cf4 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b64      	cmp	r3, #100	; 0x64
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e0b7      	b.n	8004150 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003fe0:	4b0e      	ldr	r3, [pc, #56]	; (800401c <HAL_RCC_OscConfig+0x4e8>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d0f0      	beq.n	8003fce <HAL_RCC_OscConfig+0x49a>
 8003fec:	e022      	b.n	8004034 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8003fee:	4b0b      	ldr	r3, [pc, #44]	; (800401c <HAL_RCC_OscConfig+0x4e8>)
 8003ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff2:	4a0a      	ldr	r2, [pc, #40]	; (800401c <HAL_RCC_OscConfig+0x4e8>)
 8003ff4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ff8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8003ffa:	4b0a      	ldr	r3, [pc, #40]	; (8004024 <HAL_RCC_OscConfig+0x4f0>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004000:	f7fd fe78 	bl	8001cf4 <HAL_GetTick>
 8004004:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8004006:	e00f      	b.n	8004028 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004008:	f7fd fe74 	bl	8001cf4 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b64      	cmp	r3, #100	; 0x64
 8004014:	d908      	bls.n	8004028 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e09a      	b.n	8004150 <HAL_RCC_OscConfig+0x61c>
 800401a:	bf00      	nop
 800401c:	40021000 	.word	0x40021000
 8004020:	40007000 	.word	0x40007000
 8004024:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8004028:	4b4b      	ldr	r3, [pc, #300]	; (8004158 <HAL_RCC_OscConfig+0x624>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1e9      	bne.n	8004008 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	2b00      	cmp	r3, #0
 800403a:	f000 8088 	beq.w	800414e <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800403e:	4b46      	ldr	r3, [pc, #280]	; (8004158 <HAL_RCC_OscConfig+0x624>)
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f003 030c 	and.w	r3, r3, #12
 8004046:	2b08      	cmp	r3, #8
 8004048:	d068      	beq.n	800411c <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	2b02      	cmp	r3, #2
 8004050:	d14d      	bne.n	80040ee <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004052:	4b42      	ldr	r3, [pc, #264]	; (800415c <HAL_RCC_OscConfig+0x628>)
 8004054:	2200      	movs	r2, #0
 8004056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004058:	f7fd fe4c 	bl	8001cf4 <HAL_GetTick>
 800405c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800405e:	e008      	b.n	8004072 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004060:	f7fd fe48 	bl	8001cf4 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b02      	cmp	r3, #2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e06e      	b.n	8004150 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004072:	4b39      	ldr	r3, [pc, #228]	; (8004158 <HAL_RCC_OscConfig+0x624>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1f0      	bne.n	8004060 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004082:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004086:	d10f      	bne.n	80040a8 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8004088:	4b33      	ldr	r3, [pc, #204]	; (8004158 <HAL_RCC_OscConfig+0x624>)
 800408a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	4931      	ldr	r1, [pc, #196]	; (8004158 <HAL_RCC_OscConfig+0x624>)
 8004092:	4313      	orrs	r3, r2
 8004094:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004096:	4b30      	ldr	r3, [pc, #192]	; (8004158 <HAL_RCC_OscConfig+0x624>)
 8004098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409a:	f023 020f 	bic.w	r2, r3, #15
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	492d      	ldr	r1, [pc, #180]	; (8004158 <HAL_RCC_OscConfig+0x624>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040a8:	4b2b      	ldr	r3, [pc, #172]	; (8004158 <HAL_RCC_OscConfig+0x624>)
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b8:	430b      	orrs	r3, r1
 80040ba:	4927      	ldr	r1, [pc, #156]	; (8004158 <HAL_RCC_OscConfig+0x624>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040c0:	4b26      	ldr	r3, [pc, #152]	; (800415c <HAL_RCC_OscConfig+0x628>)
 80040c2:	2201      	movs	r2, #1
 80040c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c6:	f7fd fe15 	bl	8001cf4 <HAL_GetTick>
 80040ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040cc:	e008      	b.n	80040e0 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ce:	f7fd fe11 	bl	8001cf4 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d901      	bls.n	80040e0 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e037      	b.n	8004150 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040e0:	4b1d      	ldr	r3, [pc, #116]	; (8004158 <HAL_RCC_OscConfig+0x624>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d0f0      	beq.n	80040ce <HAL_RCC_OscConfig+0x59a>
 80040ec:	e02f      	b.n	800414e <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ee:	4b1b      	ldr	r3, [pc, #108]	; (800415c <HAL_RCC_OscConfig+0x628>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f4:	f7fd fdfe 	bl	8001cf4 <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040fa:	e008      	b.n	800410e <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040fc:	f7fd fdfa 	bl	8001cf4 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e020      	b.n	8004150 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800410e:	4b12      	ldr	r3, [pc, #72]	; (8004158 <HAL_RCC_OscConfig+0x624>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1f0      	bne.n	80040fc <HAL_RCC_OscConfig+0x5c8>
 800411a:	e018      	b.n	800414e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d101      	bne.n	8004128 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e013      	b.n	8004150 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004128:	4b0b      	ldr	r3, [pc, #44]	; (8004158 <HAL_RCC_OscConfig+0x624>)
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004138:	429a      	cmp	r2, r3
 800413a:	d106      	bne.n	800414a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004146:	429a      	cmp	r2, r3
 8004148:	d001      	beq.n	800414e <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e000      	b.n	8004150 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3718      	adds	r7, #24
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	40021000 	.word	0x40021000
 800415c:	42420060 	.word	0x42420060

08004160 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d101      	bne.n	8004174 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e0d0      	b.n	8004316 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004174:	4b6a      	ldr	r3, [pc, #424]	; (8004320 <HAL_RCC_ClockConfig+0x1c0>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0307 	and.w	r3, r3, #7
 800417c:	683a      	ldr	r2, [r7, #0]
 800417e:	429a      	cmp	r2, r3
 8004180:	d910      	bls.n	80041a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004182:	4b67      	ldr	r3, [pc, #412]	; (8004320 <HAL_RCC_ClockConfig+0x1c0>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f023 0207 	bic.w	r2, r3, #7
 800418a:	4965      	ldr	r1, [pc, #404]	; (8004320 <HAL_RCC_ClockConfig+0x1c0>)
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	4313      	orrs	r3, r2
 8004190:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004192:	4b63      	ldr	r3, [pc, #396]	; (8004320 <HAL_RCC_ClockConfig+0x1c0>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0307 	and.w	r3, r3, #7
 800419a:	683a      	ldr	r2, [r7, #0]
 800419c:	429a      	cmp	r2, r3
 800419e:	d001      	beq.n	80041a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e0b8      	b.n	8004316 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0302 	and.w	r3, r3, #2
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d020      	beq.n	80041f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0304 	and.w	r3, r3, #4
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d005      	beq.n	80041c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041bc:	4b59      	ldr	r3, [pc, #356]	; (8004324 <HAL_RCC_ClockConfig+0x1c4>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	4a58      	ldr	r2, [pc, #352]	; (8004324 <HAL_RCC_ClockConfig+0x1c4>)
 80041c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80041c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0308 	and.w	r3, r3, #8
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d005      	beq.n	80041e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041d4:	4b53      	ldr	r3, [pc, #332]	; (8004324 <HAL_RCC_ClockConfig+0x1c4>)
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	4a52      	ldr	r2, [pc, #328]	; (8004324 <HAL_RCC_ClockConfig+0x1c4>)
 80041da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80041de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041e0:	4b50      	ldr	r3, [pc, #320]	; (8004324 <HAL_RCC_ClockConfig+0x1c4>)
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	494d      	ldr	r1, [pc, #308]	; (8004324 <HAL_RCC_ClockConfig+0x1c4>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d040      	beq.n	8004280 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d107      	bne.n	8004216 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004206:	4b47      	ldr	r3, [pc, #284]	; (8004324 <HAL_RCC_ClockConfig+0x1c4>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d115      	bne.n	800423e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e07f      	b.n	8004316 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	2b02      	cmp	r3, #2
 800421c:	d107      	bne.n	800422e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800421e:	4b41      	ldr	r3, [pc, #260]	; (8004324 <HAL_RCC_ClockConfig+0x1c4>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d109      	bne.n	800423e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e073      	b.n	8004316 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800422e:	4b3d      	ldr	r3, [pc, #244]	; (8004324 <HAL_RCC_ClockConfig+0x1c4>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e06b      	b.n	8004316 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800423e:	4b39      	ldr	r3, [pc, #228]	; (8004324 <HAL_RCC_ClockConfig+0x1c4>)
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f023 0203 	bic.w	r2, r3, #3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	4936      	ldr	r1, [pc, #216]	; (8004324 <HAL_RCC_ClockConfig+0x1c4>)
 800424c:	4313      	orrs	r3, r2
 800424e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004250:	f7fd fd50 	bl	8001cf4 <HAL_GetTick>
 8004254:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004256:	e00a      	b.n	800426e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004258:	f7fd fd4c 	bl	8001cf4 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	f241 3288 	movw	r2, #5000	; 0x1388
 8004266:	4293      	cmp	r3, r2
 8004268:	d901      	bls.n	800426e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e053      	b.n	8004316 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800426e:	4b2d      	ldr	r3, [pc, #180]	; (8004324 <HAL_RCC_ClockConfig+0x1c4>)
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f003 020c 	and.w	r2, r3, #12
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	429a      	cmp	r2, r3
 800427e:	d1eb      	bne.n	8004258 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004280:	4b27      	ldr	r3, [pc, #156]	; (8004320 <HAL_RCC_ClockConfig+0x1c0>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0307 	and.w	r3, r3, #7
 8004288:	683a      	ldr	r2, [r7, #0]
 800428a:	429a      	cmp	r2, r3
 800428c:	d210      	bcs.n	80042b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800428e:	4b24      	ldr	r3, [pc, #144]	; (8004320 <HAL_RCC_ClockConfig+0x1c0>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f023 0207 	bic.w	r2, r3, #7
 8004296:	4922      	ldr	r1, [pc, #136]	; (8004320 <HAL_RCC_ClockConfig+0x1c0>)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	4313      	orrs	r3, r2
 800429c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800429e:	4b20      	ldr	r3, [pc, #128]	; (8004320 <HAL_RCC_ClockConfig+0x1c0>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0307 	and.w	r3, r3, #7
 80042a6:	683a      	ldr	r2, [r7, #0]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d001      	beq.n	80042b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e032      	b.n	8004316 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0304 	and.w	r3, r3, #4
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d008      	beq.n	80042ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042bc:	4b19      	ldr	r3, [pc, #100]	; (8004324 <HAL_RCC_ClockConfig+0x1c4>)
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	4916      	ldr	r1, [pc, #88]	; (8004324 <HAL_RCC_ClockConfig+0x1c4>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0308 	and.w	r3, r3, #8
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d009      	beq.n	80042ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80042da:	4b12      	ldr	r3, [pc, #72]	; (8004324 <HAL_RCC_ClockConfig+0x1c4>)
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	00db      	lsls	r3, r3, #3
 80042e8:	490e      	ldr	r1, [pc, #56]	; (8004324 <HAL_RCC_ClockConfig+0x1c4>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042ee:	f000 f821 	bl	8004334 <HAL_RCC_GetSysClockFreq>
 80042f2:	4602      	mov	r2, r0
 80042f4:	4b0b      	ldr	r3, [pc, #44]	; (8004324 <HAL_RCC_ClockConfig+0x1c4>)
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	091b      	lsrs	r3, r3, #4
 80042fa:	f003 030f 	and.w	r3, r3, #15
 80042fe:	490a      	ldr	r1, [pc, #40]	; (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 8004300:	5ccb      	ldrb	r3, [r1, r3]
 8004302:	fa22 f303 	lsr.w	r3, r2, r3
 8004306:	4a09      	ldr	r2, [pc, #36]	; (800432c <HAL_RCC_ClockConfig+0x1cc>)
 8004308:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800430a:	4b09      	ldr	r3, [pc, #36]	; (8004330 <HAL_RCC_ClockConfig+0x1d0>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4618      	mov	r0, r3
 8004310:	f7fd fcae 	bl	8001c70 <HAL_InitTick>

  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3710      	adds	r7, #16
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	40022000 	.word	0x40022000
 8004324:	40021000 	.word	0x40021000
 8004328:	08008304 	.word	0x08008304
 800432c:	20000000 	.word	0x20000000
 8004330:	20000004 	.word	0x20000004

08004334 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004334:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004338:	b091      	sub	sp, #68	; 0x44
 800433a:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 800433c:	4b6a      	ldr	r3, [pc, #424]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x1b4>)
 800433e:	f107 0414 	add.w	r4, r7, #20
 8004342:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004344:	c407      	stmia	r4!, {r0, r1, r2}
 8004346:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8004348:	4b68      	ldr	r3, [pc, #416]	; (80044ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 800434a:	1d3c      	adds	r4, r7, #4
 800434c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800434e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004352:	2300      	movs	r3, #0
 8004354:	637b      	str	r3, [r7, #52]	; 0x34
 8004356:	2300      	movs	r3, #0
 8004358:	633b      	str	r3, [r7, #48]	; 0x30
 800435a:	2300      	movs	r3, #0
 800435c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800435e:	2300      	movs	r3, #0
 8004360:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 8004362:	2300      	movs	r3, #0
 8004364:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8004366:	2300      	movs	r3, #0
 8004368:	62bb      	str	r3, [r7, #40]	; 0x28
 800436a:	2300      	movs	r3, #0
 800436c:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800436e:	4b60      	ldr	r3, [pc, #384]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004376:	f003 030c 	and.w	r3, r3, #12
 800437a:	2b04      	cmp	r3, #4
 800437c:	d002      	beq.n	8004384 <HAL_RCC_GetSysClockFreq+0x50>
 800437e:	2b08      	cmp	r3, #8
 8004380:	d003      	beq.n	800438a <HAL_RCC_GetSysClockFreq+0x56>
 8004382:	e0a8      	b.n	80044d6 <HAL_RCC_GetSysClockFreq+0x1a2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004384:	4b5b      	ldr	r3, [pc, #364]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004386:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004388:	e0a8      	b.n	80044dc <HAL_RCC_GetSysClockFreq+0x1a8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800438a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800438c:	0c9b      	lsrs	r3, r3, #18
 800438e:	f003 030f 	and.w	r3, r3, #15
 8004392:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004396:	4413      	add	r3, r2
 8004398:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800439c:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800439e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	f000 808e 	beq.w	80044c6 <HAL_RCC_GetSysClockFreq+0x192>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80043aa:	4b51      	ldr	r3, [pc, #324]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80043ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ae:	f003 030f 	and.w	r3, r3, #15
 80043b2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80043b6:	4413      	add	r3, r2
 80043b8:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 80043bc:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 80043be:	4b4c      	ldr	r3, [pc, #304]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80043c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d06b      	beq.n	80044a2 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80043ca:	4b49      	ldr	r3, [pc, #292]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80043cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ce:	091b      	lsrs	r3, r3, #4
 80043d0:	f003 030f 	and.w	r3, r3, #15
 80043d4:	3301      	adds	r3, #1
 80043d6:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 80043d8:	4b45      	ldr	r3, [pc, #276]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80043da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043dc:	0a1b      	lsrs	r3, r3, #8
 80043de:	f003 030f 	and.w	r3, r3, #15
 80043e2:	3302      	adds	r3, #2
 80043e4:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 80043e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e8:	4618      	mov	r0, r3
 80043ea:	f04f 0100 	mov.w	r1, #0
 80043ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f0:	461a      	mov	r2, r3
 80043f2:	f04f 0300 	mov.w	r3, #0
 80043f6:	fb02 f501 	mul.w	r5, r2, r1
 80043fa:	fb00 f403 	mul.w	r4, r0, r3
 80043fe:	192e      	adds	r6, r5, r4
 8004400:	fba0 4502 	umull	r4, r5, r0, r2
 8004404:	1973      	adds	r3, r6, r5
 8004406:	461d      	mov	r5, r3
 8004408:	4620      	mov	r0, r4
 800440a:	4629      	mov	r1, r5
 800440c:	f04f 0200 	mov.w	r2, #0
 8004410:	f04f 0300 	mov.w	r3, #0
 8004414:	014b      	lsls	r3, r1, #5
 8004416:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800441a:	0142      	lsls	r2, r0, #5
 800441c:	4610      	mov	r0, r2
 800441e:	4619      	mov	r1, r3
 8004420:	1b00      	subs	r0, r0, r4
 8004422:	eb61 0105 	sbc.w	r1, r1, r5
 8004426:	f04f 0200 	mov.w	r2, #0
 800442a:	f04f 0300 	mov.w	r3, #0
 800442e:	018b      	lsls	r3, r1, #6
 8004430:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004434:	0182      	lsls	r2, r0, #6
 8004436:	1a12      	subs	r2, r2, r0
 8004438:	eb63 0301 	sbc.w	r3, r3, r1
 800443c:	f04f 0000 	mov.w	r0, #0
 8004440:	f04f 0100 	mov.w	r1, #0
 8004444:	00d9      	lsls	r1, r3, #3
 8004446:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800444a:	00d0      	lsls	r0, r2, #3
 800444c:	4602      	mov	r2, r0
 800444e:	460b      	mov	r3, r1
 8004450:	1912      	adds	r2, r2, r4
 8004452:	eb45 0303 	adc.w	r3, r5, r3
 8004456:	f04f 0000 	mov.w	r0, #0
 800445a:	f04f 0100 	mov.w	r1, #0
 800445e:	0259      	lsls	r1, r3, #9
 8004460:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004464:	0250      	lsls	r0, r2, #9
 8004466:	4602      	mov	r2, r0
 8004468:	460b      	mov	r3, r1
 800446a:	4690      	mov	r8, r2
 800446c:	4699      	mov	r9, r3
 800446e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004470:	4618      	mov	r0, r3
 8004472:	f04f 0100 	mov.w	r1, #0
 8004476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004478:	461a      	mov	r2, r3
 800447a:	f04f 0300 	mov.w	r3, #0
 800447e:	fb02 f501 	mul.w	r5, r2, r1
 8004482:	fb00 f403 	mul.w	r4, r0, r3
 8004486:	442c      	add	r4, r5
 8004488:	fba0 2302 	umull	r2, r3, r0, r2
 800448c:	18e1      	adds	r1, r4, r3
 800448e:	460b      	mov	r3, r1
 8004490:	4640      	mov	r0, r8
 8004492:	4649      	mov	r1, r9
 8004494:	f7fc fbb4 	bl	8000c00 <__aeabi_uldivmod>
 8004498:	4602      	mov	r2, r0
 800449a:	460b      	mov	r3, r1
 800449c:	4613      	mov	r3, r2
 800449e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044a0:	e007      	b.n	80044b2 <HAL_RCC_GetSysClockFreq+0x17e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80044a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a4:	4a13      	ldr	r2, [pc, #76]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80044a6:	fb02 f203 	mul.w	r2, r2, r3
 80044aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80044b2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80044b6:	461a      	mov	r2, r3
 80044b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d108      	bne.n	80044d0 <HAL_RCC_GetSysClockFreq+0x19c>
        {
          pllclk = pllclk / 2;
 80044be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044c0:	085b      	lsrs	r3, r3, #1
 80044c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044c4:	e004      	b.n	80044d0 <HAL_RCC_GetSysClockFreq+0x19c>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80044c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c8:	4a0b      	ldr	r2, [pc, #44]	; (80044f8 <HAL_RCC_GetSysClockFreq+0x1c4>)
 80044ca:	fb02 f303 	mul.w	r3, r2, r3
 80044ce:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 80044d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044d2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80044d4:	e002      	b.n	80044dc <HAL_RCC_GetSysClockFreq+0x1a8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80044d6:	4b07      	ldr	r3, [pc, #28]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80044d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80044da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3744      	adds	r7, #68	; 0x44
 80044e2:	46bd      	mov	sp, r7
 80044e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80044e8:	080082e4 	.word	0x080082e4
 80044ec:	080082f4 	.word	0x080082f4
 80044f0:	40021000 	.word	0x40021000
 80044f4:	007a1200 	.word	0x007a1200
 80044f8:	003d0900 	.word	0x003d0900

080044fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044fc:	b480      	push	{r7}
 80044fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004500:	4b02      	ldr	r3, [pc, #8]	; (800450c <HAL_RCC_GetHCLKFreq+0x10>)
 8004502:	681b      	ldr	r3, [r3, #0]
}
 8004504:	4618      	mov	r0, r3
 8004506:	46bd      	mov	sp, r7
 8004508:	bc80      	pop	{r7}
 800450a:	4770      	bx	lr
 800450c:	20000000 	.word	0x20000000

08004510 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004514:	f7ff fff2 	bl	80044fc <HAL_RCC_GetHCLKFreq>
 8004518:	4602      	mov	r2, r0
 800451a:	4b05      	ldr	r3, [pc, #20]	; (8004530 <HAL_RCC_GetPCLK1Freq+0x20>)
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	0a1b      	lsrs	r3, r3, #8
 8004520:	f003 0307 	and.w	r3, r3, #7
 8004524:	4903      	ldr	r1, [pc, #12]	; (8004534 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004526:	5ccb      	ldrb	r3, [r1, r3]
 8004528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800452c:	4618      	mov	r0, r3
 800452e:	bd80      	pop	{r7, pc}
 8004530:	40021000 	.word	0x40021000
 8004534:	08008314 	.word	0x08008314

08004538 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800453c:	f7ff ffde 	bl	80044fc <HAL_RCC_GetHCLKFreq>
 8004540:	4602      	mov	r2, r0
 8004542:	4b05      	ldr	r3, [pc, #20]	; (8004558 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	0adb      	lsrs	r3, r3, #11
 8004548:	f003 0307 	and.w	r3, r3, #7
 800454c:	4903      	ldr	r1, [pc, #12]	; (800455c <HAL_RCC_GetPCLK2Freq+0x24>)
 800454e:	5ccb      	ldrb	r3, [r1, r3]
 8004550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004554:	4618      	mov	r0, r3
 8004556:	bd80      	pop	{r7, pc}
 8004558:	40021000 	.word	0x40021000
 800455c:	08008314 	.word	0x08008314

08004560 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004568:	4b0a      	ldr	r3, [pc, #40]	; (8004594 <RCC_Delay+0x34>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a0a      	ldr	r2, [pc, #40]	; (8004598 <RCC_Delay+0x38>)
 800456e:	fba2 2303 	umull	r2, r3, r2, r3
 8004572:	0a5b      	lsrs	r3, r3, #9
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	fb02 f303 	mul.w	r3, r2, r3
 800457a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800457c:	bf00      	nop
  }
  while (Delay --);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	1e5a      	subs	r2, r3, #1
 8004582:	60fa      	str	r2, [r7, #12]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1f9      	bne.n	800457c <RCC_Delay+0x1c>
}
 8004588:	bf00      	nop
 800458a:	bf00      	nop
 800458c:	3714      	adds	r7, #20
 800458e:	46bd      	mov	sp, r7
 8004590:	bc80      	pop	{r7}
 8004592:	4770      	bx	lr
 8004594:	20000000 	.word	0x20000000
 8004598:	10624dd3 	.word	0x10624dd3

0800459c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d101      	bne.n	80045ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e041      	b.n	8004632 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d106      	bne.n	80045c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f7fd f99c 	bl	8001900 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2202      	movs	r2, #2
 80045cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	3304      	adds	r3, #4
 80045d8:	4619      	mov	r1, r3
 80045da:	4610      	mov	r0, r2
 80045dc:	f000 f95a 	bl	8004894 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3708      	adds	r7, #8
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b082      	sub	sp, #8
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	2b02      	cmp	r3, #2
 800464e:	d122      	bne.n	8004696 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b02      	cmp	r3, #2
 800465c:	d11b      	bne.n	8004696 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f06f 0202 	mvn.w	r2, #2
 8004666:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	f003 0303 	and.w	r3, r3, #3
 8004678:	2b00      	cmp	r3, #0
 800467a:	d003      	beq.n	8004684 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 f8ed 	bl	800485c <HAL_TIM_IC_CaptureCallback>
 8004682:	e005      	b.n	8004690 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 f8e0 	bl	800484a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 f8ef 	bl	800486e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	f003 0304 	and.w	r3, r3, #4
 80046a0:	2b04      	cmp	r3, #4
 80046a2:	d122      	bne.n	80046ea <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	f003 0304 	and.w	r3, r3, #4
 80046ae:	2b04      	cmp	r3, #4
 80046b0:	d11b      	bne.n	80046ea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f06f 0204 	mvn.w	r2, #4
 80046ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2202      	movs	r2, #2
 80046c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	699b      	ldr	r3, [r3, #24]
 80046c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d003      	beq.n	80046d8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 f8c3 	bl	800485c <HAL_TIM_IC_CaptureCallback>
 80046d6:	e005      	b.n	80046e4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 f8b6 	bl	800484a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f8c5 	bl	800486e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	f003 0308 	and.w	r3, r3, #8
 80046f4:	2b08      	cmp	r3, #8
 80046f6:	d122      	bne.n	800473e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	f003 0308 	and.w	r3, r3, #8
 8004702:	2b08      	cmp	r3, #8
 8004704:	d11b      	bne.n	800473e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f06f 0208 	mvn.w	r2, #8
 800470e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2204      	movs	r2, #4
 8004714:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	69db      	ldr	r3, [r3, #28]
 800471c:	f003 0303 	and.w	r3, r3, #3
 8004720:	2b00      	cmp	r3, #0
 8004722:	d003      	beq.n	800472c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 f899 	bl	800485c <HAL_TIM_IC_CaptureCallback>
 800472a:	e005      	b.n	8004738 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 f88c 	bl	800484a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f89b 	bl	800486e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	f003 0310 	and.w	r3, r3, #16
 8004748:	2b10      	cmp	r3, #16
 800474a:	d122      	bne.n	8004792 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	f003 0310 	and.w	r3, r3, #16
 8004756:	2b10      	cmp	r3, #16
 8004758:	d11b      	bne.n	8004792 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f06f 0210 	mvn.w	r2, #16
 8004762:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2208      	movs	r2, #8
 8004768:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	69db      	ldr	r3, [r3, #28]
 8004770:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004774:	2b00      	cmp	r3, #0
 8004776:	d003      	beq.n	8004780 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 f86f 	bl	800485c <HAL_TIM_IC_CaptureCallback>
 800477e:	e005      	b.n	800478c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 f862 	bl	800484a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 f871 	bl	800486e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	f003 0301 	and.w	r3, r3, #1
 800479c:	2b01      	cmp	r3, #1
 800479e:	d10e      	bne.n	80047be <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d107      	bne.n	80047be <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f06f 0201 	mvn.w	r2, #1
 80047b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f7fc ff91 	bl	80016e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047c8:	2b80      	cmp	r3, #128	; 0x80
 80047ca:	d10e      	bne.n	80047ea <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d6:	2b80      	cmp	r3, #128	; 0x80
 80047d8:	d107      	bne.n	80047ea <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80047e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 f930 	bl	8004a4a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f4:	2b40      	cmp	r3, #64	; 0x40
 80047f6:	d10e      	bne.n	8004816 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004802:	2b40      	cmp	r3, #64	; 0x40
 8004804:	d107      	bne.n	8004816 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800480e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 f835 	bl	8004880 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	f003 0320 	and.w	r3, r3, #32
 8004820:	2b20      	cmp	r3, #32
 8004822:	d10e      	bne.n	8004842 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	f003 0320 	and.w	r3, r3, #32
 800482e:	2b20      	cmp	r3, #32
 8004830:	d107      	bne.n	8004842 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f06f 0220 	mvn.w	r2, #32
 800483a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 f8fb 	bl	8004a38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004842:	bf00      	nop
 8004844:	3708      	adds	r7, #8
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800484a:	b480      	push	{r7}
 800484c:	b083      	sub	sp, #12
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004852:	bf00      	nop
 8004854:	370c      	adds	r7, #12
 8004856:	46bd      	mov	sp, r7
 8004858:	bc80      	pop	{r7}
 800485a:	4770      	bx	lr

0800485c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004864:	bf00      	nop
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	bc80      	pop	{r7}
 800486c:	4770      	bx	lr

0800486e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800486e:	b480      	push	{r7}
 8004870:	b083      	sub	sp, #12
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004876:	bf00      	nop
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	bc80      	pop	{r7}
 800487e:	4770      	bx	lr

08004880 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	bc80      	pop	{r7}
 8004890:	4770      	bx	lr
	...

08004894 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a2d      	ldr	r2, [pc, #180]	; (800495c <TIM_Base_SetConfig+0xc8>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d00f      	beq.n	80048cc <TIM_Base_SetConfig+0x38>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b2:	d00b      	beq.n	80048cc <TIM_Base_SetConfig+0x38>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a2a      	ldr	r2, [pc, #168]	; (8004960 <TIM_Base_SetConfig+0xcc>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d007      	beq.n	80048cc <TIM_Base_SetConfig+0x38>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a29      	ldr	r2, [pc, #164]	; (8004964 <TIM_Base_SetConfig+0xd0>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d003      	beq.n	80048cc <TIM_Base_SetConfig+0x38>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a28      	ldr	r2, [pc, #160]	; (8004968 <TIM_Base_SetConfig+0xd4>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d108      	bne.n	80048de <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	4313      	orrs	r3, r2
 80048dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a1e      	ldr	r2, [pc, #120]	; (800495c <TIM_Base_SetConfig+0xc8>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d00f      	beq.n	8004906 <TIM_Base_SetConfig+0x72>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ec:	d00b      	beq.n	8004906 <TIM_Base_SetConfig+0x72>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a1b      	ldr	r2, [pc, #108]	; (8004960 <TIM_Base_SetConfig+0xcc>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d007      	beq.n	8004906 <TIM_Base_SetConfig+0x72>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a1a      	ldr	r2, [pc, #104]	; (8004964 <TIM_Base_SetConfig+0xd0>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d003      	beq.n	8004906 <TIM_Base_SetConfig+0x72>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a19      	ldr	r2, [pc, #100]	; (8004968 <TIM_Base_SetConfig+0xd4>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d108      	bne.n	8004918 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800490c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	4313      	orrs	r3, r2
 8004916:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	4313      	orrs	r3, r2
 8004924:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	689a      	ldr	r2, [r3, #8]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a07      	ldr	r2, [pc, #28]	; (800495c <TIM_Base_SetConfig+0xc8>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d103      	bne.n	800494c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	691a      	ldr	r2, [r3, #16]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	615a      	str	r2, [r3, #20]
}
 8004952:	bf00      	nop
 8004954:	3714      	adds	r7, #20
 8004956:	46bd      	mov	sp, r7
 8004958:	bc80      	pop	{r7}
 800495a:	4770      	bx	lr
 800495c:	40012c00 	.word	0x40012c00
 8004960:	40000400 	.word	0x40000400
 8004964:	40000800 	.word	0x40000800
 8004968:	40000c00 	.word	0x40000c00

0800496c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800497c:	2b01      	cmp	r3, #1
 800497e:	d101      	bne.n	8004984 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004980:	2302      	movs	r3, #2
 8004982:	e04b      	b.n	8004a1c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2202      	movs	r2, #2
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a19      	ldr	r2, [pc, #100]	; (8004a28 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d013      	beq.n	80049f0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049d0:	d00e      	beq.n	80049f0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a15      	ldr	r2, [pc, #84]	; (8004a2c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d009      	beq.n	80049f0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a13      	ldr	r2, [pc, #76]	; (8004a30 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d004      	beq.n	80049f0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a12      	ldr	r2, [pc, #72]	; (8004a34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d10c      	bne.n	8004a0a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	68ba      	ldr	r2, [r7, #8]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68ba      	ldr	r2, [r7, #8]
 8004a08:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3714      	adds	r7, #20
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bc80      	pop	{r7}
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	40012c00 	.word	0x40012c00
 8004a2c:	40000400 	.word	0x40000400
 8004a30:	40000800 	.word	0x40000800
 8004a34:	40000c00 	.word	0x40000c00

08004a38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bc80      	pop	{r7}
 8004a48:	4770      	bx	lr

08004a4a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	b083      	sub	sp, #12
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a52:	bf00      	nop
 8004a54:	370c      	adds	r7, #12
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bc80      	pop	{r7}
 8004a5a:	4770      	bx	lr

08004a5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d101      	bne.n	8004a6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e03f      	b.n	8004aee <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d106      	bne.n	8004a88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7fc ff62 	bl	800194c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2224      	movs	r2, #36	; 0x24
 8004a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68da      	ldr	r2, [r3, #12]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 fc85 	bl	80053b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	691a      	ldr	r2, [r3, #16]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ab4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	695a      	ldr	r2, [r3, #20]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ac4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68da      	ldr	r2, [r3, #12]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ad4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3708      	adds	r7, #8
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b08a      	sub	sp, #40	; 0x28
 8004afa:	af02      	add	r7, sp, #8
 8004afc:	60f8      	str	r0, [r7, #12]
 8004afe:	60b9      	str	r1, [r7, #8]
 8004b00:	603b      	str	r3, [r7, #0]
 8004b02:	4613      	mov	r3, r2
 8004b04:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b06:	2300      	movs	r3, #0
 8004b08:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	2b20      	cmp	r3, #32
 8004b14:	d17c      	bne.n	8004c10 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d002      	beq.n	8004b22 <HAL_UART_Transmit+0x2c>
 8004b1c:	88fb      	ldrh	r3, [r7, #6]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d101      	bne.n	8004b26 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e075      	b.n	8004c12 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d101      	bne.n	8004b34 <HAL_UART_Transmit+0x3e>
 8004b30:	2302      	movs	r3, #2
 8004b32:	e06e      	b.n	8004c12 <HAL_UART_Transmit+0x11c>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2221      	movs	r2, #33	; 0x21
 8004b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b4a:	f7fd f8d3 	bl	8001cf4 <HAL_GetTick>
 8004b4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	88fa      	ldrh	r2, [r7, #6]
 8004b54:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	88fa      	ldrh	r2, [r7, #6]
 8004b5a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b64:	d108      	bne.n	8004b78 <HAL_UART_Transmit+0x82>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d104      	bne.n	8004b78 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	61bb      	str	r3, [r7, #24]
 8004b76:	e003      	b.n	8004b80 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004b88:	e02a      	b.n	8004be0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	9300      	str	r3, [sp, #0]
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	2200      	movs	r2, #0
 8004b92:	2180      	movs	r1, #128	; 0x80
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f000 fa38 	bl	800500a <UART_WaitOnFlagUntilTimeout>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d001      	beq.n	8004ba4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e036      	b.n	8004c12 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d10b      	bne.n	8004bc2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	881b      	ldrh	r3, [r3, #0]
 8004bae:	461a      	mov	r2, r3
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bb8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	3302      	adds	r3, #2
 8004bbe:	61bb      	str	r3, [r7, #24]
 8004bc0:	e007      	b.n	8004bd2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	781a      	ldrb	r2, [r3, #0]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	3301      	adds	r3, #1
 8004bd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1cf      	bne.n	8004b8a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	9300      	str	r3, [sp, #0]
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	2140      	movs	r1, #64	; 0x40
 8004bf4:	68f8      	ldr	r0, [r7, #12]
 8004bf6:	f000 fa08 	bl	800500a <UART_WaitOnFlagUntilTimeout>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d001      	beq.n	8004c04 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e006      	b.n	8004c12 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2220      	movs	r2, #32
 8004c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	e000      	b.n	8004c12 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004c10:	2302      	movs	r3, #2
  }
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3720      	adds	r7, #32
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}

08004c1a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b084      	sub	sp, #16
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	60f8      	str	r0, [r7, #12]
 8004c22:	60b9      	str	r1, [r7, #8]
 8004c24:	4613      	mov	r3, r2
 8004c26:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	2b20      	cmp	r3, #32
 8004c32:	d11d      	bne.n	8004c70 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d002      	beq.n	8004c40 <HAL_UART_Receive_IT+0x26>
 8004c3a:	88fb      	ldrh	r3, [r7, #6]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d101      	bne.n	8004c44 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e016      	b.n	8004c72 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d101      	bne.n	8004c52 <HAL_UART_Receive_IT+0x38>
 8004c4e:	2302      	movs	r3, #2
 8004c50:	e00f      	b.n	8004c72 <HAL_UART_Receive_IT+0x58>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2201      	movs	r2, #1
 8004c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004c60:	88fb      	ldrh	r3, [r7, #6]
 8004c62:	461a      	mov	r2, r3
 8004c64:	68b9      	ldr	r1, [r7, #8]
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	f000 fa19 	bl	800509e <UART_Start_Receive_IT>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	e000      	b.n	8004c72 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004c70:	2302      	movs	r3, #2
  }
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
	...

08004c7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b08a      	sub	sp, #40	; 0x28
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	f003 030f 	and.w	r3, r3, #15
 8004caa:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10d      	bne.n	8004cce <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb4:	f003 0320 	and.w	r3, r3, #32
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d008      	beq.n	8004cce <HAL_UART_IRQHandler+0x52>
 8004cbc:	6a3b      	ldr	r3, [r7, #32]
 8004cbe:	f003 0320 	and.w	r3, r3, #32
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d003      	beq.n	8004cce <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 fac9 	bl	800525e <UART_Receive_IT>
      return;
 8004ccc:	e17b      	b.n	8004fc6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f000 80b1 	beq.w	8004e38 <HAL_UART_IRQHandler+0x1bc>
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	f003 0301 	and.w	r3, r3, #1
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d105      	bne.n	8004cec <HAL_UART_IRQHandler+0x70>
 8004ce0:	6a3b      	ldr	r3, [r7, #32]
 8004ce2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	f000 80a6 	beq.w	8004e38 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cee:	f003 0301 	and.w	r3, r3, #1
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00a      	beq.n	8004d0c <HAL_UART_IRQHandler+0x90>
 8004cf6:	6a3b      	ldr	r3, [r7, #32]
 8004cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d005      	beq.n	8004d0c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d04:	f043 0201 	orr.w	r2, r3, #1
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0e:	f003 0304 	and.w	r3, r3, #4
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00a      	beq.n	8004d2c <HAL_UART_IRQHandler+0xb0>
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d005      	beq.n	8004d2c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d24:	f043 0202 	orr.w	r2, r3, #2
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00a      	beq.n	8004d4c <HAL_UART_IRQHandler+0xd0>
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	f003 0301 	and.w	r3, r3, #1
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d005      	beq.n	8004d4c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d44:	f043 0204 	orr.w	r2, r3, #4
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4e:	f003 0308 	and.w	r3, r3, #8
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00f      	beq.n	8004d76 <HAL_UART_IRQHandler+0xfa>
 8004d56:	6a3b      	ldr	r3, [r7, #32]
 8004d58:	f003 0320 	and.w	r3, r3, #32
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d104      	bne.n	8004d6a <HAL_UART_IRQHandler+0xee>
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d005      	beq.n	8004d76 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6e:	f043 0208 	orr.w	r2, r3, #8
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	f000 811e 	beq.w	8004fbc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d82:	f003 0320 	and.w	r3, r3, #32
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d007      	beq.n	8004d9a <HAL_UART_IRQHandler+0x11e>
 8004d8a:	6a3b      	ldr	r3, [r7, #32]
 8004d8c:	f003 0320 	and.w	r3, r3, #32
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d002      	beq.n	8004d9a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 fa62 	bl	800525e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	695b      	ldr	r3, [r3, #20]
 8004da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	bf14      	ite	ne
 8004da8:	2301      	movne	r3, #1
 8004daa:	2300      	moveq	r3, #0
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db4:	f003 0308 	and.w	r3, r3, #8
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d102      	bne.n	8004dc2 <HAL_UART_IRQHandler+0x146>
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d031      	beq.n	8004e26 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f9a4 	bl	8005110 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d023      	beq.n	8004e1e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	695a      	ldr	r2, [r3, #20]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004de4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d013      	beq.n	8004e16 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df2:	4a76      	ldr	r2, [pc, #472]	; (8004fcc <HAL_UART_IRQHandler+0x350>)
 8004df4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7fd f8f0 	bl	8001fe0 <HAL_DMA_Abort_IT>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d016      	beq.n	8004e34 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e10:	4610      	mov	r0, r2
 8004e12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e14:	e00e      	b.n	8004e34 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f8e3 	bl	8004fe2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e1c:	e00a      	b.n	8004e34 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 f8df 	bl	8004fe2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e24:	e006      	b.n	8004e34 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 f8db 	bl	8004fe2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004e32:	e0c3      	b.n	8004fbc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e34:	bf00      	nop
    return;
 8004e36:	e0c1      	b.n	8004fbc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	f040 80a1 	bne.w	8004f84 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	f003 0310 	and.w	r3, r3, #16
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	f000 809b 	beq.w	8004f84 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004e4e:	6a3b      	ldr	r3, [r7, #32]
 8004e50:	f003 0310 	and.w	r3, r3, #16
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f000 8095 	beq.w	8004f84 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	60fb      	str	r3, [r7, #12]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	60fb      	str	r3, [r7, #12]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	60fb      	str	r3, [r7, #12]
 8004e6e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d04e      	beq.n	8004f1c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004e88:	8a3b      	ldrh	r3, [r7, #16]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	f000 8098 	beq.w	8004fc0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e94:	8a3a      	ldrh	r2, [r7, #16]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	f080 8092 	bcs.w	8004fc0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	8a3a      	ldrh	r2, [r7, #16]
 8004ea0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	2b20      	cmp	r3, #32
 8004eaa:	d02b      	beq.n	8004f04 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68da      	ldr	r2, [r3, #12]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004eba:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	695a      	ldr	r2, [r3, #20]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f022 0201 	bic.w	r2, r2, #1
 8004eca:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	695a      	ldr	r2, [r3, #20]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eda:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2220      	movs	r2, #32
 8004ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68da      	ldr	r2, [r3, #12]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f022 0210 	bic.w	r2, r2, #16
 8004ef8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7fd f833 	bl	8001f6a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	4619      	mov	r1, r3
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 f86d 	bl	8004ff4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004f1a:	e051      	b.n	8004fc0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d047      	beq.n	8004fc4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004f34:	8a7b      	ldrh	r3, [r7, #18]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d044      	beq.n	8004fc4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68da      	ldr	r2, [r3, #12]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004f48:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	695a      	ldr	r2, [r3, #20]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f022 0201 	bic.w	r2, r2, #1
 8004f58:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2220      	movs	r2, #32
 8004f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68da      	ldr	r2, [r3, #12]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f022 0210 	bic.w	r2, r2, #16
 8004f76:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f78:	8a7b      	ldrh	r3, [r7, #18]
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 f839 	bl	8004ff4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004f82:	e01f      	b.n	8004fc4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d008      	beq.n	8004fa0 <HAL_UART_IRQHandler+0x324>
 8004f8e:	6a3b      	ldr	r3, [r7, #32]
 8004f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d003      	beq.n	8004fa0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 f8f9 	bl	8005190 <UART_Transmit_IT>
    return;
 8004f9e:	e012      	b.n	8004fc6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00d      	beq.n	8004fc6 <HAL_UART_IRQHandler+0x34a>
 8004faa:	6a3b      	ldr	r3, [r7, #32]
 8004fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d008      	beq.n	8004fc6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 f93a 	bl	800522e <UART_EndTransmit_IT>
    return;
 8004fba:	e004      	b.n	8004fc6 <HAL_UART_IRQHandler+0x34a>
    return;
 8004fbc:	bf00      	nop
 8004fbe:	e002      	b.n	8004fc6 <HAL_UART_IRQHandler+0x34a>
      return;
 8004fc0:	bf00      	nop
 8004fc2:	e000      	b.n	8004fc6 <HAL_UART_IRQHandler+0x34a>
      return;
 8004fc4:	bf00      	nop
  }
}
 8004fc6:	3728      	adds	r7, #40	; 0x28
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	08005169 	.word	0x08005169

08004fd0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bc80      	pop	{r7}
 8004fe0:	4770      	bx	lr

08004fe2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b083      	sub	sp, #12
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004fea:	bf00      	nop
 8004fec:	370c      	adds	r7, #12
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bc80      	pop	{r7}
 8004ff2:	4770      	bx	lr

08004ff4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	bc80      	pop	{r7}
 8005008:	4770      	bx	lr

0800500a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800500a:	b580      	push	{r7, lr}
 800500c:	b084      	sub	sp, #16
 800500e:	af00      	add	r7, sp, #0
 8005010:	60f8      	str	r0, [r7, #12]
 8005012:	60b9      	str	r1, [r7, #8]
 8005014:	603b      	str	r3, [r7, #0]
 8005016:	4613      	mov	r3, r2
 8005018:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800501a:	e02c      	b.n	8005076 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005022:	d028      	beq.n	8005076 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d007      	beq.n	800503a <UART_WaitOnFlagUntilTimeout+0x30>
 800502a:	f7fc fe63 	bl	8001cf4 <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	69ba      	ldr	r2, [r7, #24]
 8005036:	429a      	cmp	r2, r3
 8005038:	d21d      	bcs.n	8005076 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68da      	ldr	r2, [r3, #12]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005048:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	695a      	ldr	r2, [r3, #20]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f022 0201 	bic.w	r2, r2, #1
 8005058:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2220      	movs	r2, #32
 800505e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2220      	movs	r2, #32
 8005066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e00f      	b.n	8005096 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	4013      	ands	r3, r2
 8005080:	68ba      	ldr	r2, [r7, #8]
 8005082:	429a      	cmp	r2, r3
 8005084:	bf0c      	ite	eq
 8005086:	2301      	moveq	r3, #1
 8005088:	2300      	movne	r3, #0
 800508a:	b2db      	uxtb	r3, r3
 800508c:	461a      	mov	r2, r3
 800508e:	79fb      	ldrb	r3, [r7, #7]
 8005090:	429a      	cmp	r2, r3
 8005092:	d0c3      	beq.n	800501c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3710      	adds	r7, #16
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800509e:	b480      	push	{r7}
 80050a0:	b085      	sub	sp, #20
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	60f8      	str	r0, [r7, #12]
 80050a6:	60b9      	str	r1, [r7, #8]
 80050a8:	4613      	mov	r3, r2
 80050aa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	68ba      	ldr	r2, [r7, #8]
 80050b0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	88fa      	ldrh	r2, [r7, #6]
 80050b6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	88fa      	ldrh	r2, [r7, #6]
 80050bc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2222      	movs	r2, #34	; 0x22
 80050c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68da      	ldr	r2, [r3, #12]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050e2:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	695a      	ldr	r2, [r3, #20]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f042 0201 	orr.w	r2, r2, #1
 80050f2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68da      	ldr	r2, [r3, #12]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f042 0220 	orr.w	r2, r2, #32
 8005102:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3714      	adds	r7, #20
 800510a:	46bd      	mov	sp, r7
 800510c:	bc80      	pop	{r7}
 800510e:	4770      	bx	lr

08005110 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68da      	ldr	r2, [r3, #12]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005126:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	695a      	ldr	r2, [r3, #20]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f022 0201 	bic.w	r2, r2, #1
 8005136:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513c:	2b01      	cmp	r3, #1
 800513e:	d107      	bne.n	8005150 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68da      	ldr	r2, [r3, #12]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f022 0210 	bic.w	r2, r2, #16
 800514e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2220      	movs	r2, #32
 8005154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800515e:	bf00      	nop
 8005160:	370c      	adds	r7, #12
 8005162:	46bd      	mov	sp, r7
 8005164:	bc80      	pop	{r7}
 8005166:	4770      	bx	lr

08005168 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005174:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f7ff ff2d 	bl	8004fe2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005188:	bf00      	nop
 800518a:	3710      	adds	r7, #16
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	2b21      	cmp	r3, #33	; 0x21
 80051a2:	d13e      	bne.n	8005222 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ac:	d114      	bne.n	80051d8 <UART_Transmit_IT+0x48>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d110      	bne.n	80051d8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	881b      	ldrh	r3, [r3, #0]
 80051c0:	461a      	mov	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051ca:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a1b      	ldr	r3, [r3, #32]
 80051d0:	1c9a      	adds	r2, r3, #2
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	621a      	str	r2, [r3, #32]
 80051d6:	e008      	b.n	80051ea <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a1b      	ldr	r3, [r3, #32]
 80051dc:	1c59      	adds	r1, r3, #1
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	6211      	str	r1, [r2, #32]
 80051e2:	781a      	ldrb	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	3b01      	subs	r3, #1
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	4619      	mov	r1, r3
 80051f8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10f      	bne.n	800521e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68da      	ldr	r2, [r3, #12]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800520c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68da      	ldr	r2, [r3, #12]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800521c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800521e:	2300      	movs	r3, #0
 8005220:	e000      	b.n	8005224 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005222:	2302      	movs	r3, #2
  }
}
 8005224:	4618      	mov	r0, r3
 8005226:	3714      	adds	r7, #20
 8005228:	46bd      	mov	sp, r7
 800522a:	bc80      	pop	{r7}
 800522c:	4770      	bx	lr

0800522e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b082      	sub	sp, #8
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68da      	ldr	r2, [r3, #12]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005244:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2220      	movs	r2, #32
 800524a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f7ff febe 	bl	8004fd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3708      	adds	r7, #8
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}

0800525e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800525e:	b580      	push	{r7, lr}
 8005260:	b086      	sub	sp, #24
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800526c:	b2db      	uxtb	r3, r3
 800526e:	2b22      	cmp	r3, #34	; 0x22
 8005270:	f040 8099 	bne.w	80053a6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800527c:	d117      	bne.n	80052ae <UART_Receive_IT+0x50>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d113      	bne.n	80052ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005286:	2300      	movs	r3, #0
 8005288:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800528e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	b29b      	uxth	r3, r3
 8005298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800529c:	b29a      	uxth	r2, r3
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a6:	1c9a      	adds	r2, r3, #2
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	629a      	str	r2, [r3, #40]	; 0x28
 80052ac:	e026      	b.n	80052fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80052b4:	2300      	movs	r3, #0
 80052b6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052c0:	d007      	beq.n	80052d2 <UART_Receive_IT+0x74>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d10a      	bne.n	80052e0 <UART_Receive_IT+0x82>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d106      	bne.n	80052e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	b2da      	uxtb	r2, r3
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	701a      	strb	r2, [r3, #0]
 80052de:	e008      	b.n	80052f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052ec:	b2da      	uxtb	r2, r3
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f6:	1c5a      	adds	r2, r3, #1
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005300:	b29b      	uxth	r3, r3
 8005302:	3b01      	subs	r3, #1
 8005304:	b29b      	uxth	r3, r3
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	4619      	mov	r1, r3
 800530a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800530c:	2b00      	cmp	r3, #0
 800530e:	d148      	bne.n	80053a2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68da      	ldr	r2, [r3, #12]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f022 0220 	bic.w	r2, r2, #32
 800531e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68da      	ldr	r2, [r3, #12]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800532e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	695a      	ldr	r2, [r3, #20]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f022 0201 	bic.w	r2, r2, #1
 800533e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2220      	movs	r2, #32
 8005344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534c:	2b01      	cmp	r3, #1
 800534e:	d123      	bne.n	8005398 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68da      	ldr	r2, [r3, #12]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f022 0210 	bic.w	r2, r2, #16
 8005364:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0310 	and.w	r3, r3, #16
 8005370:	2b10      	cmp	r3, #16
 8005372:	d10a      	bne.n	800538a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005374:	2300      	movs	r3, #0
 8005376:	60fb      	str	r3, [r7, #12]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	60fb      	str	r3, [r7, #12]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	60fb      	str	r3, [r7, #12]
 8005388:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800538e:	4619      	mov	r1, r3
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f7ff fe2f 	bl	8004ff4 <HAL_UARTEx_RxEventCallback>
 8005396:	e002      	b.n	800539e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f7fc f9b7 	bl	800170c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800539e:	2300      	movs	r3, #0
 80053a0:	e002      	b.n	80053a8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80053a2:	2300      	movs	r3, #0
 80053a4:	e000      	b.n	80053a8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80053a6:	2302      	movs	r3, #2
  }
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3718      	adds	r7, #24
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	68da      	ldr	r2, [r3, #12]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	430a      	orrs	r2, r1
 80053cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	689a      	ldr	r2, [r3, #8]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	431a      	orrs	r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	695b      	ldr	r3, [r3, #20]
 80053dc:	4313      	orrs	r3, r2
 80053de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80053ea:	f023 030c 	bic.w	r3, r3, #12
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	6812      	ldr	r2, [r2, #0]
 80053f2:	68b9      	ldr	r1, [r7, #8]
 80053f4:	430b      	orrs	r3, r1
 80053f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	699a      	ldr	r2, [r3, #24]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	430a      	orrs	r2, r1
 800540c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a2c      	ldr	r2, [pc, #176]	; (80054c4 <UART_SetConfig+0x114>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d103      	bne.n	8005420 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005418:	f7ff f88e 	bl	8004538 <HAL_RCC_GetPCLK2Freq>
 800541c:	60f8      	str	r0, [r7, #12]
 800541e:	e002      	b.n	8005426 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005420:	f7ff f876 	bl	8004510 <HAL_RCC_GetPCLK1Freq>
 8005424:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	4613      	mov	r3, r2
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	4413      	add	r3, r2
 800542e:	009a      	lsls	r2, r3, #2
 8005430:	441a      	add	r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	fbb2 f3f3 	udiv	r3, r2, r3
 800543c:	4a22      	ldr	r2, [pc, #136]	; (80054c8 <UART_SetConfig+0x118>)
 800543e:	fba2 2303 	umull	r2, r3, r2, r3
 8005442:	095b      	lsrs	r3, r3, #5
 8005444:	0119      	lsls	r1, r3, #4
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	4613      	mov	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4413      	add	r3, r2
 800544e:	009a      	lsls	r2, r3, #2
 8005450:	441a      	add	r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	fbb2 f2f3 	udiv	r2, r2, r3
 800545c:	4b1a      	ldr	r3, [pc, #104]	; (80054c8 <UART_SetConfig+0x118>)
 800545e:	fba3 0302 	umull	r0, r3, r3, r2
 8005462:	095b      	lsrs	r3, r3, #5
 8005464:	2064      	movs	r0, #100	; 0x64
 8005466:	fb00 f303 	mul.w	r3, r0, r3
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	011b      	lsls	r3, r3, #4
 800546e:	3332      	adds	r3, #50	; 0x32
 8005470:	4a15      	ldr	r2, [pc, #84]	; (80054c8 <UART_SetConfig+0x118>)
 8005472:	fba2 2303 	umull	r2, r3, r2, r3
 8005476:	095b      	lsrs	r3, r3, #5
 8005478:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800547c:	4419      	add	r1, r3
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	4613      	mov	r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	4413      	add	r3, r2
 8005486:	009a      	lsls	r2, r3, #2
 8005488:	441a      	add	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	fbb2 f2f3 	udiv	r2, r2, r3
 8005494:	4b0c      	ldr	r3, [pc, #48]	; (80054c8 <UART_SetConfig+0x118>)
 8005496:	fba3 0302 	umull	r0, r3, r3, r2
 800549a:	095b      	lsrs	r3, r3, #5
 800549c:	2064      	movs	r0, #100	; 0x64
 800549e:	fb00 f303 	mul.w	r3, r0, r3
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	011b      	lsls	r3, r3, #4
 80054a6:	3332      	adds	r3, #50	; 0x32
 80054a8:	4a07      	ldr	r2, [pc, #28]	; (80054c8 <UART_SetConfig+0x118>)
 80054aa:	fba2 2303 	umull	r2, r3, r2, r3
 80054ae:	095b      	lsrs	r3, r3, #5
 80054b0:	f003 020f 	and.w	r2, r3, #15
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	440a      	add	r2, r1
 80054ba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80054bc:	bf00      	nop
 80054be:	3710      	adds	r7, #16
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	40013800 	.word	0x40013800
 80054c8:	51eb851f 	.word	0x51eb851f

080054cc <__errno>:
 80054cc:	4b01      	ldr	r3, [pc, #4]	; (80054d4 <__errno+0x8>)
 80054ce:	6818      	ldr	r0, [r3, #0]
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	2000000c 	.word	0x2000000c

080054d8 <__libc_init_array>:
 80054d8:	b570      	push	{r4, r5, r6, lr}
 80054da:	2600      	movs	r6, #0
 80054dc:	4d0c      	ldr	r5, [pc, #48]	; (8005510 <__libc_init_array+0x38>)
 80054de:	4c0d      	ldr	r4, [pc, #52]	; (8005514 <__libc_init_array+0x3c>)
 80054e0:	1b64      	subs	r4, r4, r5
 80054e2:	10a4      	asrs	r4, r4, #2
 80054e4:	42a6      	cmp	r6, r4
 80054e6:	d109      	bne.n	80054fc <__libc_init_array+0x24>
 80054e8:	f002 feba 	bl	8008260 <_init>
 80054ec:	2600      	movs	r6, #0
 80054ee:	4d0a      	ldr	r5, [pc, #40]	; (8005518 <__libc_init_array+0x40>)
 80054f0:	4c0a      	ldr	r4, [pc, #40]	; (800551c <__libc_init_array+0x44>)
 80054f2:	1b64      	subs	r4, r4, r5
 80054f4:	10a4      	asrs	r4, r4, #2
 80054f6:	42a6      	cmp	r6, r4
 80054f8:	d105      	bne.n	8005506 <__libc_init_array+0x2e>
 80054fa:	bd70      	pop	{r4, r5, r6, pc}
 80054fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005500:	4798      	blx	r3
 8005502:	3601      	adds	r6, #1
 8005504:	e7ee      	b.n	80054e4 <__libc_init_array+0xc>
 8005506:	f855 3b04 	ldr.w	r3, [r5], #4
 800550a:	4798      	blx	r3
 800550c:	3601      	adds	r6, #1
 800550e:	e7f2      	b.n	80054f6 <__libc_init_array+0x1e>
 8005510:	08008704 	.word	0x08008704
 8005514:	08008704 	.word	0x08008704
 8005518:	08008704 	.word	0x08008704
 800551c:	08008708 	.word	0x08008708

08005520 <memcpy>:
 8005520:	440a      	add	r2, r1
 8005522:	4291      	cmp	r1, r2
 8005524:	f100 33ff 	add.w	r3, r0, #4294967295
 8005528:	d100      	bne.n	800552c <memcpy+0xc>
 800552a:	4770      	bx	lr
 800552c:	b510      	push	{r4, lr}
 800552e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005532:	4291      	cmp	r1, r2
 8005534:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005538:	d1f9      	bne.n	800552e <memcpy+0xe>
 800553a:	bd10      	pop	{r4, pc}

0800553c <memset>:
 800553c:	4603      	mov	r3, r0
 800553e:	4402      	add	r2, r0
 8005540:	4293      	cmp	r3, r2
 8005542:	d100      	bne.n	8005546 <memset+0xa>
 8005544:	4770      	bx	lr
 8005546:	f803 1b01 	strb.w	r1, [r3], #1
 800554a:	e7f9      	b.n	8005540 <memset+0x4>

0800554c <__cvt>:
 800554c:	2b00      	cmp	r3, #0
 800554e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005552:	461f      	mov	r7, r3
 8005554:	bfbb      	ittet	lt
 8005556:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800555a:	461f      	movlt	r7, r3
 800555c:	2300      	movge	r3, #0
 800555e:	232d      	movlt	r3, #45	; 0x2d
 8005560:	b088      	sub	sp, #32
 8005562:	4614      	mov	r4, r2
 8005564:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005566:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005568:	7013      	strb	r3, [r2, #0]
 800556a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800556c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005570:	f023 0820 	bic.w	r8, r3, #32
 8005574:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005578:	d005      	beq.n	8005586 <__cvt+0x3a>
 800557a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800557e:	d100      	bne.n	8005582 <__cvt+0x36>
 8005580:	3501      	adds	r5, #1
 8005582:	2302      	movs	r3, #2
 8005584:	e000      	b.n	8005588 <__cvt+0x3c>
 8005586:	2303      	movs	r3, #3
 8005588:	aa07      	add	r2, sp, #28
 800558a:	9204      	str	r2, [sp, #16]
 800558c:	aa06      	add	r2, sp, #24
 800558e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005592:	e9cd 3500 	strd	r3, r5, [sp]
 8005596:	4622      	mov	r2, r4
 8005598:	463b      	mov	r3, r7
 800559a:	f000 fce5 	bl	8005f68 <_dtoa_r>
 800559e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80055a2:	4606      	mov	r6, r0
 80055a4:	d102      	bne.n	80055ac <__cvt+0x60>
 80055a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80055a8:	07db      	lsls	r3, r3, #31
 80055aa:	d522      	bpl.n	80055f2 <__cvt+0xa6>
 80055ac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80055b0:	eb06 0905 	add.w	r9, r6, r5
 80055b4:	d110      	bne.n	80055d8 <__cvt+0x8c>
 80055b6:	7833      	ldrb	r3, [r6, #0]
 80055b8:	2b30      	cmp	r3, #48	; 0x30
 80055ba:	d10a      	bne.n	80055d2 <__cvt+0x86>
 80055bc:	2200      	movs	r2, #0
 80055be:	2300      	movs	r3, #0
 80055c0:	4620      	mov	r0, r4
 80055c2:	4639      	mov	r1, r7
 80055c4:	f7fb fa5c 	bl	8000a80 <__aeabi_dcmpeq>
 80055c8:	b918      	cbnz	r0, 80055d2 <__cvt+0x86>
 80055ca:	f1c5 0501 	rsb	r5, r5, #1
 80055ce:	f8ca 5000 	str.w	r5, [sl]
 80055d2:	f8da 3000 	ldr.w	r3, [sl]
 80055d6:	4499      	add	r9, r3
 80055d8:	2200      	movs	r2, #0
 80055da:	2300      	movs	r3, #0
 80055dc:	4620      	mov	r0, r4
 80055de:	4639      	mov	r1, r7
 80055e0:	f7fb fa4e 	bl	8000a80 <__aeabi_dcmpeq>
 80055e4:	b108      	cbz	r0, 80055ea <__cvt+0x9e>
 80055e6:	f8cd 901c 	str.w	r9, [sp, #28]
 80055ea:	2230      	movs	r2, #48	; 0x30
 80055ec:	9b07      	ldr	r3, [sp, #28]
 80055ee:	454b      	cmp	r3, r9
 80055f0:	d307      	bcc.n	8005602 <__cvt+0xb6>
 80055f2:	4630      	mov	r0, r6
 80055f4:	9b07      	ldr	r3, [sp, #28]
 80055f6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80055f8:	1b9b      	subs	r3, r3, r6
 80055fa:	6013      	str	r3, [r2, #0]
 80055fc:	b008      	add	sp, #32
 80055fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005602:	1c59      	adds	r1, r3, #1
 8005604:	9107      	str	r1, [sp, #28]
 8005606:	701a      	strb	r2, [r3, #0]
 8005608:	e7f0      	b.n	80055ec <__cvt+0xa0>

0800560a <__exponent>:
 800560a:	4603      	mov	r3, r0
 800560c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800560e:	2900      	cmp	r1, #0
 8005610:	f803 2b02 	strb.w	r2, [r3], #2
 8005614:	bfb6      	itet	lt
 8005616:	222d      	movlt	r2, #45	; 0x2d
 8005618:	222b      	movge	r2, #43	; 0x2b
 800561a:	4249      	neglt	r1, r1
 800561c:	2909      	cmp	r1, #9
 800561e:	7042      	strb	r2, [r0, #1]
 8005620:	dd2b      	ble.n	800567a <__exponent+0x70>
 8005622:	f10d 0407 	add.w	r4, sp, #7
 8005626:	46a4      	mov	ip, r4
 8005628:	270a      	movs	r7, #10
 800562a:	fb91 f6f7 	sdiv	r6, r1, r7
 800562e:	460a      	mov	r2, r1
 8005630:	46a6      	mov	lr, r4
 8005632:	fb07 1516 	mls	r5, r7, r6, r1
 8005636:	2a63      	cmp	r2, #99	; 0x63
 8005638:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800563c:	4631      	mov	r1, r6
 800563e:	f104 34ff 	add.w	r4, r4, #4294967295
 8005642:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005646:	dcf0      	bgt.n	800562a <__exponent+0x20>
 8005648:	3130      	adds	r1, #48	; 0x30
 800564a:	f1ae 0502 	sub.w	r5, lr, #2
 800564e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005652:	4629      	mov	r1, r5
 8005654:	1c44      	adds	r4, r0, #1
 8005656:	4561      	cmp	r1, ip
 8005658:	d30a      	bcc.n	8005670 <__exponent+0x66>
 800565a:	f10d 0209 	add.w	r2, sp, #9
 800565e:	eba2 020e 	sub.w	r2, r2, lr
 8005662:	4565      	cmp	r5, ip
 8005664:	bf88      	it	hi
 8005666:	2200      	movhi	r2, #0
 8005668:	4413      	add	r3, r2
 800566a:	1a18      	subs	r0, r3, r0
 800566c:	b003      	add	sp, #12
 800566e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005670:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005674:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005678:	e7ed      	b.n	8005656 <__exponent+0x4c>
 800567a:	2330      	movs	r3, #48	; 0x30
 800567c:	3130      	adds	r1, #48	; 0x30
 800567e:	7083      	strb	r3, [r0, #2]
 8005680:	70c1      	strb	r1, [r0, #3]
 8005682:	1d03      	adds	r3, r0, #4
 8005684:	e7f1      	b.n	800566a <__exponent+0x60>
	...

08005688 <_printf_float>:
 8005688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800568c:	b091      	sub	sp, #68	; 0x44
 800568e:	460c      	mov	r4, r1
 8005690:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005694:	4616      	mov	r6, r2
 8005696:	461f      	mov	r7, r3
 8005698:	4605      	mov	r5, r0
 800569a:	f001 fa53 	bl	8006b44 <_localeconv_r>
 800569e:	6803      	ldr	r3, [r0, #0]
 80056a0:	4618      	mov	r0, r3
 80056a2:	9309      	str	r3, [sp, #36]	; 0x24
 80056a4:	f7fa fdc0 	bl	8000228 <strlen>
 80056a8:	2300      	movs	r3, #0
 80056aa:	930e      	str	r3, [sp, #56]	; 0x38
 80056ac:	f8d8 3000 	ldr.w	r3, [r8]
 80056b0:	900a      	str	r0, [sp, #40]	; 0x28
 80056b2:	3307      	adds	r3, #7
 80056b4:	f023 0307 	bic.w	r3, r3, #7
 80056b8:	f103 0208 	add.w	r2, r3, #8
 80056bc:	f894 9018 	ldrb.w	r9, [r4, #24]
 80056c0:	f8d4 b000 	ldr.w	fp, [r4]
 80056c4:	f8c8 2000 	str.w	r2, [r8]
 80056c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056cc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80056d0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80056d4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80056d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80056da:	f04f 32ff 	mov.w	r2, #4294967295
 80056de:	4640      	mov	r0, r8
 80056e0:	4b9c      	ldr	r3, [pc, #624]	; (8005954 <_printf_float+0x2cc>)
 80056e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80056e4:	f7fb f9fe 	bl	8000ae4 <__aeabi_dcmpun>
 80056e8:	bb70      	cbnz	r0, 8005748 <_printf_float+0xc0>
 80056ea:	f04f 32ff 	mov.w	r2, #4294967295
 80056ee:	4640      	mov	r0, r8
 80056f0:	4b98      	ldr	r3, [pc, #608]	; (8005954 <_printf_float+0x2cc>)
 80056f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80056f4:	f7fb f9d8 	bl	8000aa8 <__aeabi_dcmple>
 80056f8:	bb30      	cbnz	r0, 8005748 <_printf_float+0xc0>
 80056fa:	2200      	movs	r2, #0
 80056fc:	2300      	movs	r3, #0
 80056fe:	4640      	mov	r0, r8
 8005700:	4651      	mov	r1, sl
 8005702:	f7fb f9c7 	bl	8000a94 <__aeabi_dcmplt>
 8005706:	b110      	cbz	r0, 800570e <_printf_float+0x86>
 8005708:	232d      	movs	r3, #45	; 0x2d
 800570a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800570e:	4b92      	ldr	r3, [pc, #584]	; (8005958 <_printf_float+0x2d0>)
 8005710:	4892      	ldr	r0, [pc, #584]	; (800595c <_printf_float+0x2d4>)
 8005712:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005716:	bf94      	ite	ls
 8005718:	4698      	movls	r8, r3
 800571a:	4680      	movhi	r8, r0
 800571c:	2303      	movs	r3, #3
 800571e:	f04f 0a00 	mov.w	sl, #0
 8005722:	6123      	str	r3, [r4, #16]
 8005724:	f02b 0304 	bic.w	r3, fp, #4
 8005728:	6023      	str	r3, [r4, #0]
 800572a:	4633      	mov	r3, r6
 800572c:	4621      	mov	r1, r4
 800572e:	4628      	mov	r0, r5
 8005730:	9700      	str	r7, [sp, #0]
 8005732:	aa0f      	add	r2, sp, #60	; 0x3c
 8005734:	f000 f9d4 	bl	8005ae0 <_printf_common>
 8005738:	3001      	adds	r0, #1
 800573a:	f040 8090 	bne.w	800585e <_printf_float+0x1d6>
 800573e:	f04f 30ff 	mov.w	r0, #4294967295
 8005742:	b011      	add	sp, #68	; 0x44
 8005744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005748:	4642      	mov	r2, r8
 800574a:	4653      	mov	r3, sl
 800574c:	4640      	mov	r0, r8
 800574e:	4651      	mov	r1, sl
 8005750:	f7fb f9c8 	bl	8000ae4 <__aeabi_dcmpun>
 8005754:	b148      	cbz	r0, 800576a <_printf_float+0xe2>
 8005756:	f1ba 0f00 	cmp.w	sl, #0
 800575a:	bfb8      	it	lt
 800575c:	232d      	movlt	r3, #45	; 0x2d
 800575e:	4880      	ldr	r0, [pc, #512]	; (8005960 <_printf_float+0x2d8>)
 8005760:	bfb8      	it	lt
 8005762:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005766:	4b7f      	ldr	r3, [pc, #508]	; (8005964 <_printf_float+0x2dc>)
 8005768:	e7d3      	b.n	8005712 <_printf_float+0x8a>
 800576a:	6863      	ldr	r3, [r4, #4]
 800576c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005770:	1c5a      	adds	r2, r3, #1
 8005772:	d142      	bne.n	80057fa <_printf_float+0x172>
 8005774:	2306      	movs	r3, #6
 8005776:	6063      	str	r3, [r4, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	9206      	str	r2, [sp, #24]
 800577c:	aa0e      	add	r2, sp, #56	; 0x38
 800577e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005782:	aa0d      	add	r2, sp, #52	; 0x34
 8005784:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005788:	9203      	str	r2, [sp, #12]
 800578a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800578e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005792:	6023      	str	r3, [r4, #0]
 8005794:	6863      	ldr	r3, [r4, #4]
 8005796:	4642      	mov	r2, r8
 8005798:	9300      	str	r3, [sp, #0]
 800579a:	4628      	mov	r0, r5
 800579c:	4653      	mov	r3, sl
 800579e:	910b      	str	r1, [sp, #44]	; 0x2c
 80057a0:	f7ff fed4 	bl	800554c <__cvt>
 80057a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80057a6:	4680      	mov	r8, r0
 80057a8:	2947      	cmp	r1, #71	; 0x47
 80057aa:	990d      	ldr	r1, [sp, #52]	; 0x34
 80057ac:	d108      	bne.n	80057c0 <_printf_float+0x138>
 80057ae:	1cc8      	adds	r0, r1, #3
 80057b0:	db02      	blt.n	80057b8 <_printf_float+0x130>
 80057b2:	6863      	ldr	r3, [r4, #4]
 80057b4:	4299      	cmp	r1, r3
 80057b6:	dd40      	ble.n	800583a <_printf_float+0x1b2>
 80057b8:	f1a9 0902 	sub.w	r9, r9, #2
 80057bc:	fa5f f989 	uxtb.w	r9, r9
 80057c0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80057c4:	d81f      	bhi.n	8005806 <_printf_float+0x17e>
 80057c6:	464a      	mov	r2, r9
 80057c8:	3901      	subs	r1, #1
 80057ca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80057ce:	910d      	str	r1, [sp, #52]	; 0x34
 80057d0:	f7ff ff1b 	bl	800560a <__exponent>
 80057d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80057d6:	4682      	mov	sl, r0
 80057d8:	1813      	adds	r3, r2, r0
 80057da:	2a01      	cmp	r2, #1
 80057dc:	6123      	str	r3, [r4, #16]
 80057de:	dc02      	bgt.n	80057e6 <_printf_float+0x15e>
 80057e0:	6822      	ldr	r2, [r4, #0]
 80057e2:	07d2      	lsls	r2, r2, #31
 80057e4:	d501      	bpl.n	80057ea <_printf_float+0x162>
 80057e6:	3301      	adds	r3, #1
 80057e8:	6123      	str	r3, [r4, #16]
 80057ea:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d09b      	beq.n	800572a <_printf_float+0xa2>
 80057f2:	232d      	movs	r3, #45	; 0x2d
 80057f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057f8:	e797      	b.n	800572a <_printf_float+0xa2>
 80057fa:	2947      	cmp	r1, #71	; 0x47
 80057fc:	d1bc      	bne.n	8005778 <_printf_float+0xf0>
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1ba      	bne.n	8005778 <_printf_float+0xf0>
 8005802:	2301      	movs	r3, #1
 8005804:	e7b7      	b.n	8005776 <_printf_float+0xee>
 8005806:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800580a:	d118      	bne.n	800583e <_printf_float+0x1b6>
 800580c:	2900      	cmp	r1, #0
 800580e:	6863      	ldr	r3, [r4, #4]
 8005810:	dd0b      	ble.n	800582a <_printf_float+0x1a2>
 8005812:	6121      	str	r1, [r4, #16]
 8005814:	b913      	cbnz	r3, 800581c <_printf_float+0x194>
 8005816:	6822      	ldr	r2, [r4, #0]
 8005818:	07d0      	lsls	r0, r2, #31
 800581a:	d502      	bpl.n	8005822 <_printf_float+0x19a>
 800581c:	3301      	adds	r3, #1
 800581e:	440b      	add	r3, r1
 8005820:	6123      	str	r3, [r4, #16]
 8005822:	f04f 0a00 	mov.w	sl, #0
 8005826:	65a1      	str	r1, [r4, #88]	; 0x58
 8005828:	e7df      	b.n	80057ea <_printf_float+0x162>
 800582a:	b913      	cbnz	r3, 8005832 <_printf_float+0x1aa>
 800582c:	6822      	ldr	r2, [r4, #0]
 800582e:	07d2      	lsls	r2, r2, #31
 8005830:	d501      	bpl.n	8005836 <_printf_float+0x1ae>
 8005832:	3302      	adds	r3, #2
 8005834:	e7f4      	b.n	8005820 <_printf_float+0x198>
 8005836:	2301      	movs	r3, #1
 8005838:	e7f2      	b.n	8005820 <_printf_float+0x198>
 800583a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800583e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005840:	4299      	cmp	r1, r3
 8005842:	db05      	blt.n	8005850 <_printf_float+0x1c8>
 8005844:	6823      	ldr	r3, [r4, #0]
 8005846:	6121      	str	r1, [r4, #16]
 8005848:	07d8      	lsls	r0, r3, #31
 800584a:	d5ea      	bpl.n	8005822 <_printf_float+0x19a>
 800584c:	1c4b      	adds	r3, r1, #1
 800584e:	e7e7      	b.n	8005820 <_printf_float+0x198>
 8005850:	2900      	cmp	r1, #0
 8005852:	bfcc      	ite	gt
 8005854:	2201      	movgt	r2, #1
 8005856:	f1c1 0202 	rsble	r2, r1, #2
 800585a:	4413      	add	r3, r2
 800585c:	e7e0      	b.n	8005820 <_printf_float+0x198>
 800585e:	6823      	ldr	r3, [r4, #0]
 8005860:	055a      	lsls	r2, r3, #21
 8005862:	d407      	bmi.n	8005874 <_printf_float+0x1ec>
 8005864:	6923      	ldr	r3, [r4, #16]
 8005866:	4642      	mov	r2, r8
 8005868:	4631      	mov	r1, r6
 800586a:	4628      	mov	r0, r5
 800586c:	47b8      	blx	r7
 800586e:	3001      	adds	r0, #1
 8005870:	d12b      	bne.n	80058ca <_printf_float+0x242>
 8005872:	e764      	b.n	800573e <_printf_float+0xb6>
 8005874:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005878:	f240 80dd 	bls.w	8005a36 <_printf_float+0x3ae>
 800587c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005880:	2200      	movs	r2, #0
 8005882:	2300      	movs	r3, #0
 8005884:	f7fb f8fc 	bl	8000a80 <__aeabi_dcmpeq>
 8005888:	2800      	cmp	r0, #0
 800588a:	d033      	beq.n	80058f4 <_printf_float+0x26c>
 800588c:	2301      	movs	r3, #1
 800588e:	4631      	mov	r1, r6
 8005890:	4628      	mov	r0, r5
 8005892:	4a35      	ldr	r2, [pc, #212]	; (8005968 <_printf_float+0x2e0>)
 8005894:	47b8      	blx	r7
 8005896:	3001      	adds	r0, #1
 8005898:	f43f af51 	beq.w	800573e <_printf_float+0xb6>
 800589c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80058a0:	429a      	cmp	r2, r3
 80058a2:	db02      	blt.n	80058aa <_printf_float+0x222>
 80058a4:	6823      	ldr	r3, [r4, #0]
 80058a6:	07d8      	lsls	r0, r3, #31
 80058a8:	d50f      	bpl.n	80058ca <_printf_float+0x242>
 80058aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058ae:	4631      	mov	r1, r6
 80058b0:	4628      	mov	r0, r5
 80058b2:	47b8      	blx	r7
 80058b4:	3001      	adds	r0, #1
 80058b6:	f43f af42 	beq.w	800573e <_printf_float+0xb6>
 80058ba:	f04f 0800 	mov.w	r8, #0
 80058be:	f104 091a 	add.w	r9, r4, #26
 80058c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058c4:	3b01      	subs	r3, #1
 80058c6:	4543      	cmp	r3, r8
 80058c8:	dc09      	bgt.n	80058de <_printf_float+0x256>
 80058ca:	6823      	ldr	r3, [r4, #0]
 80058cc:	079b      	lsls	r3, r3, #30
 80058ce:	f100 8102 	bmi.w	8005ad6 <_printf_float+0x44e>
 80058d2:	68e0      	ldr	r0, [r4, #12]
 80058d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80058d6:	4298      	cmp	r0, r3
 80058d8:	bfb8      	it	lt
 80058da:	4618      	movlt	r0, r3
 80058dc:	e731      	b.n	8005742 <_printf_float+0xba>
 80058de:	2301      	movs	r3, #1
 80058e0:	464a      	mov	r2, r9
 80058e2:	4631      	mov	r1, r6
 80058e4:	4628      	mov	r0, r5
 80058e6:	47b8      	blx	r7
 80058e8:	3001      	adds	r0, #1
 80058ea:	f43f af28 	beq.w	800573e <_printf_float+0xb6>
 80058ee:	f108 0801 	add.w	r8, r8, #1
 80058f2:	e7e6      	b.n	80058c2 <_printf_float+0x23a>
 80058f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	dc38      	bgt.n	800596c <_printf_float+0x2e4>
 80058fa:	2301      	movs	r3, #1
 80058fc:	4631      	mov	r1, r6
 80058fe:	4628      	mov	r0, r5
 8005900:	4a19      	ldr	r2, [pc, #100]	; (8005968 <_printf_float+0x2e0>)
 8005902:	47b8      	blx	r7
 8005904:	3001      	adds	r0, #1
 8005906:	f43f af1a 	beq.w	800573e <_printf_float+0xb6>
 800590a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800590e:	4313      	orrs	r3, r2
 8005910:	d102      	bne.n	8005918 <_printf_float+0x290>
 8005912:	6823      	ldr	r3, [r4, #0]
 8005914:	07d9      	lsls	r1, r3, #31
 8005916:	d5d8      	bpl.n	80058ca <_printf_float+0x242>
 8005918:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800591c:	4631      	mov	r1, r6
 800591e:	4628      	mov	r0, r5
 8005920:	47b8      	blx	r7
 8005922:	3001      	adds	r0, #1
 8005924:	f43f af0b 	beq.w	800573e <_printf_float+0xb6>
 8005928:	f04f 0900 	mov.w	r9, #0
 800592c:	f104 0a1a 	add.w	sl, r4, #26
 8005930:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005932:	425b      	negs	r3, r3
 8005934:	454b      	cmp	r3, r9
 8005936:	dc01      	bgt.n	800593c <_printf_float+0x2b4>
 8005938:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800593a:	e794      	b.n	8005866 <_printf_float+0x1de>
 800593c:	2301      	movs	r3, #1
 800593e:	4652      	mov	r2, sl
 8005940:	4631      	mov	r1, r6
 8005942:	4628      	mov	r0, r5
 8005944:	47b8      	blx	r7
 8005946:	3001      	adds	r0, #1
 8005948:	f43f aef9 	beq.w	800573e <_printf_float+0xb6>
 800594c:	f109 0901 	add.w	r9, r9, #1
 8005950:	e7ee      	b.n	8005930 <_printf_float+0x2a8>
 8005952:	bf00      	nop
 8005954:	7fefffff 	.word	0x7fefffff
 8005958:	08008320 	.word	0x08008320
 800595c:	08008324 	.word	0x08008324
 8005960:	0800832c 	.word	0x0800832c
 8005964:	08008328 	.word	0x08008328
 8005968:	08008330 	.word	0x08008330
 800596c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800596e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005970:	429a      	cmp	r2, r3
 8005972:	bfa8      	it	ge
 8005974:	461a      	movge	r2, r3
 8005976:	2a00      	cmp	r2, #0
 8005978:	4691      	mov	r9, r2
 800597a:	dc37      	bgt.n	80059ec <_printf_float+0x364>
 800597c:	f04f 0b00 	mov.w	fp, #0
 8005980:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005984:	f104 021a 	add.w	r2, r4, #26
 8005988:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800598c:	ebaa 0309 	sub.w	r3, sl, r9
 8005990:	455b      	cmp	r3, fp
 8005992:	dc33      	bgt.n	80059fc <_printf_float+0x374>
 8005994:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005998:	429a      	cmp	r2, r3
 800599a:	db3b      	blt.n	8005a14 <_printf_float+0x38c>
 800599c:	6823      	ldr	r3, [r4, #0]
 800599e:	07da      	lsls	r2, r3, #31
 80059a0:	d438      	bmi.n	8005a14 <_printf_float+0x38c>
 80059a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80059a4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80059a6:	eba2 030a 	sub.w	r3, r2, sl
 80059aa:	eba2 0901 	sub.w	r9, r2, r1
 80059ae:	4599      	cmp	r9, r3
 80059b0:	bfa8      	it	ge
 80059b2:	4699      	movge	r9, r3
 80059b4:	f1b9 0f00 	cmp.w	r9, #0
 80059b8:	dc34      	bgt.n	8005a24 <_printf_float+0x39c>
 80059ba:	f04f 0800 	mov.w	r8, #0
 80059be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80059c2:	f104 0a1a 	add.w	sl, r4, #26
 80059c6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80059ca:	1a9b      	subs	r3, r3, r2
 80059cc:	eba3 0309 	sub.w	r3, r3, r9
 80059d0:	4543      	cmp	r3, r8
 80059d2:	f77f af7a 	ble.w	80058ca <_printf_float+0x242>
 80059d6:	2301      	movs	r3, #1
 80059d8:	4652      	mov	r2, sl
 80059da:	4631      	mov	r1, r6
 80059dc:	4628      	mov	r0, r5
 80059de:	47b8      	blx	r7
 80059e0:	3001      	adds	r0, #1
 80059e2:	f43f aeac 	beq.w	800573e <_printf_float+0xb6>
 80059e6:	f108 0801 	add.w	r8, r8, #1
 80059ea:	e7ec      	b.n	80059c6 <_printf_float+0x33e>
 80059ec:	4613      	mov	r3, r2
 80059ee:	4631      	mov	r1, r6
 80059f0:	4642      	mov	r2, r8
 80059f2:	4628      	mov	r0, r5
 80059f4:	47b8      	blx	r7
 80059f6:	3001      	adds	r0, #1
 80059f8:	d1c0      	bne.n	800597c <_printf_float+0x2f4>
 80059fa:	e6a0      	b.n	800573e <_printf_float+0xb6>
 80059fc:	2301      	movs	r3, #1
 80059fe:	4631      	mov	r1, r6
 8005a00:	4628      	mov	r0, r5
 8005a02:	920b      	str	r2, [sp, #44]	; 0x2c
 8005a04:	47b8      	blx	r7
 8005a06:	3001      	adds	r0, #1
 8005a08:	f43f ae99 	beq.w	800573e <_printf_float+0xb6>
 8005a0c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005a0e:	f10b 0b01 	add.w	fp, fp, #1
 8005a12:	e7b9      	b.n	8005988 <_printf_float+0x300>
 8005a14:	4631      	mov	r1, r6
 8005a16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a1a:	4628      	mov	r0, r5
 8005a1c:	47b8      	blx	r7
 8005a1e:	3001      	adds	r0, #1
 8005a20:	d1bf      	bne.n	80059a2 <_printf_float+0x31a>
 8005a22:	e68c      	b.n	800573e <_printf_float+0xb6>
 8005a24:	464b      	mov	r3, r9
 8005a26:	4631      	mov	r1, r6
 8005a28:	4628      	mov	r0, r5
 8005a2a:	eb08 020a 	add.w	r2, r8, sl
 8005a2e:	47b8      	blx	r7
 8005a30:	3001      	adds	r0, #1
 8005a32:	d1c2      	bne.n	80059ba <_printf_float+0x332>
 8005a34:	e683      	b.n	800573e <_printf_float+0xb6>
 8005a36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a38:	2a01      	cmp	r2, #1
 8005a3a:	dc01      	bgt.n	8005a40 <_printf_float+0x3b8>
 8005a3c:	07db      	lsls	r3, r3, #31
 8005a3e:	d537      	bpl.n	8005ab0 <_printf_float+0x428>
 8005a40:	2301      	movs	r3, #1
 8005a42:	4642      	mov	r2, r8
 8005a44:	4631      	mov	r1, r6
 8005a46:	4628      	mov	r0, r5
 8005a48:	47b8      	blx	r7
 8005a4a:	3001      	adds	r0, #1
 8005a4c:	f43f ae77 	beq.w	800573e <_printf_float+0xb6>
 8005a50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a54:	4631      	mov	r1, r6
 8005a56:	4628      	mov	r0, r5
 8005a58:	47b8      	blx	r7
 8005a5a:	3001      	adds	r0, #1
 8005a5c:	f43f ae6f 	beq.w	800573e <_printf_float+0xb6>
 8005a60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a64:	2200      	movs	r2, #0
 8005a66:	2300      	movs	r3, #0
 8005a68:	f7fb f80a 	bl	8000a80 <__aeabi_dcmpeq>
 8005a6c:	b9d8      	cbnz	r0, 8005aa6 <_printf_float+0x41e>
 8005a6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a70:	f108 0201 	add.w	r2, r8, #1
 8005a74:	3b01      	subs	r3, #1
 8005a76:	4631      	mov	r1, r6
 8005a78:	4628      	mov	r0, r5
 8005a7a:	47b8      	blx	r7
 8005a7c:	3001      	adds	r0, #1
 8005a7e:	d10e      	bne.n	8005a9e <_printf_float+0x416>
 8005a80:	e65d      	b.n	800573e <_printf_float+0xb6>
 8005a82:	2301      	movs	r3, #1
 8005a84:	464a      	mov	r2, r9
 8005a86:	4631      	mov	r1, r6
 8005a88:	4628      	mov	r0, r5
 8005a8a:	47b8      	blx	r7
 8005a8c:	3001      	adds	r0, #1
 8005a8e:	f43f ae56 	beq.w	800573e <_printf_float+0xb6>
 8005a92:	f108 0801 	add.w	r8, r8, #1
 8005a96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	4543      	cmp	r3, r8
 8005a9c:	dcf1      	bgt.n	8005a82 <_printf_float+0x3fa>
 8005a9e:	4653      	mov	r3, sl
 8005aa0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005aa4:	e6e0      	b.n	8005868 <_printf_float+0x1e0>
 8005aa6:	f04f 0800 	mov.w	r8, #0
 8005aaa:	f104 091a 	add.w	r9, r4, #26
 8005aae:	e7f2      	b.n	8005a96 <_printf_float+0x40e>
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	4642      	mov	r2, r8
 8005ab4:	e7df      	b.n	8005a76 <_printf_float+0x3ee>
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	464a      	mov	r2, r9
 8005aba:	4631      	mov	r1, r6
 8005abc:	4628      	mov	r0, r5
 8005abe:	47b8      	blx	r7
 8005ac0:	3001      	adds	r0, #1
 8005ac2:	f43f ae3c 	beq.w	800573e <_printf_float+0xb6>
 8005ac6:	f108 0801 	add.w	r8, r8, #1
 8005aca:	68e3      	ldr	r3, [r4, #12]
 8005acc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005ace:	1a5b      	subs	r3, r3, r1
 8005ad0:	4543      	cmp	r3, r8
 8005ad2:	dcf0      	bgt.n	8005ab6 <_printf_float+0x42e>
 8005ad4:	e6fd      	b.n	80058d2 <_printf_float+0x24a>
 8005ad6:	f04f 0800 	mov.w	r8, #0
 8005ada:	f104 0919 	add.w	r9, r4, #25
 8005ade:	e7f4      	b.n	8005aca <_printf_float+0x442>

08005ae0 <_printf_common>:
 8005ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ae4:	4616      	mov	r6, r2
 8005ae6:	4699      	mov	r9, r3
 8005ae8:	688a      	ldr	r2, [r1, #8]
 8005aea:	690b      	ldr	r3, [r1, #16]
 8005aec:	4607      	mov	r7, r0
 8005aee:	4293      	cmp	r3, r2
 8005af0:	bfb8      	it	lt
 8005af2:	4613      	movlt	r3, r2
 8005af4:	6033      	str	r3, [r6, #0]
 8005af6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005afa:	460c      	mov	r4, r1
 8005afc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b00:	b10a      	cbz	r2, 8005b06 <_printf_common+0x26>
 8005b02:	3301      	adds	r3, #1
 8005b04:	6033      	str	r3, [r6, #0]
 8005b06:	6823      	ldr	r3, [r4, #0]
 8005b08:	0699      	lsls	r1, r3, #26
 8005b0a:	bf42      	ittt	mi
 8005b0c:	6833      	ldrmi	r3, [r6, #0]
 8005b0e:	3302      	addmi	r3, #2
 8005b10:	6033      	strmi	r3, [r6, #0]
 8005b12:	6825      	ldr	r5, [r4, #0]
 8005b14:	f015 0506 	ands.w	r5, r5, #6
 8005b18:	d106      	bne.n	8005b28 <_printf_common+0x48>
 8005b1a:	f104 0a19 	add.w	sl, r4, #25
 8005b1e:	68e3      	ldr	r3, [r4, #12]
 8005b20:	6832      	ldr	r2, [r6, #0]
 8005b22:	1a9b      	subs	r3, r3, r2
 8005b24:	42ab      	cmp	r3, r5
 8005b26:	dc28      	bgt.n	8005b7a <_printf_common+0x9a>
 8005b28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b2c:	1e13      	subs	r3, r2, #0
 8005b2e:	6822      	ldr	r2, [r4, #0]
 8005b30:	bf18      	it	ne
 8005b32:	2301      	movne	r3, #1
 8005b34:	0692      	lsls	r2, r2, #26
 8005b36:	d42d      	bmi.n	8005b94 <_printf_common+0xb4>
 8005b38:	4649      	mov	r1, r9
 8005b3a:	4638      	mov	r0, r7
 8005b3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b40:	47c0      	blx	r8
 8005b42:	3001      	adds	r0, #1
 8005b44:	d020      	beq.n	8005b88 <_printf_common+0xa8>
 8005b46:	6823      	ldr	r3, [r4, #0]
 8005b48:	68e5      	ldr	r5, [r4, #12]
 8005b4a:	f003 0306 	and.w	r3, r3, #6
 8005b4e:	2b04      	cmp	r3, #4
 8005b50:	bf18      	it	ne
 8005b52:	2500      	movne	r5, #0
 8005b54:	6832      	ldr	r2, [r6, #0]
 8005b56:	f04f 0600 	mov.w	r6, #0
 8005b5a:	68a3      	ldr	r3, [r4, #8]
 8005b5c:	bf08      	it	eq
 8005b5e:	1aad      	subeq	r5, r5, r2
 8005b60:	6922      	ldr	r2, [r4, #16]
 8005b62:	bf08      	it	eq
 8005b64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	bfc4      	itt	gt
 8005b6c:	1a9b      	subgt	r3, r3, r2
 8005b6e:	18ed      	addgt	r5, r5, r3
 8005b70:	341a      	adds	r4, #26
 8005b72:	42b5      	cmp	r5, r6
 8005b74:	d11a      	bne.n	8005bac <_printf_common+0xcc>
 8005b76:	2000      	movs	r0, #0
 8005b78:	e008      	b.n	8005b8c <_printf_common+0xac>
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	4652      	mov	r2, sl
 8005b7e:	4649      	mov	r1, r9
 8005b80:	4638      	mov	r0, r7
 8005b82:	47c0      	blx	r8
 8005b84:	3001      	adds	r0, #1
 8005b86:	d103      	bne.n	8005b90 <_printf_common+0xb0>
 8005b88:	f04f 30ff 	mov.w	r0, #4294967295
 8005b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b90:	3501      	adds	r5, #1
 8005b92:	e7c4      	b.n	8005b1e <_printf_common+0x3e>
 8005b94:	2030      	movs	r0, #48	; 0x30
 8005b96:	18e1      	adds	r1, r4, r3
 8005b98:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b9c:	1c5a      	adds	r2, r3, #1
 8005b9e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ba2:	4422      	add	r2, r4
 8005ba4:	3302      	adds	r3, #2
 8005ba6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005baa:	e7c5      	b.n	8005b38 <_printf_common+0x58>
 8005bac:	2301      	movs	r3, #1
 8005bae:	4622      	mov	r2, r4
 8005bb0:	4649      	mov	r1, r9
 8005bb2:	4638      	mov	r0, r7
 8005bb4:	47c0      	blx	r8
 8005bb6:	3001      	adds	r0, #1
 8005bb8:	d0e6      	beq.n	8005b88 <_printf_common+0xa8>
 8005bba:	3601      	adds	r6, #1
 8005bbc:	e7d9      	b.n	8005b72 <_printf_common+0x92>
	...

08005bc0 <_printf_i>:
 8005bc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bc4:	460c      	mov	r4, r1
 8005bc6:	7e27      	ldrb	r7, [r4, #24]
 8005bc8:	4691      	mov	r9, r2
 8005bca:	2f78      	cmp	r7, #120	; 0x78
 8005bcc:	4680      	mov	r8, r0
 8005bce:	469a      	mov	sl, r3
 8005bd0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005bd2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bd6:	d807      	bhi.n	8005be8 <_printf_i+0x28>
 8005bd8:	2f62      	cmp	r7, #98	; 0x62
 8005bda:	d80a      	bhi.n	8005bf2 <_printf_i+0x32>
 8005bdc:	2f00      	cmp	r7, #0
 8005bde:	f000 80d9 	beq.w	8005d94 <_printf_i+0x1d4>
 8005be2:	2f58      	cmp	r7, #88	; 0x58
 8005be4:	f000 80a4 	beq.w	8005d30 <_printf_i+0x170>
 8005be8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005bec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005bf0:	e03a      	b.n	8005c68 <_printf_i+0xa8>
 8005bf2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005bf6:	2b15      	cmp	r3, #21
 8005bf8:	d8f6      	bhi.n	8005be8 <_printf_i+0x28>
 8005bfa:	a001      	add	r0, pc, #4	; (adr r0, 8005c00 <_printf_i+0x40>)
 8005bfc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005c00:	08005c59 	.word	0x08005c59
 8005c04:	08005c6d 	.word	0x08005c6d
 8005c08:	08005be9 	.word	0x08005be9
 8005c0c:	08005be9 	.word	0x08005be9
 8005c10:	08005be9 	.word	0x08005be9
 8005c14:	08005be9 	.word	0x08005be9
 8005c18:	08005c6d 	.word	0x08005c6d
 8005c1c:	08005be9 	.word	0x08005be9
 8005c20:	08005be9 	.word	0x08005be9
 8005c24:	08005be9 	.word	0x08005be9
 8005c28:	08005be9 	.word	0x08005be9
 8005c2c:	08005d7b 	.word	0x08005d7b
 8005c30:	08005c9d 	.word	0x08005c9d
 8005c34:	08005d5d 	.word	0x08005d5d
 8005c38:	08005be9 	.word	0x08005be9
 8005c3c:	08005be9 	.word	0x08005be9
 8005c40:	08005d9d 	.word	0x08005d9d
 8005c44:	08005be9 	.word	0x08005be9
 8005c48:	08005c9d 	.word	0x08005c9d
 8005c4c:	08005be9 	.word	0x08005be9
 8005c50:	08005be9 	.word	0x08005be9
 8005c54:	08005d65 	.word	0x08005d65
 8005c58:	680b      	ldr	r3, [r1, #0]
 8005c5a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005c5e:	1d1a      	adds	r2, r3, #4
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	600a      	str	r2, [r1, #0]
 8005c64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e0a4      	b.n	8005db6 <_printf_i+0x1f6>
 8005c6c:	6825      	ldr	r5, [r4, #0]
 8005c6e:	6808      	ldr	r0, [r1, #0]
 8005c70:	062e      	lsls	r6, r5, #24
 8005c72:	f100 0304 	add.w	r3, r0, #4
 8005c76:	d50a      	bpl.n	8005c8e <_printf_i+0xce>
 8005c78:	6805      	ldr	r5, [r0, #0]
 8005c7a:	600b      	str	r3, [r1, #0]
 8005c7c:	2d00      	cmp	r5, #0
 8005c7e:	da03      	bge.n	8005c88 <_printf_i+0xc8>
 8005c80:	232d      	movs	r3, #45	; 0x2d
 8005c82:	426d      	negs	r5, r5
 8005c84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c88:	230a      	movs	r3, #10
 8005c8a:	485e      	ldr	r0, [pc, #376]	; (8005e04 <_printf_i+0x244>)
 8005c8c:	e019      	b.n	8005cc2 <_printf_i+0x102>
 8005c8e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005c92:	6805      	ldr	r5, [r0, #0]
 8005c94:	600b      	str	r3, [r1, #0]
 8005c96:	bf18      	it	ne
 8005c98:	b22d      	sxthne	r5, r5
 8005c9a:	e7ef      	b.n	8005c7c <_printf_i+0xbc>
 8005c9c:	680b      	ldr	r3, [r1, #0]
 8005c9e:	6825      	ldr	r5, [r4, #0]
 8005ca0:	1d18      	adds	r0, r3, #4
 8005ca2:	6008      	str	r0, [r1, #0]
 8005ca4:	0628      	lsls	r0, r5, #24
 8005ca6:	d501      	bpl.n	8005cac <_printf_i+0xec>
 8005ca8:	681d      	ldr	r5, [r3, #0]
 8005caa:	e002      	b.n	8005cb2 <_printf_i+0xf2>
 8005cac:	0669      	lsls	r1, r5, #25
 8005cae:	d5fb      	bpl.n	8005ca8 <_printf_i+0xe8>
 8005cb0:	881d      	ldrh	r5, [r3, #0]
 8005cb2:	2f6f      	cmp	r7, #111	; 0x6f
 8005cb4:	bf0c      	ite	eq
 8005cb6:	2308      	moveq	r3, #8
 8005cb8:	230a      	movne	r3, #10
 8005cba:	4852      	ldr	r0, [pc, #328]	; (8005e04 <_printf_i+0x244>)
 8005cbc:	2100      	movs	r1, #0
 8005cbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005cc2:	6866      	ldr	r6, [r4, #4]
 8005cc4:	2e00      	cmp	r6, #0
 8005cc6:	bfa8      	it	ge
 8005cc8:	6821      	ldrge	r1, [r4, #0]
 8005cca:	60a6      	str	r6, [r4, #8]
 8005ccc:	bfa4      	itt	ge
 8005cce:	f021 0104 	bicge.w	r1, r1, #4
 8005cd2:	6021      	strge	r1, [r4, #0]
 8005cd4:	b90d      	cbnz	r5, 8005cda <_printf_i+0x11a>
 8005cd6:	2e00      	cmp	r6, #0
 8005cd8:	d04d      	beq.n	8005d76 <_printf_i+0x1b6>
 8005cda:	4616      	mov	r6, r2
 8005cdc:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ce0:	fb03 5711 	mls	r7, r3, r1, r5
 8005ce4:	5dc7      	ldrb	r7, [r0, r7]
 8005ce6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005cea:	462f      	mov	r7, r5
 8005cec:	42bb      	cmp	r3, r7
 8005cee:	460d      	mov	r5, r1
 8005cf0:	d9f4      	bls.n	8005cdc <_printf_i+0x11c>
 8005cf2:	2b08      	cmp	r3, #8
 8005cf4:	d10b      	bne.n	8005d0e <_printf_i+0x14e>
 8005cf6:	6823      	ldr	r3, [r4, #0]
 8005cf8:	07df      	lsls	r7, r3, #31
 8005cfa:	d508      	bpl.n	8005d0e <_printf_i+0x14e>
 8005cfc:	6923      	ldr	r3, [r4, #16]
 8005cfe:	6861      	ldr	r1, [r4, #4]
 8005d00:	4299      	cmp	r1, r3
 8005d02:	bfde      	ittt	le
 8005d04:	2330      	movle	r3, #48	; 0x30
 8005d06:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005d0a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005d0e:	1b92      	subs	r2, r2, r6
 8005d10:	6122      	str	r2, [r4, #16]
 8005d12:	464b      	mov	r3, r9
 8005d14:	4621      	mov	r1, r4
 8005d16:	4640      	mov	r0, r8
 8005d18:	f8cd a000 	str.w	sl, [sp]
 8005d1c:	aa03      	add	r2, sp, #12
 8005d1e:	f7ff fedf 	bl	8005ae0 <_printf_common>
 8005d22:	3001      	adds	r0, #1
 8005d24:	d14c      	bne.n	8005dc0 <_printf_i+0x200>
 8005d26:	f04f 30ff 	mov.w	r0, #4294967295
 8005d2a:	b004      	add	sp, #16
 8005d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d30:	4834      	ldr	r0, [pc, #208]	; (8005e04 <_printf_i+0x244>)
 8005d32:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005d36:	680e      	ldr	r6, [r1, #0]
 8005d38:	6823      	ldr	r3, [r4, #0]
 8005d3a:	f856 5b04 	ldr.w	r5, [r6], #4
 8005d3e:	061f      	lsls	r7, r3, #24
 8005d40:	600e      	str	r6, [r1, #0]
 8005d42:	d514      	bpl.n	8005d6e <_printf_i+0x1ae>
 8005d44:	07d9      	lsls	r1, r3, #31
 8005d46:	bf44      	itt	mi
 8005d48:	f043 0320 	orrmi.w	r3, r3, #32
 8005d4c:	6023      	strmi	r3, [r4, #0]
 8005d4e:	b91d      	cbnz	r5, 8005d58 <_printf_i+0x198>
 8005d50:	6823      	ldr	r3, [r4, #0]
 8005d52:	f023 0320 	bic.w	r3, r3, #32
 8005d56:	6023      	str	r3, [r4, #0]
 8005d58:	2310      	movs	r3, #16
 8005d5a:	e7af      	b.n	8005cbc <_printf_i+0xfc>
 8005d5c:	6823      	ldr	r3, [r4, #0]
 8005d5e:	f043 0320 	orr.w	r3, r3, #32
 8005d62:	6023      	str	r3, [r4, #0]
 8005d64:	2378      	movs	r3, #120	; 0x78
 8005d66:	4828      	ldr	r0, [pc, #160]	; (8005e08 <_printf_i+0x248>)
 8005d68:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d6c:	e7e3      	b.n	8005d36 <_printf_i+0x176>
 8005d6e:	065e      	lsls	r6, r3, #25
 8005d70:	bf48      	it	mi
 8005d72:	b2ad      	uxthmi	r5, r5
 8005d74:	e7e6      	b.n	8005d44 <_printf_i+0x184>
 8005d76:	4616      	mov	r6, r2
 8005d78:	e7bb      	b.n	8005cf2 <_printf_i+0x132>
 8005d7a:	680b      	ldr	r3, [r1, #0]
 8005d7c:	6826      	ldr	r6, [r4, #0]
 8005d7e:	1d1d      	adds	r5, r3, #4
 8005d80:	6960      	ldr	r0, [r4, #20]
 8005d82:	600d      	str	r5, [r1, #0]
 8005d84:	0635      	lsls	r5, r6, #24
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	d501      	bpl.n	8005d8e <_printf_i+0x1ce>
 8005d8a:	6018      	str	r0, [r3, #0]
 8005d8c:	e002      	b.n	8005d94 <_printf_i+0x1d4>
 8005d8e:	0671      	lsls	r1, r6, #25
 8005d90:	d5fb      	bpl.n	8005d8a <_printf_i+0x1ca>
 8005d92:	8018      	strh	r0, [r3, #0]
 8005d94:	2300      	movs	r3, #0
 8005d96:	4616      	mov	r6, r2
 8005d98:	6123      	str	r3, [r4, #16]
 8005d9a:	e7ba      	b.n	8005d12 <_printf_i+0x152>
 8005d9c:	680b      	ldr	r3, [r1, #0]
 8005d9e:	1d1a      	adds	r2, r3, #4
 8005da0:	600a      	str	r2, [r1, #0]
 8005da2:	681e      	ldr	r6, [r3, #0]
 8005da4:	2100      	movs	r1, #0
 8005da6:	4630      	mov	r0, r6
 8005da8:	6862      	ldr	r2, [r4, #4]
 8005daa:	f000 fed7 	bl	8006b5c <memchr>
 8005dae:	b108      	cbz	r0, 8005db4 <_printf_i+0x1f4>
 8005db0:	1b80      	subs	r0, r0, r6
 8005db2:	6060      	str	r0, [r4, #4]
 8005db4:	6863      	ldr	r3, [r4, #4]
 8005db6:	6123      	str	r3, [r4, #16]
 8005db8:	2300      	movs	r3, #0
 8005dba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dbe:	e7a8      	b.n	8005d12 <_printf_i+0x152>
 8005dc0:	4632      	mov	r2, r6
 8005dc2:	4649      	mov	r1, r9
 8005dc4:	4640      	mov	r0, r8
 8005dc6:	6923      	ldr	r3, [r4, #16]
 8005dc8:	47d0      	blx	sl
 8005dca:	3001      	adds	r0, #1
 8005dcc:	d0ab      	beq.n	8005d26 <_printf_i+0x166>
 8005dce:	6823      	ldr	r3, [r4, #0]
 8005dd0:	079b      	lsls	r3, r3, #30
 8005dd2:	d413      	bmi.n	8005dfc <_printf_i+0x23c>
 8005dd4:	68e0      	ldr	r0, [r4, #12]
 8005dd6:	9b03      	ldr	r3, [sp, #12]
 8005dd8:	4298      	cmp	r0, r3
 8005dda:	bfb8      	it	lt
 8005ddc:	4618      	movlt	r0, r3
 8005dde:	e7a4      	b.n	8005d2a <_printf_i+0x16a>
 8005de0:	2301      	movs	r3, #1
 8005de2:	4632      	mov	r2, r6
 8005de4:	4649      	mov	r1, r9
 8005de6:	4640      	mov	r0, r8
 8005de8:	47d0      	blx	sl
 8005dea:	3001      	adds	r0, #1
 8005dec:	d09b      	beq.n	8005d26 <_printf_i+0x166>
 8005dee:	3501      	adds	r5, #1
 8005df0:	68e3      	ldr	r3, [r4, #12]
 8005df2:	9903      	ldr	r1, [sp, #12]
 8005df4:	1a5b      	subs	r3, r3, r1
 8005df6:	42ab      	cmp	r3, r5
 8005df8:	dcf2      	bgt.n	8005de0 <_printf_i+0x220>
 8005dfa:	e7eb      	b.n	8005dd4 <_printf_i+0x214>
 8005dfc:	2500      	movs	r5, #0
 8005dfe:	f104 0619 	add.w	r6, r4, #25
 8005e02:	e7f5      	b.n	8005df0 <_printf_i+0x230>
 8005e04:	08008332 	.word	0x08008332
 8005e08:	08008343 	.word	0x08008343

08005e0c <siprintf>:
 8005e0c:	b40e      	push	{r1, r2, r3}
 8005e0e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005e12:	b500      	push	{lr}
 8005e14:	b09c      	sub	sp, #112	; 0x70
 8005e16:	ab1d      	add	r3, sp, #116	; 0x74
 8005e18:	9002      	str	r0, [sp, #8]
 8005e1a:	9006      	str	r0, [sp, #24]
 8005e1c:	9107      	str	r1, [sp, #28]
 8005e1e:	9104      	str	r1, [sp, #16]
 8005e20:	4808      	ldr	r0, [pc, #32]	; (8005e44 <siprintf+0x38>)
 8005e22:	4909      	ldr	r1, [pc, #36]	; (8005e48 <siprintf+0x3c>)
 8005e24:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e28:	9105      	str	r1, [sp, #20]
 8005e2a:	6800      	ldr	r0, [r0, #0]
 8005e2c:	a902      	add	r1, sp, #8
 8005e2e:	9301      	str	r3, [sp, #4]
 8005e30:	f001 fb34 	bl	800749c <_svfiprintf_r>
 8005e34:	2200      	movs	r2, #0
 8005e36:	9b02      	ldr	r3, [sp, #8]
 8005e38:	701a      	strb	r2, [r3, #0]
 8005e3a:	b01c      	add	sp, #112	; 0x70
 8005e3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e40:	b003      	add	sp, #12
 8005e42:	4770      	bx	lr
 8005e44:	2000000c 	.word	0x2000000c
 8005e48:	ffff0208 	.word	0xffff0208

08005e4c <quorem>:
 8005e4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e50:	6903      	ldr	r3, [r0, #16]
 8005e52:	690c      	ldr	r4, [r1, #16]
 8005e54:	4607      	mov	r7, r0
 8005e56:	42a3      	cmp	r3, r4
 8005e58:	f2c0 8083 	blt.w	8005f62 <quorem+0x116>
 8005e5c:	3c01      	subs	r4, #1
 8005e5e:	f100 0514 	add.w	r5, r0, #20
 8005e62:	f101 0814 	add.w	r8, r1, #20
 8005e66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e6a:	9301      	str	r3, [sp, #4]
 8005e6c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005e70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e74:	3301      	adds	r3, #1
 8005e76:	429a      	cmp	r2, r3
 8005e78:	fbb2 f6f3 	udiv	r6, r2, r3
 8005e7c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005e80:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005e84:	d332      	bcc.n	8005eec <quorem+0xa0>
 8005e86:	f04f 0e00 	mov.w	lr, #0
 8005e8a:	4640      	mov	r0, r8
 8005e8c:	46ac      	mov	ip, r5
 8005e8e:	46f2      	mov	sl, lr
 8005e90:	f850 2b04 	ldr.w	r2, [r0], #4
 8005e94:	b293      	uxth	r3, r2
 8005e96:	fb06 e303 	mla	r3, r6, r3, lr
 8005e9a:	0c12      	lsrs	r2, r2, #16
 8005e9c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005ea0:	fb06 e202 	mla	r2, r6, r2, lr
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	ebaa 0303 	sub.w	r3, sl, r3
 8005eaa:	f8dc a000 	ldr.w	sl, [ip]
 8005eae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005eb2:	fa1f fa8a 	uxth.w	sl, sl
 8005eb6:	4453      	add	r3, sl
 8005eb8:	fa1f fa82 	uxth.w	sl, r2
 8005ebc:	f8dc 2000 	ldr.w	r2, [ip]
 8005ec0:	4581      	cmp	r9, r0
 8005ec2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005ec6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ed0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005ed4:	f84c 3b04 	str.w	r3, [ip], #4
 8005ed8:	d2da      	bcs.n	8005e90 <quorem+0x44>
 8005eda:	f855 300b 	ldr.w	r3, [r5, fp]
 8005ede:	b92b      	cbnz	r3, 8005eec <quorem+0xa0>
 8005ee0:	9b01      	ldr	r3, [sp, #4]
 8005ee2:	3b04      	subs	r3, #4
 8005ee4:	429d      	cmp	r5, r3
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	d32f      	bcc.n	8005f4a <quorem+0xfe>
 8005eea:	613c      	str	r4, [r7, #16]
 8005eec:	4638      	mov	r0, r7
 8005eee:	f001 f8bd 	bl	800706c <__mcmp>
 8005ef2:	2800      	cmp	r0, #0
 8005ef4:	db25      	blt.n	8005f42 <quorem+0xf6>
 8005ef6:	4628      	mov	r0, r5
 8005ef8:	f04f 0c00 	mov.w	ip, #0
 8005efc:	3601      	adds	r6, #1
 8005efe:	f858 1b04 	ldr.w	r1, [r8], #4
 8005f02:	f8d0 e000 	ldr.w	lr, [r0]
 8005f06:	b28b      	uxth	r3, r1
 8005f08:	ebac 0303 	sub.w	r3, ip, r3
 8005f0c:	fa1f f28e 	uxth.w	r2, lr
 8005f10:	4413      	add	r3, r2
 8005f12:	0c0a      	lsrs	r2, r1, #16
 8005f14:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005f18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f22:	45c1      	cmp	r9, r8
 8005f24:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005f28:	f840 3b04 	str.w	r3, [r0], #4
 8005f2c:	d2e7      	bcs.n	8005efe <quorem+0xb2>
 8005f2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f36:	b922      	cbnz	r2, 8005f42 <quorem+0xf6>
 8005f38:	3b04      	subs	r3, #4
 8005f3a:	429d      	cmp	r5, r3
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	d30a      	bcc.n	8005f56 <quorem+0x10a>
 8005f40:	613c      	str	r4, [r7, #16]
 8005f42:	4630      	mov	r0, r6
 8005f44:	b003      	add	sp, #12
 8005f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f4a:	6812      	ldr	r2, [r2, #0]
 8005f4c:	3b04      	subs	r3, #4
 8005f4e:	2a00      	cmp	r2, #0
 8005f50:	d1cb      	bne.n	8005eea <quorem+0x9e>
 8005f52:	3c01      	subs	r4, #1
 8005f54:	e7c6      	b.n	8005ee4 <quorem+0x98>
 8005f56:	6812      	ldr	r2, [r2, #0]
 8005f58:	3b04      	subs	r3, #4
 8005f5a:	2a00      	cmp	r2, #0
 8005f5c:	d1f0      	bne.n	8005f40 <quorem+0xf4>
 8005f5e:	3c01      	subs	r4, #1
 8005f60:	e7eb      	b.n	8005f3a <quorem+0xee>
 8005f62:	2000      	movs	r0, #0
 8005f64:	e7ee      	b.n	8005f44 <quorem+0xf8>
	...

08005f68 <_dtoa_r>:
 8005f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f6c:	4616      	mov	r6, r2
 8005f6e:	461f      	mov	r7, r3
 8005f70:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005f72:	b099      	sub	sp, #100	; 0x64
 8005f74:	4605      	mov	r5, r0
 8005f76:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005f7a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005f7e:	b974      	cbnz	r4, 8005f9e <_dtoa_r+0x36>
 8005f80:	2010      	movs	r0, #16
 8005f82:	f000 fde3 	bl	8006b4c <malloc>
 8005f86:	4602      	mov	r2, r0
 8005f88:	6268      	str	r0, [r5, #36]	; 0x24
 8005f8a:	b920      	cbnz	r0, 8005f96 <_dtoa_r+0x2e>
 8005f8c:	21ea      	movs	r1, #234	; 0xea
 8005f8e:	4bae      	ldr	r3, [pc, #696]	; (8006248 <_dtoa_r+0x2e0>)
 8005f90:	48ae      	ldr	r0, [pc, #696]	; (800624c <_dtoa_r+0x2e4>)
 8005f92:	f001 fb93 	bl	80076bc <__assert_func>
 8005f96:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005f9a:	6004      	str	r4, [r0, #0]
 8005f9c:	60c4      	str	r4, [r0, #12]
 8005f9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005fa0:	6819      	ldr	r1, [r3, #0]
 8005fa2:	b151      	cbz	r1, 8005fba <_dtoa_r+0x52>
 8005fa4:	685a      	ldr	r2, [r3, #4]
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	4093      	lsls	r3, r2
 8005faa:	604a      	str	r2, [r1, #4]
 8005fac:	608b      	str	r3, [r1, #8]
 8005fae:	4628      	mov	r0, r5
 8005fb0:	f000 fe22 	bl	8006bf8 <_Bfree>
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005fb8:	601a      	str	r2, [r3, #0]
 8005fba:	1e3b      	subs	r3, r7, #0
 8005fbc:	bfaf      	iteee	ge
 8005fbe:	2300      	movge	r3, #0
 8005fc0:	2201      	movlt	r2, #1
 8005fc2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005fc6:	9305      	strlt	r3, [sp, #20]
 8005fc8:	bfa8      	it	ge
 8005fca:	f8c8 3000 	strge.w	r3, [r8]
 8005fce:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005fd2:	4b9f      	ldr	r3, [pc, #636]	; (8006250 <_dtoa_r+0x2e8>)
 8005fd4:	bfb8      	it	lt
 8005fd6:	f8c8 2000 	strlt.w	r2, [r8]
 8005fda:	ea33 0309 	bics.w	r3, r3, r9
 8005fde:	d119      	bne.n	8006014 <_dtoa_r+0xac>
 8005fe0:	f242 730f 	movw	r3, #9999	; 0x270f
 8005fe4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005fe6:	6013      	str	r3, [r2, #0]
 8005fe8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005fec:	4333      	orrs	r3, r6
 8005fee:	f000 8580 	beq.w	8006af2 <_dtoa_r+0xb8a>
 8005ff2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005ff4:	b953      	cbnz	r3, 800600c <_dtoa_r+0xa4>
 8005ff6:	4b97      	ldr	r3, [pc, #604]	; (8006254 <_dtoa_r+0x2ec>)
 8005ff8:	e022      	b.n	8006040 <_dtoa_r+0xd8>
 8005ffa:	4b97      	ldr	r3, [pc, #604]	; (8006258 <_dtoa_r+0x2f0>)
 8005ffc:	9308      	str	r3, [sp, #32]
 8005ffe:	3308      	adds	r3, #8
 8006000:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006002:	6013      	str	r3, [r2, #0]
 8006004:	9808      	ldr	r0, [sp, #32]
 8006006:	b019      	add	sp, #100	; 0x64
 8006008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800600c:	4b91      	ldr	r3, [pc, #580]	; (8006254 <_dtoa_r+0x2ec>)
 800600e:	9308      	str	r3, [sp, #32]
 8006010:	3303      	adds	r3, #3
 8006012:	e7f5      	b.n	8006000 <_dtoa_r+0x98>
 8006014:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006018:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800601c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006020:	2200      	movs	r2, #0
 8006022:	2300      	movs	r3, #0
 8006024:	f7fa fd2c 	bl	8000a80 <__aeabi_dcmpeq>
 8006028:	4680      	mov	r8, r0
 800602a:	b158      	cbz	r0, 8006044 <_dtoa_r+0xdc>
 800602c:	2301      	movs	r3, #1
 800602e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006030:	6013      	str	r3, [r2, #0]
 8006032:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006034:	2b00      	cmp	r3, #0
 8006036:	f000 8559 	beq.w	8006aec <_dtoa_r+0xb84>
 800603a:	4888      	ldr	r0, [pc, #544]	; (800625c <_dtoa_r+0x2f4>)
 800603c:	6018      	str	r0, [r3, #0]
 800603e:	1e43      	subs	r3, r0, #1
 8006040:	9308      	str	r3, [sp, #32]
 8006042:	e7df      	b.n	8006004 <_dtoa_r+0x9c>
 8006044:	ab16      	add	r3, sp, #88	; 0x58
 8006046:	9301      	str	r3, [sp, #4]
 8006048:	ab17      	add	r3, sp, #92	; 0x5c
 800604a:	9300      	str	r3, [sp, #0]
 800604c:	4628      	mov	r0, r5
 800604e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006052:	f001 f8b7 	bl	80071c4 <__d2b>
 8006056:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800605a:	4682      	mov	sl, r0
 800605c:	2c00      	cmp	r4, #0
 800605e:	d07e      	beq.n	800615e <_dtoa_r+0x1f6>
 8006060:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006064:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006066:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800606a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800606e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006072:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006076:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800607a:	2200      	movs	r2, #0
 800607c:	4b78      	ldr	r3, [pc, #480]	; (8006260 <_dtoa_r+0x2f8>)
 800607e:	f7fa f8df 	bl	8000240 <__aeabi_dsub>
 8006082:	a36b      	add	r3, pc, #428	; (adr r3, 8006230 <_dtoa_r+0x2c8>)
 8006084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006088:	f7fa fa92 	bl	80005b0 <__aeabi_dmul>
 800608c:	a36a      	add	r3, pc, #424	; (adr r3, 8006238 <_dtoa_r+0x2d0>)
 800608e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006092:	f7fa f8d7 	bl	8000244 <__adddf3>
 8006096:	4606      	mov	r6, r0
 8006098:	4620      	mov	r0, r4
 800609a:	460f      	mov	r7, r1
 800609c:	f7fa fa1e 	bl	80004dc <__aeabi_i2d>
 80060a0:	a367      	add	r3, pc, #412	; (adr r3, 8006240 <_dtoa_r+0x2d8>)
 80060a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a6:	f7fa fa83 	bl	80005b0 <__aeabi_dmul>
 80060aa:	4602      	mov	r2, r0
 80060ac:	460b      	mov	r3, r1
 80060ae:	4630      	mov	r0, r6
 80060b0:	4639      	mov	r1, r7
 80060b2:	f7fa f8c7 	bl	8000244 <__adddf3>
 80060b6:	4606      	mov	r6, r0
 80060b8:	460f      	mov	r7, r1
 80060ba:	f7fa fd29 	bl	8000b10 <__aeabi_d2iz>
 80060be:	2200      	movs	r2, #0
 80060c0:	4681      	mov	r9, r0
 80060c2:	2300      	movs	r3, #0
 80060c4:	4630      	mov	r0, r6
 80060c6:	4639      	mov	r1, r7
 80060c8:	f7fa fce4 	bl	8000a94 <__aeabi_dcmplt>
 80060cc:	b148      	cbz	r0, 80060e2 <_dtoa_r+0x17a>
 80060ce:	4648      	mov	r0, r9
 80060d0:	f7fa fa04 	bl	80004dc <__aeabi_i2d>
 80060d4:	4632      	mov	r2, r6
 80060d6:	463b      	mov	r3, r7
 80060d8:	f7fa fcd2 	bl	8000a80 <__aeabi_dcmpeq>
 80060dc:	b908      	cbnz	r0, 80060e2 <_dtoa_r+0x17a>
 80060de:	f109 39ff 	add.w	r9, r9, #4294967295
 80060e2:	f1b9 0f16 	cmp.w	r9, #22
 80060e6:	d857      	bhi.n	8006198 <_dtoa_r+0x230>
 80060e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80060ec:	4b5d      	ldr	r3, [pc, #372]	; (8006264 <_dtoa_r+0x2fc>)
 80060ee:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80060f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f6:	f7fa fccd 	bl	8000a94 <__aeabi_dcmplt>
 80060fa:	2800      	cmp	r0, #0
 80060fc:	d04e      	beq.n	800619c <_dtoa_r+0x234>
 80060fe:	2300      	movs	r3, #0
 8006100:	f109 39ff 	add.w	r9, r9, #4294967295
 8006104:	930f      	str	r3, [sp, #60]	; 0x3c
 8006106:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006108:	1b1c      	subs	r4, r3, r4
 800610a:	1e63      	subs	r3, r4, #1
 800610c:	9309      	str	r3, [sp, #36]	; 0x24
 800610e:	bf49      	itett	mi
 8006110:	f1c4 0301 	rsbmi	r3, r4, #1
 8006114:	2300      	movpl	r3, #0
 8006116:	9306      	strmi	r3, [sp, #24]
 8006118:	2300      	movmi	r3, #0
 800611a:	bf54      	ite	pl
 800611c:	9306      	strpl	r3, [sp, #24]
 800611e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006120:	f1b9 0f00 	cmp.w	r9, #0
 8006124:	db3c      	blt.n	80061a0 <_dtoa_r+0x238>
 8006126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006128:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800612c:	444b      	add	r3, r9
 800612e:	9309      	str	r3, [sp, #36]	; 0x24
 8006130:	2300      	movs	r3, #0
 8006132:	930a      	str	r3, [sp, #40]	; 0x28
 8006134:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006136:	2b09      	cmp	r3, #9
 8006138:	d86c      	bhi.n	8006214 <_dtoa_r+0x2ac>
 800613a:	2b05      	cmp	r3, #5
 800613c:	bfc4      	itt	gt
 800613e:	3b04      	subgt	r3, #4
 8006140:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006142:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006144:	bfc8      	it	gt
 8006146:	2400      	movgt	r4, #0
 8006148:	f1a3 0302 	sub.w	r3, r3, #2
 800614c:	bfd8      	it	le
 800614e:	2401      	movle	r4, #1
 8006150:	2b03      	cmp	r3, #3
 8006152:	f200 808b 	bhi.w	800626c <_dtoa_r+0x304>
 8006156:	e8df f003 	tbb	[pc, r3]
 800615a:	4f2d      	.short	0x4f2d
 800615c:	5b4d      	.short	0x5b4d
 800615e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006162:	441c      	add	r4, r3
 8006164:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006168:	2b20      	cmp	r3, #32
 800616a:	bfc3      	ittte	gt
 800616c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006170:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006174:	fa09 f303 	lslgt.w	r3, r9, r3
 8006178:	f1c3 0320 	rsble	r3, r3, #32
 800617c:	bfc6      	itte	gt
 800617e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006182:	4318      	orrgt	r0, r3
 8006184:	fa06 f003 	lslle.w	r0, r6, r3
 8006188:	f7fa f998 	bl	80004bc <__aeabi_ui2d>
 800618c:	2301      	movs	r3, #1
 800618e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006192:	3c01      	subs	r4, #1
 8006194:	9313      	str	r3, [sp, #76]	; 0x4c
 8006196:	e770      	b.n	800607a <_dtoa_r+0x112>
 8006198:	2301      	movs	r3, #1
 800619a:	e7b3      	b.n	8006104 <_dtoa_r+0x19c>
 800619c:	900f      	str	r0, [sp, #60]	; 0x3c
 800619e:	e7b2      	b.n	8006106 <_dtoa_r+0x19e>
 80061a0:	9b06      	ldr	r3, [sp, #24]
 80061a2:	eba3 0309 	sub.w	r3, r3, r9
 80061a6:	9306      	str	r3, [sp, #24]
 80061a8:	f1c9 0300 	rsb	r3, r9, #0
 80061ac:	930a      	str	r3, [sp, #40]	; 0x28
 80061ae:	2300      	movs	r3, #0
 80061b0:	930e      	str	r3, [sp, #56]	; 0x38
 80061b2:	e7bf      	b.n	8006134 <_dtoa_r+0x1cc>
 80061b4:	2300      	movs	r3, #0
 80061b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80061b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	dc59      	bgt.n	8006272 <_dtoa_r+0x30a>
 80061be:	f04f 0b01 	mov.w	fp, #1
 80061c2:	465b      	mov	r3, fp
 80061c4:	f8cd b008 	str.w	fp, [sp, #8]
 80061c8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80061cc:	2200      	movs	r2, #0
 80061ce:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80061d0:	6042      	str	r2, [r0, #4]
 80061d2:	2204      	movs	r2, #4
 80061d4:	f102 0614 	add.w	r6, r2, #20
 80061d8:	429e      	cmp	r6, r3
 80061da:	6841      	ldr	r1, [r0, #4]
 80061dc:	d94f      	bls.n	800627e <_dtoa_r+0x316>
 80061de:	4628      	mov	r0, r5
 80061e0:	f000 fcca 	bl	8006b78 <_Balloc>
 80061e4:	9008      	str	r0, [sp, #32]
 80061e6:	2800      	cmp	r0, #0
 80061e8:	d14d      	bne.n	8006286 <_dtoa_r+0x31e>
 80061ea:	4602      	mov	r2, r0
 80061ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80061f0:	4b1d      	ldr	r3, [pc, #116]	; (8006268 <_dtoa_r+0x300>)
 80061f2:	e6cd      	b.n	8005f90 <_dtoa_r+0x28>
 80061f4:	2301      	movs	r3, #1
 80061f6:	e7de      	b.n	80061b6 <_dtoa_r+0x24e>
 80061f8:	2300      	movs	r3, #0
 80061fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80061fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80061fe:	eb09 0b03 	add.w	fp, r9, r3
 8006202:	f10b 0301 	add.w	r3, fp, #1
 8006206:	2b01      	cmp	r3, #1
 8006208:	9302      	str	r3, [sp, #8]
 800620a:	bfb8      	it	lt
 800620c:	2301      	movlt	r3, #1
 800620e:	e7dd      	b.n	80061cc <_dtoa_r+0x264>
 8006210:	2301      	movs	r3, #1
 8006212:	e7f2      	b.n	80061fa <_dtoa_r+0x292>
 8006214:	2401      	movs	r4, #1
 8006216:	2300      	movs	r3, #0
 8006218:	940b      	str	r4, [sp, #44]	; 0x2c
 800621a:	9322      	str	r3, [sp, #136]	; 0x88
 800621c:	f04f 3bff 	mov.w	fp, #4294967295
 8006220:	2200      	movs	r2, #0
 8006222:	2312      	movs	r3, #18
 8006224:	f8cd b008 	str.w	fp, [sp, #8]
 8006228:	9223      	str	r2, [sp, #140]	; 0x8c
 800622a:	e7cf      	b.n	80061cc <_dtoa_r+0x264>
 800622c:	f3af 8000 	nop.w
 8006230:	636f4361 	.word	0x636f4361
 8006234:	3fd287a7 	.word	0x3fd287a7
 8006238:	8b60c8b3 	.word	0x8b60c8b3
 800623c:	3fc68a28 	.word	0x3fc68a28
 8006240:	509f79fb 	.word	0x509f79fb
 8006244:	3fd34413 	.word	0x3fd34413
 8006248:	08008361 	.word	0x08008361
 800624c:	08008378 	.word	0x08008378
 8006250:	7ff00000 	.word	0x7ff00000
 8006254:	0800835d 	.word	0x0800835d
 8006258:	08008354 	.word	0x08008354
 800625c:	08008331 	.word	0x08008331
 8006260:	3ff80000 	.word	0x3ff80000
 8006264:	08008470 	.word	0x08008470
 8006268:	080083d7 	.word	0x080083d7
 800626c:	2301      	movs	r3, #1
 800626e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006270:	e7d4      	b.n	800621c <_dtoa_r+0x2b4>
 8006272:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8006276:	465b      	mov	r3, fp
 8006278:	f8cd b008 	str.w	fp, [sp, #8]
 800627c:	e7a6      	b.n	80061cc <_dtoa_r+0x264>
 800627e:	3101      	adds	r1, #1
 8006280:	6041      	str	r1, [r0, #4]
 8006282:	0052      	lsls	r2, r2, #1
 8006284:	e7a6      	b.n	80061d4 <_dtoa_r+0x26c>
 8006286:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006288:	9a08      	ldr	r2, [sp, #32]
 800628a:	601a      	str	r2, [r3, #0]
 800628c:	9b02      	ldr	r3, [sp, #8]
 800628e:	2b0e      	cmp	r3, #14
 8006290:	f200 80a8 	bhi.w	80063e4 <_dtoa_r+0x47c>
 8006294:	2c00      	cmp	r4, #0
 8006296:	f000 80a5 	beq.w	80063e4 <_dtoa_r+0x47c>
 800629a:	f1b9 0f00 	cmp.w	r9, #0
 800629e:	dd34      	ble.n	800630a <_dtoa_r+0x3a2>
 80062a0:	4a9a      	ldr	r2, [pc, #616]	; (800650c <_dtoa_r+0x5a4>)
 80062a2:	f009 030f 	and.w	r3, r9, #15
 80062a6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80062aa:	f419 7f80 	tst.w	r9, #256	; 0x100
 80062ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80062b2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80062b6:	ea4f 1429 	mov.w	r4, r9, asr #4
 80062ba:	d016      	beq.n	80062ea <_dtoa_r+0x382>
 80062bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80062c0:	4b93      	ldr	r3, [pc, #588]	; (8006510 <_dtoa_r+0x5a8>)
 80062c2:	2703      	movs	r7, #3
 80062c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80062c8:	f7fa fa9c 	bl	8000804 <__aeabi_ddiv>
 80062cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80062d0:	f004 040f 	and.w	r4, r4, #15
 80062d4:	4e8e      	ldr	r6, [pc, #568]	; (8006510 <_dtoa_r+0x5a8>)
 80062d6:	b954      	cbnz	r4, 80062ee <_dtoa_r+0x386>
 80062d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80062dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062e0:	f7fa fa90 	bl	8000804 <__aeabi_ddiv>
 80062e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80062e8:	e029      	b.n	800633e <_dtoa_r+0x3d6>
 80062ea:	2702      	movs	r7, #2
 80062ec:	e7f2      	b.n	80062d4 <_dtoa_r+0x36c>
 80062ee:	07e1      	lsls	r1, r4, #31
 80062f0:	d508      	bpl.n	8006304 <_dtoa_r+0x39c>
 80062f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80062f6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80062fa:	f7fa f959 	bl	80005b0 <__aeabi_dmul>
 80062fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006302:	3701      	adds	r7, #1
 8006304:	1064      	asrs	r4, r4, #1
 8006306:	3608      	adds	r6, #8
 8006308:	e7e5      	b.n	80062d6 <_dtoa_r+0x36e>
 800630a:	f000 80a5 	beq.w	8006458 <_dtoa_r+0x4f0>
 800630e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006312:	f1c9 0400 	rsb	r4, r9, #0
 8006316:	4b7d      	ldr	r3, [pc, #500]	; (800650c <_dtoa_r+0x5a4>)
 8006318:	f004 020f 	and.w	r2, r4, #15
 800631c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006324:	f7fa f944 	bl	80005b0 <__aeabi_dmul>
 8006328:	2702      	movs	r7, #2
 800632a:	2300      	movs	r3, #0
 800632c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006330:	4e77      	ldr	r6, [pc, #476]	; (8006510 <_dtoa_r+0x5a8>)
 8006332:	1124      	asrs	r4, r4, #4
 8006334:	2c00      	cmp	r4, #0
 8006336:	f040 8084 	bne.w	8006442 <_dtoa_r+0x4da>
 800633a:	2b00      	cmp	r3, #0
 800633c:	d1d2      	bne.n	80062e4 <_dtoa_r+0x37c>
 800633e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006340:	2b00      	cmp	r3, #0
 8006342:	f000 808b 	beq.w	800645c <_dtoa_r+0x4f4>
 8006346:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800634a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800634e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006352:	2200      	movs	r2, #0
 8006354:	4b6f      	ldr	r3, [pc, #444]	; (8006514 <_dtoa_r+0x5ac>)
 8006356:	f7fa fb9d 	bl	8000a94 <__aeabi_dcmplt>
 800635a:	2800      	cmp	r0, #0
 800635c:	d07e      	beq.n	800645c <_dtoa_r+0x4f4>
 800635e:	9b02      	ldr	r3, [sp, #8]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d07b      	beq.n	800645c <_dtoa_r+0x4f4>
 8006364:	f1bb 0f00 	cmp.w	fp, #0
 8006368:	dd38      	ble.n	80063dc <_dtoa_r+0x474>
 800636a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800636e:	2200      	movs	r2, #0
 8006370:	4b69      	ldr	r3, [pc, #420]	; (8006518 <_dtoa_r+0x5b0>)
 8006372:	f7fa f91d 	bl	80005b0 <__aeabi_dmul>
 8006376:	465c      	mov	r4, fp
 8006378:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800637c:	f109 38ff 	add.w	r8, r9, #4294967295
 8006380:	3701      	adds	r7, #1
 8006382:	4638      	mov	r0, r7
 8006384:	f7fa f8aa 	bl	80004dc <__aeabi_i2d>
 8006388:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800638c:	f7fa f910 	bl	80005b0 <__aeabi_dmul>
 8006390:	2200      	movs	r2, #0
 8006392:	4b62      	ldr	r3, [pc, #392]	; (800651c <_dtoa_r+0x5b4>)
 8006394:	f7f9 ff56 	bl	8000244 <__adddf3>
 8006398:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800639c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80063a0:	9611      	str	r6, [sp, #68]	; 0x44
 80063a2:	2c00      	cmp	r4, #0
 80063a4:	d15d      	bne.n	8006462 <_dtoa_r+0x4fa>
 80063a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063aa:	2200      	movs	r2, #0
 80063ac:	4b5c      	ldr	r3, [pc, #368]	; (8006520 <_dtoa_r+0x5b8>)
 80063ae:	f7f9 ff47 	bl	8000240 <__aeabi_dsub>
 80063b2:	4602      	mov	r2, r0
 80063b4:	460b      	mov	r3, r1
 80063b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80063ba:	4633      	mov	r3, r6
 80063bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80063be:	f7fa fb87 	bl	8000ad0 <__aeabi_dcmpgt>
 80063c2:	2800      	cmp	r0, #0
 80063c4:	f040 829e 	bne.w	8006904 <_dtoa_r+0x99c>
 80063c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80063ce:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80063d2:	f7fa fb5f 	bl	8000a94 <__aeabi_dcmplt>
 80063d6:	2800      	cmp	r0, #0
 80063d8:	f040 8292 	bne.w	8006900 <_dtoa_r+0x998>
 80063dc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80063e0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80063e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	f2c0 8153 	blt.w	8006692 <_dtoa_r+0x72a>
 80063ec:	f1b9 0f0e 	cmp.w	r9, #14
 80063f0:	f300 814f 	bgt.w	8006692 <_dtoa_r+0x72a>
 80063f4:	4b45      	ldr	r3, [pc, #276]	; (800650c <_dtoa_r+0x5a4>)
 80063f6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80063fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80063fe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006402:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006404:	2b00      	cmp	r3, #0
 8006406:	f280 80db 	bge.w	80065c0 <_dtoa_r+0x658>
 800640a:	9b02      	ldr	r3, [sp, #8]
 800640c:	2b00      	cmp	r3, #0
 800640e:	f300 80d7 	bgt.w	80065c0 <_dtoa_r+0x658>
 8006412:	f040 8274 	bne.w	80068fe <_dtoa_r+0x996>
 8006416:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800641a:	2200      	movs	r2, #0
 800641c:	4b40      	ldr	r3, [pc, #256]	; (8006520 <_dtoa_r+0x5b8>)
 800641e:	f7fa f8c7 	bl	80005b0 <__aeabi_dmul>
 8006422:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006426:	f7fa fb49 	bl	8000abc <__aeabi_dcmpge>
 800642a:	9c02      	ldr	r4, [sp, #8]
 800642c:	4626      	mov	r6, r4
 800642e:	2800      	cmp	r0, #0
 8006430:	f040 824a 	bne.w	80068c8 <_dtoa_r+0x960>
 8006434:	2331      	movs	r3, #49	; 0x31
 8006436:	9f08      	ldr	r7, [sp, #32]
 8006438:	f109 0901 	add.w	r9, r9, #1
 800643c:	f807 3b01 	strb.w	r3, [r7], #1
 8006440:	e246      	b.n	80068d0 <_dtoa_r+0x968>
 8006442:	07e2      	lsls	r2, r4, #31
 8006444:	d505      	bpl.n	8006452 <_dtoa_r+0x4ea>
 8006446:	e9d6 2300 	ldrd	r2, r3, [r6]
 800644a:	f7fa f8b1 	bl	80005b0 <__aeabi_dmul>
 800644e:	2301      	movs	r3, #1
 8006450:	3701      	adds	r7, #1
 8006452:	1064      	asrs	r4, r4, #1
 8006454:	3608      	adds	r6, #8
 8006456:	e76d      	b.n	8006334 <_dtoa_r+0x3cc>
 8006458:	2702      	movs	r7, #2
 800645a:	e770      	b.n	800633e <_dtoa_r+0x3d6>
 800645c:	46c8      	mov	r8, r9
 800645e:	9c02      	ldr	r4, [sp, #8]
 8006460:	e78f      	b.n	8006382 <_dtoa_r+0x41a>
 8006462:	9908      	ldr	r1, [sp, #32]
 8006464:	4b29      	ldr	r3, [pc, #164]	; (800650c <_dtoa_r+0x5a4>)
 8006466:	4421      	add	r1, r4
 8006468:	9112      	str	r1, [sp, #72]	; 0x48
 800646a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800646c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006470:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006474:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006478:	2900      	cmp	r1, #0
 800647a:	d055      	beq.n	8006528 <_dtoa_r+0x5c0>
 800647c:	2000      	movs	r0, #0
 800647e:	4929      	ldr	r1, [pc, #164]	; (8006524 <_dtoa_r+0x5bc>)
 8006480:	f7fa f9c0 	bl	8000804 <__aeabi_ddiv>
 8006484:	463b      	mov	r3, r7
 8006486:	4632      	mov	r2, r6
 8006488:	f7f9 feda 	bl	8000240 <__aeabi_dsub>
 800648c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006490:	9f08      	ldr	r7, [sp, #32]
 8006492:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006496:	f7fa fb3b 	bl	8000b10 <__aeabi_d2iz>
 800649a:	4604      	mov	r4, r0
 800649c:	f7fa f81e 	bl	80004dc <__aeabi_i2d>
 80064a0:	4602      	mov	r2, r0
 80064a2:	460b      	mov	r3, r1
 80064a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064a8:	f7f9 feca 	bl	8000240 <__aeabi_dsub>
 80064ac:	4602      	mov	r2, r0
 80064ae:	460b      	mov	r3, r1
 80064b0:	3430      	adds	r4, #48	; 0x30
 80064b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80064b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80064ba:	f807 4b01 	strb.w	r4, [r7], #1
 80064be:	f7fa fae9 	bl	8000a94 <__aeabi_dcmplt>
 80064c2:	2800      	cmp	r0, #0
 80064c4:	d174      	bne.n	80065b0 <_dtoa_r+0x648>
 80064c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064ca:	2000      	movs	r0, #0
 80064cc:	4911      	ldr	r1, [pc, #68]	; (8006514 <_dtoa_r+0x5ac>)
 80064ce:	f7f9 feb7 	bl	8000240 <__aeabi_dsub>
 80064d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80064d6:	f7fa fadd 	bl	8000a94 <__aeabi_dcmplt>
 80064da:	2800      	cmp	r0, #0
 80064dc:	f040 80b6 	bne.w	800664c <_dtoa_r+0x6e4>
 80064e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80064e2:	429f      	cmp	r7, r3
 80064e4:	f43f af7a 	beq.w	80063dc <_dtoa_r+0x474>
 80064e8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80064ec:	2200      	movs	r2, #0
 80064ee:	4b0a      	ldr	r3, [pc, #40]	; (8006518 <_dtoa_r+0x5b0>)
 80064f0:	f7fa f85e 	bl	80005b0 <__aeabi_dmul>
 80064f4:	2200      	movs	r2, #0
 80064f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80064fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064fe:	4b06      	ldr	r3, [pc, #24]	; (8006518 <_dtoa_r+0x5b0>)
 8006500:	f7fa f856 	bl	80005b0 <__aeabi_dmul>
 8006504:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006508:	e7c3      	b.n	8006492 <_dtoa_r+0x52a>
 800650a:	bf00      	nop
 800650c:	08008470 	.word	0x08008470
 8006510:	08008448 	.word	0x08008448
 8006514:	3ff00000 	.word	0x3ff00000
 8006518:	40240000 	.word	0x40240000
 800651c:	401c0000 	.word	0x401c0000
 8006520:	40140000 	.word	0x40140000
 8006524:	3fe00000 	.word	0x3fe00000
 8006528:	4630      	mov	r0, r6
 800652a:	4639      	mov	r1, r7
 800652c:	f7fa f840 	bl	80005b0 <__aeabi_dmul>
 8006530:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006532:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006536:	9c08      	ldr	r4, [sp, #32]
 8006538:	9314      	str	r3, [sp, #80]	; 0x50
 800653a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800653e:	f7fa fae7 	bl	8000b10 <__aeabi_d2iz>
 8006542:	9015      	str	r0, [sp, #84]	; 0x54
 8006544:	f7f9 ffca 	bl	80004dc <__aeabi_i2d>
 8006548:	4602      	mov	r2, r0
 800654a:	460b      	mov	r3, r1
 800654c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006550:	f7f9 fe76 	bl	8000240 <__aeabi_dsub>
 8006554:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006556:	4606      	mov	r6, r0
 8006558:	3330      	adds	r3, #48	; 0x30
 800655a:	f804 3b01 	strb.w	r3, [r4], #1
 800655e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006560:	460f      	mov	r7, r1
 8006562:	429c      	cmp	r4, r3
 8006564:	f04f 0200 	mov.w	r2, #0
 8006568:	d124      	bne.n	80065b4 <_dtoa_r+0x64c>
 800656a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800656e:	4bb3      	ldr	r3, [pc, #716]	; (800683c <_dtoa_r+0x8d4>)
 8006570:	f7f9 fe68 	bl	8000244 <__adddf3>
 8006574:	4602      	mov	r2, r0
 8006576:	460b      	mov	r3, r1
 8006578:	4630      	mov	r0, r6
 800657a:	4639      	mov	r1, r7
 800657c:	f7fa faa8 	bl	8000ad0 <__aeabi_dcmpgt>
 8006580:	2800      	cmp	r0, #0
 8006582:	d162      	bne.n	800664a <_dtoa_r+0x6e2>
 8006584:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006588:	2000      	movs	r0, #0
 800658a:	49ac      	ldr	r1, [pc, #688]	; (800683c <_dtoa_r+0x8d4>)
 800658c:	f7f9 fe58 	bl	8000240 <__aeabi_dsub>
 8006590:	4602      	mov	r2, r0
 8006592:	460b      	mov	r3, r1
 8006594:	4630      	mov	r0, r6
 8006596:	4639      	mov	r1, r7
 8006598:	f7fa fa7c 	bl	8000a94 <__aeabi_dcmplt>
 800659c:	2800      	cmp	r0, #0
 800659e:	f43f af1d 	beq.w	80063dc <_dtoa_r+0x474>
 80065a2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80065a4:	1e7b      	subs	r3, r7, #1
 80065a6:	9314      	str	r3, [sp, #80]	; 0x50
 80065a8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80065ac:	2b30      	cmp	r3, #48	; 0x30
 80065ae:	d0f8      	beq.n	80065a2 <_dtoa_r+0x63a>
 80065b0:	46c1      	mov	r9, r8
 80065b2:	e03a      	b.n	800662a <_dtoa_r+0x6c2>
 80065b4:	4ba2      	ldr	r3, [pc, #648]	; (8006840 <_dtoa_r+0x8d8>)
 80065b6:	f7f9 fffb 	bl	80005b0 <__aeabi_dmul>
 80065ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80065be:	e7bc      	b.n	800653a <_dtoa_r+0x5d2>
 80065c0:	9f08      	ldr	r7, [sp, #32]
 80065c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80065c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065ca:	f7fa f91b 	bl	8000804 <__aeabi_ddiv>
 80065ce:	f7fa fa9f 	bl	8000b10 <__aeabi_d2iz>
 80065d2:	4604      	mov	r4, r0
 80065d4:	f7f9 ff82 	bl	80004dc <__aeabi_i2d>
 80065d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80065dc:	f7f9 ffe8 	bl	80005b0 <__aeabi_dmul>
 80065e0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80065e4:	460b      	mov	r3, r1
 80065e6:	4602      	mov	r2, r0
 80065e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065ec:	f7f9 fe28 	bl	8000240 <__aeabi_dsub>
 80065f0:	f807 6b01 	strb.w	r6, [r7], #1
 80065f4:	9e08      	ldr	r6, [sp, #32]
 80065f6:	9b02      	ldr	r3, [sp, #8]
 80065f8:	1bbe      	subs	r6, r7, r6
 80065fa:	42b3      	cmp	r3, r6
 80065fc:	d13a      	bne.n	8006674 <_dtoa_r+0x70c>
 80065fe:	4602      	mov	r2, r0
 8006600:	460b      	mov	r3, r1
 8006602:	f7f9 fe1f 	bl	8000244 <__adddf3>
 8006606:	4602      	mov	r2, r0
 8006608:	460b      	mov	r3, r1
 800660a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800660e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006612:	f7fa fa5d 	bl	8000ad0 <__aeabi_dcmpgt>
 8006616:	bb58      	cbnz	r0, 8006670 <_dtoa_r+0x708>
 8006618:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800661c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006620:	f7fa fa2e 	bl	8000a80 <__aeabi_dcmpeq>
 8006624:	b108      	cbz	r0, 800662a <_dtoa_r+0x6c2>
 8006626:	07e1      	lsls	r1, r4, #31
 8006628:	d422      	bmi.n	8006670 <_dtoa_r+0x708>
 800662a:	4628      	mov	r0, r5
 800662c:	4651      	mov	r1, sl
 800662e:	f000 fae3 	bl	8006bf8 <_Bfree>
 8006632:	2300      	movs	r3, #0
 8006634:	703b      	strb	r3, [r7, #0]
 8006636:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006638:	f109 0001 	add.w	r0, r9, #1
 800663c:	6018      	str	r0, [r3, #0]
 800663e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006640:	2b00      	cmp	r3, #0
 8006642:	f43f acdf 	beq.w	8006004 <_dtoa_r+0x9c>
 8006646:	601f      	str	r7, [r3, #0]
 8006648:	e4dc      	b.n	8006004 <_dtoa_r+0x9c>
 800664a:	4627      	mov	r7, r4
 800664c:	463b      	mov	r3, r7
 800664e:	461f      	mov	r7, r3
 8006650:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006654:	2a39      	cmp	r2, #57	; 0x39
 8006656:	d107      	bne.n	8006668 <_dtoa_r+0x700>
 8006658:	9a08      	ldr	r2, [sp, #32]
 800665a:	429a      	cmp	r2, r3
 800665c:	d1f7      	bne.n	800664e <_dtoa_r+0x6e6>
 800665e:	2230      	movs	r2, #48	; 0x30
 8006660:	9908      	ldr	r1, [sp, #32]
 8006662:	f108 0801 	add.w	r8, r8, #1
 8006666:	700a      	strb	r2, [r1, #0]
 8006668:	781a      	ldrb	r2, [r3, #0]
 800666a:	3201      	adds	r2, #1
 800666c:	701a      	strb	r2, [r3, #0]
 800666e:	e79f      	b.n	80065b0 <_dtoa_r+0x648>
 8006670:	46c8      	mov	r8, r9
 8006672:	e7eb      	b.n	800664c <_dtoa_r+0x6e4>
 8006674:	2200      	movs	r2, #0
 8006676:	4b72      	ldr	r3, [pc, #456]	; (8006840 <_dtoa_r+0x8d8>)
 8006678:	f7f9 ff9a 	bl	80005b0 <__aeabi_dmul>
 800667c:	4602      	mov	r2, r0
 800667e:	460b      	mov	r3, r1
 8006680:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006684:	2200      	movs	r2, #0
 8006686:	2300      	movs	r3, #0
 8006688:	f7fa f9fa 	bl	8000a80 <__aeabi_dcmpeq>
 800668c:	2800      	cmp	r0, #0
 800668e:	d098      	beq.n	80065c2 <_dtoa_r+0x65a>
 8006690:	e7cb      	b.n	800662a <_dtoa_r+0x6c2>
 8006692:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006694:	2a00      	cmp	r2, #0
 8006696:	f000 80cd 	beq.w	8006834 <_dtoa_r+0x8cc>
 800669a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800669c:	2a01      	cmp	r2, #1
 800669e:	f300 80af 	bgt.w	8006800 <_dtoa_r+0x898>
 80066a2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80066a4:	2a00      	cmp	r2, #0
 80066a6:	f000 80a7 	beq.w	80067f8 <_dtoa_r+0x890>
 80066aa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80066ae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80066b0:	9f06      	ldr	r7, [sp, #24]
 80066b2:	9a06      	ldr	r2, [sp, #24]
 80066b4:	2101      	movs	r1, #1
 80066b6:	441a      	add	r2, r3
 80066b8:	9206      	str	r2, [sp, #24]
 80066ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066bc:	4628      	mov	r0, r5
 80066be:	441a      	add	r2, r3
 80066c0:	9209      	str	r2, [sp, #36]	; 0x24
 80066c2:	f000 fb53 	bl	8006d6c <__i2b>
 80066c6:	4606      	mov	r6, r0
 80066c8:	2f00      	cmp	r7, #0
 80066ca:	dd0c      	ble.n	80066e6 <_dtoa_r+0x77e>
 80066cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	dd09      	ble.n	80066e6 <_dtoa_r+0x77e>
 80066d2:	42bb      	cmp	r3, r7
 80066d4:	bfa8      	it	ge
 80066d6:	463b      	movge	r3, r7
 80066d8:	9a06      	ldr	r2, [sp, #24]
 80066da:	1aff      	subs	r7, r7, r3
 80066dc:	1ad2      	subs	r2, r2, r3
 80066de:	9206      	str	r2, [sp, #24]
 80066e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066e2:	1ad3      	subs	r3, r2, r3
 80066e4:	9309      	str	r3, [sp, #36]	; 0x24
 80066e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066e8:	b1f3      	cbz	r3, 8006728 <_dtoa_r+0x7c0>
 80066ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f000 80a9 	beq.w	8006844 <_dtoa_r+0x8dc>
 80066f2:	2c00      	cmp	r4, #0
 80066f4:	dd10      	ble.n	8006718 <_dtoa_r+0x7b0>
 80066f6:	4631      	mov	r1, r6
 80066f8:	4622      	mov	r2, r4
 80066fa:	4628      	mov	r0, r5
 80066fc:	f000 fbf0 	bl	8006ee0 <__pow5mult>
 8006700:	4652      	mov	r2, sl
 8006702:	4601      	mov	r1, r0
 8006704:	4606      	mov	r6, r0
 8006706:	4628      	mov	r0, r5
 8006708:	f000 fb46 	bl	8006d98 <__multiply>
 800670c:	4680      	mov	r8, r0
 800670e:	4651      	mov	r1, sl
 8006710:	4628      	mov	r0, r5
 8006712:	f000 fa71 	bl	8006bf8 <_Bfree>
 8006716:	46c2      	mov	sl, r8
 8006718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800671a:	1b1a      	subs	r2, r3, r4
 800671c:	d004      	beq.n	8006728 <_dtoa_r+0x7c0>
 800671e:	4651      	mov	r1, sl
 8006720:	4628      	mov	r0, r5
 8006722:	f000 fbdd 	bl	8006ee0 <__pow5mult>
 8006726:	4682      	mov	sl, r0
 8006728:	2101      	movs	r1, #1
 800672a:	4628      	mov	r0, r5
 800672c:	f000 fb1e 	bl	8006d6c <__i2b>
 8006730:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006732:	4604      	mov	r4, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	f340 8087 	ble.w	8006848 <_dtoa_r+0x8e0>
 800673a:	461a      	mov	r2, r3
 800673c:	4601      	mov	r1, r0
 800673e:	4628      	mov	r0, r5
 8006740:	f000 fbce 	bl	8006ee0 <__pow5mult>
 8006744:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006746:	4604      	mov	r4, r0
 8006748:	2b01      	cmp	r3, #1
 800674a:	f340 8080 	ble.w	800684e <_dtoa_r+0x8e6>
 800674e:	f04f 0800 	mov.w	r8, #0
 8006752:	6923      	ldr	r3, [r4, #16]
 8006754:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006758:	6918      	ldr	r0, [r3, #16]
 800675a:	f000 fab9 	bl	8006cd0 <__hi0bits>
 800675e:	f1c0 0020 	rsb	r0, r0, #32
 8006762:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006764:	4418      	add	r0, r3
 8006766:	f010 001f 	ands.w	r0, r0, #31
 800676a:	f000 8092 	beq.w	8006892 <_dtoa_r+0x92a>
 800676e:	f1c0 0320 	rsb	r3, r0, #32
 8006772:	2b04      	cmp	r3, #4
 8006774:	f340 808a 	ble.w	800688c <_dtoa_r+0x924>
 8006778:	f1c0 001c 	rsb	r0, r0, #28
 800677c:	9b06      	ldr	r3, [sp, #24]
 800677e:	4407      	add	r7, r0
 8006780:	4403      	add	r3, r0
 8006782:	9306      	str	r3, [sp, #24]
 8006784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006786:	4403      	add	r3, r0
 8006788:	9309      	str	r3, [sp, #36]	; 0x24
 800678a:	9b06      	ldr	r3, [sp, #24]
 800678c:	2b00      	cmp	r3, #0
 800678e:	dd05      	ble.n	800679c <_dtoa_r+0x834>
 8006790:	4651      	mov	r1, sl
 8006792:	461a      	mov	r2, r3
 8006794:	4628      	mov	r0, r5
 8006796:	f000 fbfd 	bl	8006f94 <__lshift>
 800679a:	4682      	mov	sl, r0
 800679c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800679e:	2b00      	cmp	r3, #0
 80067a0:	dd05      	ble.n	80067ae <_dtoa_r+0x846>
 80067a2:	4621      	mov	r1, r4
 80067a4:	461a      	mov	r2, r3
 80067a6:	4628      	mov	r0, r5
 80067a8:	f000 fbf4 	bl	8006f94 <__lshift>
 80067ac:	4604      	mov	r4, r0
 80067ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d070      	beq.n	8006896 <_dtoa_r+0x92e>
 80067b4:	4621      	mov	r1, r4
 80067b6:	4650      	mov	r0, sl
 80067b8:	f000 fc58 	bl	800706c <__mcmp>
 80067bc:	2800      	cmp	r0, #0
 80067be:	da6a      	bge.n	8006896 <_dtoa_r+0x92e>
 80067c0:	2300      	movs	r3, #0
 80067c2:	4651      	mov	r1, sl
 80067c4:	220a      	movs	r2, #10
 80067c6:	4628      	mov	r0, r5
 80067c8:	f000 fa38 	bl	8006c3c <__multadd>
 80067cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067ce:	4682      	mov	sl, r0
 80067d0:	f109 39ff 	add.w	r9, r9, #4294967295
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	f000 8193 	beq.w	8006b00 <_dtoa_r+0xb98>
 80067da:	4631      	mov	r1, r6
 80067dc:	2300      	movs	r3, #0
 80067de:	220a      	movs	r2, #10
 80067e0:	4628      	mov	r0, r5
 80067e2:	f000 fa2b 	bl	8006c3c <__multadd>
 80067e6:	f1bb 0f00 	cmp.w	fp, #0
 80067ea:	4606      	mov	r6, r0
 80067ec:	f300 8093 	bgt.w	8006916 <_dtoa_r+0x9ae>
 80067f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80067f2:	2b02      	cmp	r3, #2
 80067f4:	dc57      	bgt.n	80068a6 <_dtoa_r+0x93e>
 80067f6:	e08e      	b.n	8006916 <_dtoa_r+0x9ae>
 80067f8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80067fa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80067fe:	e756      	b.n	80066ae <_dtoa_r+0x746>
 8006800:	9b02      	ldr	r3, [sp, #8]
 8006802:	1e5c      	subs	r4, r3, #1
 8006804:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006806:	42a3      	cmp	r3, r4
 8006808:	bfb7      	itett	lt
 800680a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800680c:	1b1c      	subge	r4, r3, r4
 800680e:	1ae2      	sublt	r2, r4, r3
 8006810:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006812:	bfbe      	ittt	lt
 8006814:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006816:	189b      	addlt	r3, r3, r2
 8006818:	930e      	strlt	r3, [sp, #56]	; 0x38
 800681a:	9b02      	ldr	r3, [sp, #8]
 800681c:	bfb8      	it	lt
 800681e:	2400      	movlt	r4, #0
 8006820:	2b00      	cmp	r3, #0
 8006822:	bfbb      	ittet	lt
 8006824:	9b06      	ldrlt	r3, [sp, #24]
 8006826:	9a02      	ldrlt	r2, [sp, #8]
 8006828:	9f06      	ldrge	r7, [sp, #24]
 800682a:	1a9f      	sublt	r7, r3, r2
 800682c:	bfac      	ite	ge
 800682e:	9b02      	ldrge	r3, [sp, #8]
 8006830:	2300      	movlt	r3, #0
 8006832:	e73e      	b.n	80066b2 <_dtoa_r+0x74a>
 8006834:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006836:	9f06      	ldr	r7, [sp, #24]
 8006838:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800683a:	e745      	b.n	80066c8 <_dtoa_r+0x760>
 800683c:	3fe00000 	.word	0x3fe00000
 8006840:	40240000 	.word	0x40240000
 8006844:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006846:	e76a      	b.n	800671e <_dtoa_r+0x7b6>
 8006848:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800684a:	2b01      	cmp	r3, #1
 800684c:	dc19      	bgt.n	8006882 <_dtoa_r+0x91a>
 800684e:	9b04      	ldr	r3, [sp, #16]
 8006850:	b9bb      	cbnz	r3, 8006882 <_dtoa_r+0x91a>
 8006852:	9b05      	ldr	r3, [sp, #20]
 8006854:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006858:	b99b      	cbnz	r3, 8006882 <_dtoa_r+0x91a>
 800685a:	9b05      	ldr	r3, [sp, #20]
 800685c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006860:	0d1b      	lsrs	r3, r3, #20
 8006862:	051b      	lsls	r3, r3, #20
 8006864:	b183      	cbz	r3, 8006888 <_dtoa_r+0x920>
 8006866:	f04f 0801 	mov.w	r8, #1
 800686a:	9b06      	ldr	r3, [sp, #24]
 800686c:	3301      	adds	r3, #1
 800686e:	9306      	str	r3, [sp, #24]
 8006870:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006872:	3301      	adds	r3, #1
 8006874:	9309      	str	r3, [sp, #36]	; 0x24
 8006876:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006878:	2b00      	cmp	r3, #0
 800687a:	f47f af6a 	bne.w	8006752 <_dtoa_r+0x7ea>
 800687e:	2001      	movs	r0, #1
 8006880:	e76f      	b.n	8006762 <_dtoa_r+0x7fa>
 8006882:	f04f 0800 	mov.w	r8, #0
 8006886:	e7f6      	b.n	8006876 <_dtoa_r+0x90e>
 8006888:	4698      	mov	r8, r3
 800688a:	e7f4      	b.n	8006876 <_dtoa_r+0x90e>
 800688c:	f43f af7d 	beq.w	800678a <_dtoa_r+0x822>
 8006890:	4618      	mov	r0, r3
 8006892:	301c      	adds	r0, #28
 8006894:	e772      	b.n	800677c <_dtoa_r+0x814>
 8006896:	9b02      	ldr	r3, [sp, #8]
 8006898:	2b00      	cmp	r3, #0
 800689a:	dc36      	bgt.n	800690a <_dtoa_r+0x9a2>
 800689c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800689e:	2b02      	cmp	r3, #2
 80068a0:	dd33      	ble.n	800690a <_dtoa_r+0x9a2>
 80068a2:	f8dd b008 	ldr.w	fp, [sp, #8]
 80068a6:	f1bb 0f00 	cmp.w	fp, #0
 80068aa:	d10d      	bne.n	80068c8 <_dtoa_r+0x960>
 80068ac:	4621      	mov	r1, r4
 80068ae:	465b      	mov	r3, fp
 80068b0:	2205      	movs	r2, #5
 80068b2:	4628      	mov	r0, r5
 80068b4:	f000 f9c2 	bl	8006c3c <__multadd>
 80068b8:	4601      	mov	r1, r0
 80068ba:	4604      	mov	r4, r0
 80068bc:	4650      	mov	r0, sl
 80068be:	f000 fbd5 	bl	800706c <__mcmp>
 80068c2:	2800      	cmp	r0, #0
 80068c4:	f73f adb6 	bgt.w	8006434 <_dtoa_r+0x4cc>
 80068c8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80068ca:	9f08      	ldr	r7, [sp, #32]
 80068cc:	ea6f 0903 	mvn.w	r9, r3
 80068d0:	f04f 0800 	mov.w	r8, #0
 80068d4:	4621      	mov	r1, r4
 80068d6:	4628      	mov	r0, r5
 80068d8:	f000 f98e 	bl	8006bf8 <_Bfree>
 80068dc:	2e00      	cmp	r6, #0
 80068de:	f43f aea4 	beq.w	800662a <_dtoa_r+0x6c2>
 80068e2:	f1b8 0f00 	cmp.w	r8, #0
 80068e6:	d005      	beq.n	80068f4 <_dtoa_r+0x98c>
 80068e8:	45b0      	cmp	r8, r6
 80068ea:	d003      	beq.n	80068f4 <_dtoa_r+0x98c>
 80068ec:	4641      	mov	r1, r8
 80068ee:	4628      	mov	r0, r5
 80068f0:	f000 f982 	bl	8006bf8 <_Bfree>
 80068f4:	4631      	mov	r1, r6
 80068f6:	4628      	mov	r0, r5
 80068f8:	f000 f97e 	bl	8006bf8 <_Bfree>
 80068fc:	e695      	b.n	800662a <_dtoa_r+0x6c2>
 80068fe:	2400      	movs	r4, #0
 8006900:	4626      	mov	r6, r4
 8006902:	e7e1      	b.n	80068c8 <_dtoa_r+0x960>
 8006904:	46c1      	mov	r9, r8
 8006906:	4626      	mov	r6, r4
 8006908:	e594      	b.n	8006434 <_dtoa_r+0x4cc>
 800690a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800690c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006910:	2b00      	cmp	r3, #0
 8006912:	f000 80fc 	beq.w	8006b0e <_dtoa_r+0xba6>
 8006916:	2f00      	cmp	r7, #0
 8006918:	dd05      	ble.n	8006926 <_dtoa_r+0x9be>
 800691a:	4631      	mov	r1, r6
 800691c:	463a      	mov	r2, r7
 800691e:	4628      	mov	r0, r5
 8006920:	f000 fb38 	bl	8006f94 <__lshift>
 8006924:	4606      	mov	r6, r0
 8006926:	f1b8 0f00 	cmp.w	r8, #0
 800692a:	d05c      	beq.n	80069e6 <_dtoa_r+0xa7e>
 800692c:	4628      	mov	r0, r5
 800692e:	6871      	ldr	r1, [r6, #4]
 8006930:	f000 f922 	bl	8006b78 <_Balloc>
 8006934:	4607      	mov	r7, r0
 8006936:	b928      	cbnz	r0, 8006944 <_dtoa_r+0x9dc>
 8006938:	4602      	mov	r2, r0
 800693a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800693e:	4b7e      	ldr	r3, [pc, #504]	; (8006b38 <_dtoa_r+0xbd0>)
 8006940:	f7ff bb26 	b.w	8005f90 <_dtoa_r+0x28>
 8006944:	6932      	ldr	r2, [r6, #16]
 8006946:	f106 010c 	add.w	r1, r6, #12
 800694a:	3202      	adds	r2, #2
 800694c:	0092      	lsls	r2, r2, #2
 800694e:	300c      	adds	r0, #12
 8006950:	f7fe fde6 	bl	8005520 <memcpy>
 8006954:	2201      	movs	r2, #1
 8006956:	4639      	mov	r1, r7
 8006958:	4628      	mov	r0, r5
 800695a:	f000 fb1b 	bl	8006f94 <__lshift>
 800695e:	46b0      	mov	r8, r6
 8006960:	4606      	mov	r6, r0
 8006962:	9b08      	ldr	r3, [sp, #32]
 8006964:	3301      	adds	r3, #1
 8006966:	9302      	str	r3, [sp, #8]
 8006968:	9b08      	ldr	r3, [sp, #32]
 800696a:	445b      	add	r3, fp
 800696c:	930a      	str	r3, [sp, #40]	; 0x28
 800696e:	9b04      	ldr	r3, [sp, #16]
 8006970:	f003 0301 	and.w	r3, r3, #1
 8006974:	9309      	str	r3, [sp, #36]	; 0x24
 8006976:	9b02      	ldr	r3, [sp, #8]
 8006978:	4621      	mov	r1, r4
 800697a:	4650      	mov	r0, sl
 800697c:	f103 3bff 	add.w	fp, r3, #4294967295
 8006980:	f7ff fa64 	bl	8005e4c <quorem>
 8006984:	4603      	mov	r3, r0
 8006986:	4641      	mov	r1, r8
 8006988:	3330      	adds	r3, #48	; 0x30
 800698a:	9004      	str	r0, [sp, #16]
 800698c:	4650      	mov	r0, sl
 800698e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006990:	f000 fb6c 	bl	800706c <__mcmp>
 8006994:	4632      	mov	r2, r6
 8006996:	9006      	str	r0, [sp, #24]
 8006998:	4621      	mov	r1, r4
 800699a:	4628      	mov	r0, r5
 800699c:	f000 fb82 	bl	80070a4 <__mdiff>
 80069a0:	68c2      	ldr	r2, [r0, #12]
 80069a2:	4607      	mov	r7, r0
 80069a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069a6:	bb02      	cbnz	r2, 80069ea <_dtoa_r+0xa82>
 80069a8:	4601      	mov	r1, r0
 80069aa:	4650      	mov	r0, sl
 80069ac:	f000 fb5e 	bl	800706c <__mcmp>
 80069b0:	4602      	mov	r2, r0
 80069b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069b4:	4639      	mov	r1, r7
 80069b6:	4628      	mov	r0, r5
 80069b8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80069bc:	f000 f91c 	bl	8006bf8 <_Bfree>
 80069c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80069c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80069c4:	9f02      	ldr	r7, [sp, #8]
 80069c6:	ea43 0102 	orr.w	r1, r3, r2
 80069ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069cc:	430b      	orrs	r3, r1
 80069ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069d0:	d10d      	bne.n	80069ee <_dtoa_r+0xa86>
 80069d2:	2b39      	cmp	r3, #57	; 0x39
 80069d4:	d027      	beq.n	8006a26 <_dtoa_r+0xabe>
 80069d6:	9a06      	ldr	r2, [sp, #24]
 80069d8:	2a00      	cmp	r2, #0
 80069da:	dd01      	ble.n	80069e0 <_dtoa_r+0xa78>
 80069dc:	9b04      	ldr	r3, [sp, #16]
 80069de:	3331      	adds	r3, #49	; 0x31
 80069e0:	f88b 3000 	strb.w	r3, [fp]
 80069e4:	e776      	b.n	80068d4 <_dtoa_r+0x96c>
 80069e6:	4630      	mov	r0, r6
 80069e8:	e7b9      	b.n	800695e <_dtoa_r+0x9f6>
 80069ea:	2201      	movs	r2, #1
 80069ec:	e7e2      	b.n	80069b4 <_dtoa_r+0xa4c>
 80069ee:	9906      	ldr	r1, [sp, #24]
 80069f0:	2900      	cmp	r1, #0
 80069f2:	db04      	blt.n	80069fe <_dtoa_r+0xa96>
 80069f4:	9822      	ldr	r0, [sp, #136]	; 0x88
 80069f6:	4301      	orrs	r1, r0
 80069f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069fa:	4301      	orrs	r1, r0
 80069fc:	d120      	bne.n	8006a40 <_dtoa_r+0xad8>
 80069fe:	2a00      	cmp	r2, #0
 8006a00:	ddee      	ble.n	80069e0 <_dtoa_r+0xa78>
 8006a02:	4651      	mov	r1, sl
 8006a04:	2201      	movs	r2, #1
 8006a06:	4628      	mov	r0, r5
 8006a08:	9302      	str	r3, [sp, #8]
 8006a0a:	f000 fac3 	bl	8006f94 <__lshift>
 8006a0e:	4621      	mov	r1, r4
 8006a10:	4682      	mov	sl, r0
 8006a12:	f000 fb2b 	bl	800706c <__mcmp>
 8006a16:	2800      	cmp	r0, #0
 8006a18:	9b02      	ldr	r3, [sp, #8]
 8006a1a:	dc02      	bgt.n	8006a22 <_dtoa_r+0xaba>
 8006a1c:	d1e0      	bne.n	80069e0 <_dtoa_r+0xa78>
 8006a1e:	07da      	lsls	r2, r3, #31
 8006a20:	d5de      	bpl.n	80069e0 <_dtoa_r+0xa78>
 8006a22:	2b39      	cmp	r3, #57	; 0x39
 8006a24:	d1da      	bne.n	80069dc <_dtoa_r+0xa74>
 8006a26:	2339      	movs	r3, #57	; 0x39
 8006a28:	f88b 3000 	strb.w	r3, [fp]
 8006a2c:	463b      	mov	r3, r7
 8006a2e:	461f      	mov	r7, r3
 8006a30:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006a34:	3b01      	subs	r3, #1
 8006a36:	2a39      	cmp	r2, #57	; 0x39
 8006a38:	d050      	beq.n	8006adc <_dtoa_r+0xb74>
 8006a3a:	3201      	adds	r2, #1
 8006a3c:	701a      	strb	r2, [r3, #0]
 8006a3e:	e749      	b.n	80068d4 <_dtoa_r+0x96c>
 8006a40:	2a00      	cmp	r2, #0
 8006a42:	dd03      	ble.n	8006a4c <_dtoa_r+0xae4>
 8006a44:	2b39      	cmp	r3, #57	; 0x39
 8006a46:	d0ee      	beq.n	8006a26 <_dtoa_r+0xabe>
 8006a48:	3301      	adds	r3, #1
 8006a4a:	e7c9      	b.n	80069e0 <_dtoa_r+0xa78>
 8006a4c:	9a02      	ldr	r2, [sp, #8]
 8006a4e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006a50:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006a54:	428a      	cmp	r2, r1
 8006a56:	d02a      	beq.n	8006aae <_dtoa_r+0xb46>
 8006a58:	4651      	mov	r1, sl
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	220a      	movs	r2, #10
 8006a5e:	4628      	mov	r0, r5
 8006a60:	f000 f8ec 	bl	8006c3c <__multadd>
 8006a64:	45b0      	cmp	r8, r6
 8006a66:	4682      	mov	sl, r0
 8006a68:	f04f 0300 	mov.w	r3, #0
 8006a6c:	f04f 020a 	mov.w	r2, #10
 8006a70:	4641      	mov	r1, r8
 8006a72:	4628      	mov	r0, r5
 8006a74:	d107      	bne.n	8006a86 <_dtoa_r+0xb1e>
 8006a76:	f000 f8e1 	bl	8006c3c <__multadd>
 8006a7a:	4680      	mov	r8, r0
 8006a7c:	4606      	mov	r6, r0
 8006a7e:	9b02      	ldr	r3, [sp, #8]
 8006a80:	3301      	adds	r3, #1
 8006a82:	9302      	str	r3, [sp, #8]
 8006a84:	e777      	b.n	8006976 <_dtoa_r+0xa0e>
 8006a86:	f000 f8d9 	bl	8006c3c <__multadd>
 8006a8a:	4631      	mov	r1, r6
 8006a8c:	4680      	mov	r8, r0
 8006a8e:	2300      	movs	r3, #0
 8006a90:	220a      	movs	r2, #10
 8006a92:	4628      	mov	r0, r5
 8006a94:	f000 f8d2 	bl	8006c3c <__multadd>
 8006a98:	4606      	mov	r6, r0
 8006a9a:	e7f0      	b.n	8006a7e <_dtoa_r+0xb16>
 8006a9c:	f1bb 0f00 	cmp.w	fp, #0
 8006aa0:	bfcc      	ite	gt
 8006aa2:	465f      	movgt	r7, fp
 8006aa4:	2701      	movle	r7, #1
 8006aa6:	f04f 0800 	mov.w	r8, #0
 8006aaa:	9a08      	ldr	r2, [sp, #32]
 8006aac:	4417      	add	r7, r2
 8006aae:	4651      	mov	r1, sl
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	4628      	mov	r0, r5
 8006ab4:	9302      	str	r3, [sp, #8]
 8006ab6:	f000 fa6d 	bl	8006f94 <__lshift>
 8006aba:	4621      	mov	r1, r4
 8006abc:	4682      	mov	sl, r0
 8006abe:	f000 fad5 	bl	800706c <__mcmp>
 8006ac2:	2800      	cmp	r0, #0
 8006ac4:	dcb2      	bgt.n	8006a2c <_dtoa_r+0xac4>
 8006ac6:	d102      	bne.n	8006ace <_dtoa_r+0xb66>
 8006ac8:	9b02      	ldr	r3, [sp, #8]
 8006aca:	07db      	lsls	r3, r3, #31
 8006acc:	d4ae      	bmi.n	8006a2c <_dtoa_r+0xac4>
 8006ace:	463b      	mov	r3, r7
 8006ad0:	461f      	mov	r7, r3
 8006ad2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ad6:	2a30      	cmp	r2, #48	; 0x30
 8006ad8:	d0fa      	beq.n	8006ad0 <_dtoa_r+0xb68>
 8006ada:	e6fb      	b.n	80068d4 <_dtoa_r+0x96c>
 8006adc:	9a08      	ldr	r2, [sp, #32]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d1a5      	bne.n	8006a2e <_dtoa_r+0xac6>
 8006ae2:	2331      	movs	r3, #49	; 0x31
 8006ae4:	f109 0901 	add.w	r9, r9, #1
 8006ae8:	7013      	strb	r3, [r2, #0]
 8006aea:	e6f3      	b.n	80068d4 <_dtoa_r+0x96c>
 8006aec:	4b13      	ldr	r3, [pc, #76]	; (8006b3c <_dtoa_r+0xbd4>)
 8006aee:	f7ff baa7 	b.w	8006040 <_dtoa_r+0xd8>
 8006af2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f47f aa80 	bne.w	8005ffa <_dtoa_r+0x92>
 8006afa:	4b11      	ldr	r3, [pc, #68]	; (8006b40 <_dtoa_r+0xbd8>)
 8006afc:	f7ff baa0 	b.w	8006040 <_dtoa_r+0xd8>
 8006b00:	f1bb 0f00 	cmp.w	fp, #0
 8006b04:	dc03      	bgt.n	8006b0e <_dtoa_r+0xba6>
 8006b06:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b08:	2b02      	cmp	r3, #2
 8006b0a:	f73f aecc 	bgt.w	80068a6 <_dtoa_r+0x93e>
 8006b0e:	9f08      	ldr	r7, [sp, #32]
 8006b10:	4621      	mov	r1, r4
 8006b12:	4650      	mov	r0, sl
 8006b14:	f7ff f99a 	bl	8005e4c <quorem>
 8006b18:	9a08      	ldr	r2, [sp, #32]
 8006b1a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006b1e:	f807 3b01 	strb.w	r3, [r7], #1
 8006b22:	1aba      	subs	r2, r7, r2
 8006b24:	4593      	cmp	fp, r2
 8006b26:	ddb9      	ble.n	8006a9c <_dtoa_r+0xb34>
 8006b28:	4651      	mov	r1, sl
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	220a      	movs	r2, #10
 8006b2e:	4628      	mov	r0, r5
 8006b30:	f000 f884 	bl	8006c3c <__multadd>
 8006b34:	4682      	mov	sl, r0
 8006b36:	e7eb      	b.n	8006b10 <_dtoa_r+0xba8>
 8006b38:	080083d7 	.word	0x080083d7
 8006b3c:	08008330 	.word	0x08008330
 8006b40:	08008354 	.word	0x08008354

08006b44 <_localeconv_r>:
 8006b44:	4800      	ldr	r0, [pc, #0]	; (8006b48 <_localeconv_r+0x4>)
 8006b46:	4770      	bx	lr
 8006b48:	20000160 	.word	0x20000160

08006b4c <malloc>:
 8006b4c:	4b02      	ldr	r3, [pc, #8]	; (8006b58 <malloc+0xc>)
 8006b4e:	4601      	mov	r1, r0
 8006b50:	6818      	ldr	r0, [r3, #0]
 8006b52:	f000 bbed 	b.w	8007330 <_malloc_r>
 8006b56:	bf00      	nop
 8006b58:	2000000c 	.word	0x2000000c

08006b5c <memchr>:
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	b510      	push	{r4, lr}
 8006b60:	b2c9      	uxtb	r1, r1
 8006b62:	4402      	add	r2, r0
 8006b64:	4293      	cmp	r3, r2
 8006b66:	4618      	mov	r0, r3
 8006b68:	d101      	bne.n	8006b6e <memchr+0x12>
 8006b6a:	2000      	movs	r0, #0
 8006b6c:	e003      	b.n	8006b76 <memchr+0x1a>
 8006b6e:	7804      	ldrb	r4, [r0, #0]
 8006b70:	3301      	adds	r3, #1
 8006b72:	428c      	cmp	r4, r1
 8006b74:	d1f6      	bne.n	8006b64 <memchr+0x8>
 8006b76:	bd10      	pop	{r4, pc}

08006b78 <_Balloc>:
 8006b78:	b570      	push	{r4, r5, r6, lr}
 8006b7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006b7c:	4604      	mov	r4, r0
 8006b7e:	460d      	mov	r5, r1
 8006b80:	b976      	cbnz	r6, 8006ba0 <_Balloc+0x28>
 8006b82:	2010      	movs	r0, #16
 8006b84:	f7ff ffe2 	bl	8006b4c <malloc>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	6260      	str	r0, [r4, #36]	; 0x24
 8006b8c:	b920      	cbnz	r0, 8006b98 <_Balloc+0x20>
 8006b8e:	2166      	movs	r1, #102	; 0x66
 8006b90:	4b17      	ldr	r3, [pc, #92]	; (8006bf0 <_Balloc+0x78>)
 8006b92:	4818      	ldr	r0, [pc, #96]	; (8006bf4 <_Balloc+0x7c>)
 8006b94:	f000 fd92 	bl	80076bc <__assert_func>
 8006b98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b9c:	6006      	str	r6, [r0, #0]
 8006b9e:	60c6      	str	r6, [r0, #12]
 8006ba0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006ba2:	68f3      	ldr	r3, [r6, #12]
 8006ba4:	b183      	cbz	r3, 8006bc8 <_Balloc+0x50>
 8006ba6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006bae:	b9b8      	cbnz	r0, 8006be0 <_Balloc+0x68>
 8006bb0:	2101      	movs	r1, #1
 8006bb2:	fa01 f605 	lsl.w	r6, r1, r5
 8006bb6:	1d72      	adds	r2, r6, #5
 8006bb8:	4620      	mov	r0, r4
 8006bba:	0092      	lsls	r2, r2, #2
 8006bbc:	f000 fb5e 	bl	800727c <_calloc_r>
 8006bc0:	b160      	cbz	r0, 8006bdc <_Balloc+0x64>
 8006bc2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006bc6:	e00e      	b.n	8006be6 <_Balloc+0x6e>
 8006bc8:	2221      	movs	r2, #33	; 0x21
 8006bca:	2104      	movs	r1, #4
 8006bcc:	4620      	mov	r0, r4
 8006bce:	f000 fb55 	bl	800727c <_calloc_r>
 8006bd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bd4:	60f0      	str	r0, [r6, #12]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1e4      	bne.n	8006ba6 <_Balloc+0x2e>
 8006bdc:	2000      	movs	r0, #0
 8006bde:	bd70      	pop	{r4, r5, r6, pc}
 8006be0:	6802      	ldr	r2, [r0, #0]
 8006be2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006be6:	2300      	movs	r3, #0
 8006be8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006bec:	e7f7      	b.n	8006bde <_Balloc+0x66>
 8006bee:	bf00      	nop
 8006bf0:	08008361 	.word	0x08008361
 8006bf4:	080083e8 	.word	0x080083e8

08006bf8 <_Bfree>:
 8006bf8:	b570      	push	{r4, r5, r6, lr}
 8006bfa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006bfc:	4605      	mov	r5, r0
 8006bfe:	460c      	mov	r4, r1
 8006c00:	b976      	cbnz	r6, 8006c20 <_Bfree+0x28>
 8006c02:	2010      	movs	r0, #16
 8006c04:	f7ff ffa2 	bl	8006b4c <malloc>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	6268      	str	r0, [r5, #36]	; 0x24
 8006c0c:	b920      	cbnz	r0, 8006c18 <_Bfree+0x20>
 8006c0e:	218a      	movs	r1, #138	; 0x8a
 8006c10:	4b08      	ldr	r3, [pc, #32]	; (8006c34 <_Bfree+0x3c>)
 8006c12:	4809      	ldr	r0, [pc, #36]	; (8006c38 <_Bfree+0x40>)
 8006c14:	f000 fd52 	bl	80076bc <__assert_func>
 8006c18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c1c:	6006      	str	r6, [r0, #0]
 8006c1e:	60c6      	str	r6, [r0, #12]
 8006c20:	b13c      	cbz	r4, 8006c32 <_Bfree+0x3a>
 8006c22:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006c24:	6862      	ldr	r2, [r4, #4]
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c2c:	6021      	str	r1, [r4, #0]
 8006c2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006c32:	bd70      	pop	{r4, r5, r6, pc}
 8006c34:	08008361 	.word	0x08008361
 8006c38:	080083e8 	.word	0x080083e8

08006c3c <__multadd>:
 8006c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c40:	4698      	mov	r8, r3
 8006c42:	460c      	mov	r4, r1
 8006c44:	2300      	movs	r3, #0
 8006c46:	690e      	ldr	r6, [r1, #16]
 8006c48:	4607      	mov	r7, r0
 8006c4a:	f101 0014 	add.w	r0, r1, #20
 8006c4e:	6805      	ldr	r5, [r0, #0]
 8006c50:	3301      	adds	r3, #1
 8006c52:	b2a9      	uxth	r1, r5
 8006c54:	fb02 8101 	mla	r1, r2, r1, r8
 8006c58:	0c2d      	lsrs	r5, r5, #16
 8006c5a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006c5e:	fb02 c505 	mla	r5, r2, r5, ip
 8006c62:	b289      	uxth	r1, r1
 8006c64:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006c68:	429e      	cmp	r6, r3
 8006c6a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006c6e:	f840 1b04 	str.w	r1, [r0], #4
 8006c72:	dcec      	bgt.n	8006c4e <__multadd+0x12>
 8006c74:	f1b8 0f00 	cmp.w	r8, #0
 8006c78:	d022      	beq.n	8006cc0 <__multadd+0x84>
 8006c7a:	68a3      	ldr	r3, [r4, #8]
 8006c7c:	42b3      	cmp	r3, r6
 8006c7e:	dc19      	bgt.n	8006cb4 <__multadd+0x78>
 8006c80:	6861      	ldr	r1, [r4, #4]
 8006c82:	4638      	mov	r0, r7
 8006c84:	3101      	adds	r1, #1
 8006c86:	f7ff ff77 	bl	8006b78 <_Balloc>
 8006c8a:	4605      	mov	r5, r0
 8006c8c:	b928      	cbnz	r0, 8006c9a <__multadd+0x5e>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	21b5      	movs	r1, #181	; 0xb5
 8006c92:	4b0d      	ldr	r3, [pc, #52]	; (8006cc8 <__multadd+0x8c>)
 8006c94:	480d      	ldr	r0, [pc, #52]	; (8006ccc <__multadd+0x90>)
 8006c96:	f000 fd11 	bl	80076bc <__assert_func>
 8006c9a:	6922      	ldr	r2, [r4, #16]
 8006c9c:	f104 010c 	add.w	r1, r4, #12
 8006ca0:	3202      	adds	r2, #2
 8006ca2:	0092      	lsls	r2, r2, #2
 8006ca4:	300c      	adds	r0, #12
 8006ca6:	f7fe fc3b 	bl	8005520 <memcpy>
 8006caa:	4621      	mov	r1, r4
 8006cac:	4638      	mov	r0, r7
 8006cae:	f7ff ffa3 	bl	8006bf8 <_Bfree>
 8006cb2:	462c      	mov	r4, r5
 8006cb4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006cb8:	3601      	adds	r6, #1
 8006cba:	f8c3 8014 	str.w	r8, [r3, #20]
 8006cbe:	6126      	str	r6, [r4, #16]
 8006cc0:	4620      	mov	r0, r4
 8006cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cc6:	bf00      	nop
 8006cc8:	080083d7 	.word	0x080083d7
 8006ccc:	080083e8 	.word	0x080083e8

08006cd0 <__hi0bits>:
 8006cd0:	0c02      	lsrs	r2, r0, #16
 8006cd2:	0412      	lsls	r2, r2, #16
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	b9ca      	cbnz	r2, 8006d0c <__hi0bits+0x3c>
 8006cd8:	0403      	lsls	r3, r0, #16
 8006cda:	2010      	movs	r0, #16
 8006cdc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006ce0:	bf04      	itt	eq
 8006ce2:	021b      	lsleq	r3, r3, #8
 8006ce4:	3008      	addeq	r0, #8
 8006ce6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006cea:	bf04      	itt	eq
 8006cec:	011b      	lsleq	r3, r3, #4
 8006cee:	3004      	addeq	r0, #4
 8006cf0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006cf4:	bf04      	itt	eq
 8006cf6:	009b      	lsleq	r3, r3, #2
 8006cf8:	3002      	addeq	r0, #2
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	db05      	blt.n	8006d0a <__hi0bits+0x3a>
 8006cfe:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006d02:	f100 0001 	add.w	r0, r0, #1
 8006d06:	bf08      	it	eq
 8006d08:	2020      	moveq	r0, #32
 8006d0a:	4770      	bx	lr
 8006d0c:	2000      	movs	r0, #0
 8006d0e:	e7e5      	b.n	8006cdc <__hi0bits+0xc>

08006d10 <__lo0bits>:
 8006d10:	6803      	ldr	r3, [r0, #0]
 8006d12:	4602      	mov	r2, r0
 8006d14:	f013 0007 	ands.w	r0, r3, #7
 8006d18:	d00b      	beq.n	8006d32 <__lo0bits+0x22>
 8006d1a:	07d9      	lsls	r1, r3, #31
 8006d1c:	d422      	bmi.n	8006d64 <__lo0bits+0x54>
 8006d1e:	0798      	lsls	r0, r3, #30
 8006d20:	bf49      	itett	mi
 8006d22:	085b      	lsrmi	r3, r3, #1
 8006d24:	089b      	lsrpl	r3, r3, #2
 8006d26:	2001      	movmi	r0, #1
 8006d28:	6013      	strmi	r3, [r2, #0]
 8006d2a:	bf5c      	itt	pl
 8006d2c:	2002      	movpl	r0, #2
 8006d2e:	6013      	strpl	r3, [r2, #0]
 8006d30:	4770      	bx	lr
 8006d32:	b299      	uxth	r1, r3
 8006d34:	b909      	cbnz	r1, 8006d3a <__lo0bits+0x2a>
 8006d36:	2010      	movs	r0, #16
 8006d38:	0c1b      	lsrs	r3, r3, #16
 8006d3a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006d3e:	bf04      	itt	eq
 8006d40:	0a1b      	lsreq	r3, r3, #8
 8006d42:	3008      	addeq	r0, #8
 8006d44:	0719      	lsls	r1, r3, #28
 8006d46:	bf04      	itt	eq
 8006d48:	091b      	lsreq	r3, r3, #4
 8006d4a:	3004      	addeq	r0, #4
 8006d4c:	0799      	lsls	r1, r3, #30
 8006d4e:	bf04      	itt	eq
 8006d50:	089b      	lsreq	r3, r3, #2
 8006d52:	3002      	addeq	r0, #2
 8006d54:	07d9      	lsls	r1, r3, #31
 8006d56:	d403      	bmi.n	8006d60 <__lo0bits+0x50>
 8006d58:	085b      	lsrs	r3, r3, #1
 8006d5a:	f100 0001 	add.w	r0, r0, #1
 8006d5e:	d003      	beq.n	8006d68 <__lo0bits+0x58>
 8006d60:	6013      	str	r3, [r2, #0]
 8006d62:	4770      	bx	lr
 8006d64:	2000      	movs	r0, #0
 8006d66:	4770      	bx	lr
 8006d68:	2020      	movs	r0, #32
 8006d6a:	4770      	bx	lr

08006d6c <__i2b>:
 8006d6c:	b510      	push	{r4, lr}
 8006d6e:	460c      	mov	r4, r1
 8006d70:	2101      	movs	r1, #1
 8006d72:	f7ff ff01 	bl	8006b78 <_Balloc>
 8006d76:	4602      	mov	r2, r0
 8006d78:	b928      	cbnz	r0, 8006d86 <__i2b+0x1a>
 8006d7a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006d7e:	4b04      	ldr	r3, [pc, #16]	; (8006d90 <__i2b+0x24>)
 8006d80:	4804      	ldr	r0, [pc, #16]	; (8006d94 <__i2b+0x28>)
 8006d82:	f000 fc9b 	bl	80076bc <__assert_func>
 8006d86:	2301      	movs	r3, #1
 8006d88:	6144      	str	r4, [r0, #20]
 8006d8a:	6103      	str	r3, [r0, #16]
 8006d8c:	bd10      	pop	{r4, pc}
 8006d8e:	bf00      	nop
 8006d90:	080083d7 	.word	0x080083d7
 8006d94:	080083e8 	.word	0x080083e8

08006d98 <__multiply>:
 8006d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d9c:	4614      	mov	r4, r2
 8006d9e:	690a      	ldr	r2, [r1, #16]
 8006da0:	6923      	ldr	r3, [r4, #16]
 8006da2:	460d      	mov	r5, r1
 8006da4:	429a      	cmp	r2, r3
 8006da6:	bfbe      	ittt	lt
 8006da8:	460b      	movlt	r3, r1
 8006daa:	4625      	movlt	r5, r4
 8006dac:	461c      	movlt	r4, r3
 8006dae:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006db2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006db6:	68ab      	ldr	r3, [r5, #8]
 8006db8:	6869      	ldr	r1, [r5, #4]
 8006dba:	eb0a 0709 	add.w	r7, sl, r9
 8006dbe:	42bb      	cmp	r3, r7
 8006dc0:	b085      	sub	sp, #20
 8006dc2:	bfb8      	it	lt
 8006dc4:	3101      	addlt	r1, #1
 8006dc6:	f7ff fed7 	bl	8006b78 <_Balloc>
 8006dca:	b930      	cbnz	r0, 8006dda <__multiply+0x42>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	f240 115d 	movw	r1, #349	; 0x15d
 8006dd2:	4b41      	ldr	r3, [pc, #260]	; (8006ed8 <__multiply+0x140>)
 8006dd4:	4841      	ldr	r0, [pc, #260]	; (8006edc <__multiply+0x144>)
 8006dd6:	f000 fc71 	bl	80076bc <__assert_func>
 8006dda:	f100 0614 	add.w	r6, r0, #20
 8006dde:	4633      	mov	r3, r6
 8006de0:	2200      	movs	r2, #0
 8006de2:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006de6:	4543      	cmp	r3, r8
 8006de8:	d31e      	bcc.n	8006e28 <__multiply+0x90>
 8006dea:	f105 0c14 	add.w	ip, r5, #20
 8006dee:	f104 0314 	add.w	r3, r4, #20
 8006df2:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006df6:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006dfa:	9202      	str	r2, [sp, #8]
 8006dfc:	ebac 0205 	sub.w	r2, ip, r5
 8006e00:	3a15      	subs	r2, #21
 8006e02:	f022 0203 	bic.w	r2, r2, #3
 8006e06:	3204      	adds	r2, #4
 8006e08:	f105 0115 	add.w	r1, r5, #21
 8006e0c:	458c      	cmp	ip, r1
 8006e0e:	bf38      	it	cc
 8006e10:	2204      	movcc	r2, #4
 8006e12:	9201      	str	r2, [sp, #4]
 8006e14:	9a02      	ldr	r2, [sp, #8]
 8006e16:	9303      	str	r3, [sp, #12]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d808      	bhi.n	8006e2e <__multiply+0x96>
 8006e1c:	2f00      	cmp	r7, #0
 8006e1e:	dc55      	bgt.n	8006ecc <__multiply+0x134>
 8006e20:	6107      	str	r7, [r0, #16]
 8006e22:	b005      	add	sp, #20
 8006e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e28:	f843 2b04 	str.w	r2, [r3], #4
 8006e2c:	e7db      	b.n	8006de6 <__multiply+0x4e>
 8006e2e:	f8b3 a000 	ldrh.w	sl, [r3]
 8006e32:	f1ba 0f00 	cmp.w	sl, #0
 8006e36:	d020      	beq.n	8006e7a <__multiply+0xe2>
 8006e38:	46b1      	mov	r9, r6
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f105 0e14 	add.w	lr, r5, #20
 8006e40:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006e44:	f8d9 b000 	ldr.w	fp, [r9]
 8006e48:	b2a1      	uxth	r1, r4
 8006e4a:	fa1f fb8b 	uxth.w	fp, fp
 8006e4e:	fb0a b101 	mla	r1, sl, r1, fp
 8006e52:	4411      	add	r1, r2
 8006e54:	f8d9 2000 	ldr.w	r2, [r9]
 8006e58:	0c24      	lsrs	r4, r4, #16
 8006e5a:	0c12      	lsrs	r2, r2, #16
 8006e5c:	fb0a 2404 	mla	r4, sl, r4, r2
 8006e60:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006e64:	b289      	uxth	r1, r1
 8006e66:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006e6a:	45f4      	cmp	ip, lr
 8006e6c:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006e70:	f849 1b04 	str.w	r1, [r9], #4
 8006e74:	d8e4      	bhi.n	8006e40 <__multiply+0xa8>
 8006e76:	9901      	ldr	r1, [sp, #4]
 8006e78:	5072      	str	r2, [r6, r1]
 8006e7a:	9a03      	ldr	r2, [sp, #12]
 8006e7c:	3304      	adds	r3, #4
 8006e7e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006e82:	f1b9 0f00 	cmp.w	r9, #0
 8006e86:	d01f      	beq.n	8006ec8 <__multiply+0x130>
 8006e88:	46b6      	mov	lr, r6
 8006e8a:	f04f 0a00 	mov.w	sl, #0
 8006e8e:	6834      	ldr	r4, [r6, #0]
 8006e90:	f105 0114 	add.w	r1, r5, #20
 8006e94:	880a      	ldrh	r2, [r1, #0]
 8006e96:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006e9a:	b2a4      	uxth	r4, r4
 8006e9c:	fb09 b202 	mla	r2, r9, r2, fp
 8006ea0:	4492      	add	sl, r2
 8006ea2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006ea6:	f84e 4b04 	str.w	r4, [lr], #4
 8006eaa:	f851 4b04 	ldr.w	r4, [r1], #4
 8006eae:	f8be 2000 	ldrh.w	r2, [lr]
 8006eb2:	0c24      	lsrs	r4, r4, #16
 8006eb4:	fb09 2404 	mla	r4, r9, r4, r2
 8006eb8:	458c      	cmp	ip, r1
 8006eba:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006ebe:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006ec2:	d8e7      	bhi.n	8006e94 <__multiply+0xfc>
 8006ec4:	9a01      	ldr	r2, [sp, #4]
 8006ec6:	50b4      	str	r4, [r6, r2]
 8006ec8:	3604      	adds	r6, #4
 8006eca:	e7a3      	b.n	8006e14 <__multiply+0x7c>
 8006ecc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d1a5      	bne.n	8006e20 <__multiply+0x88>
 8006ed4:	3f01      	subs	r7, #1
 8006ed6:	e7a1      	b.n	8006e1c <__multiply+0x84>
 8006ed8:	080083d7 	.word	0x080083d7
 8006edc:	080083e8 	.word	0x080083e8

08006ee0 <__pow5mult>:
 8006ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ee4:	4615      	mov	r5, r2
 8006ee6:	f012 0203 	ands.w	r2, r2, #3
 8006eea:	4606      	mov	r6, r0
 8006eec:	460f      	mov	r7, r1
 8006eee:	d007      	beq.n	8006f00 <__pow5mult+0x20>
 8006ef0:	4c25      	ldr	r4, [pc, #148]	; (8006f88 <__pow5mult+0xa8>)
 8006ef2:	3a01      	subs	r2, #1
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006efa:	f7ff fe9f 	bl	8006c3c <__multadd>
 8006efe:	4607      	mov	r7, r0
 8006f00:	10ad      	asrs	r5, r5, #2
 8006f02:	d03d      	beq.n	8006f80 <__pow5mult+0xa0>
 8006f04:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006f06:	b97c      	cbnz	r4, 8006f28 <__pow5mult+0x48>
 8006f08:	2010      	movs	r0, #16
 8006f0a:	f7ff fe1f 	bl	8006b4c <malloc>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	6270      	str	r0, [r6, #36]	; 0x24
 8006f12:	b928      	cbnz	r0, 8006f20 <__pow5mult+0x40>
 8006f14:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006f18:	4b1c      	ldr	r3, [pc, #112]	; (8006f8c <__pow5mult+0xac>)
 8006f1a:	481d      	ldr	r0, [pc, #116]	; (8006f90 <__pow5mult+0xb0>)
 8006f1c:	f000 fbce 	bl	80076bc <__assert_func>
 8006f20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f24:	6004      	str	r4, [r0, #0]
 8006f26:	60c4      	str	r4, [r0, #12]
 8006f28:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006f2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006f30:	b94c      	cbnz	r4, 8006f46 <__pow5mult+0x66>
 8006f32:	f240 2171 	movw	r1, #625	; 0x271
 8006f36:	4630      	mov	r0, r6
 8006f38:	f7ff ff18 	bl	8006d6c <__i2b>
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	4604      	mov	r4, r0
 8006f40:	f8c8 0008 	str.w	r0, [r8, #8]
 8006f44:	6003      	str	r3, [r0, #0]
 8006f46:	f04f 0900 	mov.w	r9, #0
 8006f4a:	07eb      	lsls	r3, r5, #31
 8006f4c:	d50a      	bpl.n	8006f64 <__pow5mult+0x84>
 8006f4e:	4639      	mov	r1, r7
 8006f50:	4622      	mov	r2, r4
 8006f52:	4630      	mov	r0, r6
 8006f54:	f7ff ff20 	bl	8006d98 <__multiply>
 8006f58:	4680      	mov	r8, r0
 8006f5a:	4639      	mov	r1, r7
 8006f5c:	4630      	mov	r0, r6
 8006f5e:	f7ff fe4b 	bl	8006bf8 <_Bfree>
 8006f62:	4647      	mov	r7, r8
 8006f64:	106d      	asrs	r5, r5, #1
 8006f66:	d00b      	beq.n	8006f80 <__pow5mult+0xa0>
 8006f68:	6820      	ldr	r0, [r4, #0]
 8006f6a:	b938      	cbnz	r0, 8006f7c <__pow5mult+0x9c>
 8006f6c:	4622      	mov	r2, r4
 8006f6e:	4621      	mov	r1, r4
 8006f70:	4630      	mov	r0, r6
 8006f72:	f7ff ff11 	bl	8006d98 <__multiply>
 8006f76:	6020      	str	r0, [r4, #0]
 8006f78:	f8c0 9000 	str.w	r9, [r0]
 8006f7c:	4604      	mov	r4, r0
 8006f7e:	e7e4      	b.n	8006f4a <__pow5mult+0x6a>
 8006f80:	4638      	mov	r0, r7
 8006f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f86:	bf00      	nop
 8006f88:	08008538 	.word	0x08008538
 8006f8c:	08008361 	.word	0x08008361
 8006f90:	080083e8 	.word	0x080083e8

08006f94 <__lshift>:
 8006f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f98:	460c      	mov	r4, r1
 8006f9a:	4607      	mov	r7, r0
 8006f9c:	4691      	mov	r9, r2
 8006f9e:	6923      	ldr	r3, [r4, #16]
 8006fa0:	6849      	ldr	r1, [r1, #4]
 8006fa2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006fa6:	68a3      	ldr	r3, [r4, #8]
 8006fa8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006fac:	f108 0601 	add.w	r6, r8, #1
 8006fb0:	42b3      	cmp	r3, r6
 8006fb2:	db0b      	blt.n	8006fcc <__lshift+0x38>
 8006fb4:	4638      	mov	r0, r7
 8006fb6:	f7ff fddf 	bl	8006b78 <_Balloc>
 8006fba:	4605      	mov	r5, r0
 8006fbc:	b948      	cbnz	r0, 8006fd2 <__lshift+0x3e>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006fc4:	4b27      	ldr	r3, [pc, #156]	; (8007064 <__lshift+0xd0>)
 8006fc6:	4828      	ldr	r0, [pc, #160]	; (8007068 <__lshift+0xd4>)
 8006fc8:	f000 fb78 	bl	80076bc <__assert_func>
 8006fcc:	3101      	adds	r1, #1
 8006fce:	005b      	lsls	r3, r3, #1
 8006fd0:	e7ee      	b.n	8006fb0 <__lshift+0x1c>
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	f100 0114 	add.w	r1, r0, #20
 8006fd8:	f100 0210 	add.w	r2, r0, #16
 8006fdc:	4618      	mov	r0, r3
 8006fde:	4553      	cmp	r3, sl
 8006fe0:	db33      	blt.n	800704a <__lshift+0xb6>
 8006fe2:	6920      	ldr	r0, [r4, #16]
 8006fe4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006fe8:	f104 0314 	add.w	r3, r4, #20
 8006fec:	f019 091f 	ands.w	r9, r9, #31
 8006ff0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ff4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006ff8:	d02b      	beq.n	8007052 <__lshift+0xbe>
 8006ffa:	468a      	mov	sl, r1
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f1c9 0e20 	rsb	lr, r9, #32
 8007002:	6818      	ldr	r0, [r3, #0]
 8007004:	fa00 f009 	lsl.w	r0, r0, r9
 8007008:	4302      	orrs	r2, r0
 800700a:	f84a 2b04 	str.w	r2, [sl], #4
 800700e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007012:	459c      	cmp	ip, r3
 8007014:	fa22 f20e 	lsr.w	r2, r2, lr
 8007018:	d8f3      	bhi.n	8007002 <__lshift+0x6e>
 800701a:	ebac 0304 	sub.w	r3, ip, r4
 800701e:	3b15      	subs	r3, #21
 8007020:	f023 0303 	bic.w	r3, r3, #3
 8007024:	3304      	adds	r3, #4
 8007026:	f104 0015 	add.w	r0, r4, #21
 800702a:	4584      	cmp	ip, r0
 800702c:	bf38      	it	cc
 800702e:	2304      	movcc	r3, #4
 8007030:	50ca      	str	r2, [r1, r3]
 8007032:	b10a      	cbz	r2, 8007038 <__lshift+0xa4>
 8007034:	f108 0602 	add.w	r6, r8, #2
 8007038:	3e01      	subs	r6, #1
 800703a:	4638      	mov	r0, r7
 800703c:	4621      	mov	r1, r4
 800703e:	612e      	str	r6, [r5, #16]
 8007040:	f7ff fdda 	bl	8006bf8 <_Bfree>
 8007044:	4628      	mov	r0, r5
 8007046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800704a:	f842 0f04 	str.w	r0, [r2, #4]!
 800704e:	3301      	adds	r3, #1
 8007050:	e7c5      	b.n	8006fde <__lshift+0x4a>
 8007052:	3904      	subs	r1, #4
 8007054:	f853 2b04 	ldr.w	r2, [r3], #4
 8007058:	459c      	cmp	ip, r3
 800705a:	f841 2f04 	str.w	r2, [r1, #4]!
 800705e:	d8f9      	bhi.n	8007054 <__lshift+0xc0>
 8007060:	e7ea      	b.n	8007038 <__lshift+0xa4>
 8007062:	bf00      	nop
 8007064:	080083d7 	.word	0x080083d7
 8007068:	080083e8 	.word	0x080083e8

0800706c <__mcmp>:
 800706c:	4603      	mov	r3, r0
 800706e:	690a      	ldr	r2, [r1, #16]
 8007070:	6900      	ldr	r0, [r0, #16]
 8007072:	b530      	push	{r4, r5, lr}
 8007074:	1a80      	subs	r0, r0, r2
 8007076:	d10d      	bne.n	8007094 <__mcmp+0x28>
 8007078:	3314      	adds	r3, #20
 800707a:	3114      	adds	r1, #20
 800707c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007080:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007084:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007088:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800708c:	4295      	cmp	r5, r2
 800708e:	d002      	beq.n	8007096 <__mcmp+0x2a>
 8007090:	d304      	bcc.n	800709c <__mcmp+0x30>
 8007092:	2001      	movs	r0, #1
 8007094:	bd30      	pop	{r4, r5, pc}
 8007096:	42a3      	cmp	r3, r4
 8007098:	d3f4      	bcc.n	8007084 <__mcmp+0x18>
 800709a:	e7fb      	b.n	8007094 <__mcmp+0x28>
 800709c:	f04f 30ff 	mov.w	r0, #4294967295
 80070a0:	e7f8      	b.n	8007094 <__mcmp+0x28>
	...

080070a4 <__mdiff>:
 80070a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070a8:	460c      	mov	r4, r1
 80070aa:	4606      	mov	r6, r0
 80070ac:	4611      	mov	r1, r2
 80070ae:	4620      	mov	r0, r4
 80070b0:	4692      	mov	sl, r2
 80070b2:	f7ff ffdb 	bl	800706c <__mcmp>
 80070b6:	1e05      	subs	r5, r0, #0
 80070b8:	d111      	bne.n	80070de <__mdiff+0x3a>
 80070ba:	4629      	mov	r1, r5
 80070bc:	4630      	mov	r0, r6
 80070be:	f7ff fd5b 	bl	8006b78 <_Balloc>
 80070c2:	4602      	mov	r2, r0
 80070c4:	b928      	cbnz	r0, 80070d2 <__mdiff+0x2e>
 80070c6:	f240 2132 	movw	r1, #562	; 0x232
 80070ca:	4b3c      	ldr	r3, [pc, #240]	; (80071bc <__mdiff+0x118>)
 80070cc:	483c      	ldr	r0, [pc, #240]	; (80071c0 <__mdiff+0x11c>)
 80070ce:	f000 faf5 	bl	80076bc <__assert_func>
 80070d2:	2301      	movs	r3, #1
 80070d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80070d8:	4610      	mov	r0, r2
 80070da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070de:	bfa4      	itt	ge
 80070e0:	4653      	movge	r3, sl
 80070e2:	46a2      	movge	sl, r4
 80070e4:	4630      	mov	r0, r6
 80070e6:	f8da 1004 	ldr.w	r1, [sl, #4]
 80070ea:	bfa6      	itte	ge
 80070ec:	461c      	movge	r4, r3
 80070ee:	2500      	movge	r5, #0
 80070f0:	2501      	movlt	r5, #1
 80070f2:	f7ff fd41 	bl	8006b78 <_Balloc>
 80070f6:	4602      	mov	r2, r0
 80070f8:	b918      	cbnz	r0, 8007102 <__mdiff+0x5e>
 80070fa:	f44f 7110 	mov.w	r1, #576	; 0x240
 80070fe:	4b2f      	ldr	r3, [pc, #188]	; (80071bc <__mdiff+0x118>)
 8007100:	e7e4      	b.n	80070cc <__mdiff+0x28>
 8007102:	f100 0814 	add.w	r8, r0, #20
 8007106:	f8da 7010 	ldr.w	r7, [sl, #16]
 800710a:	60c5      	str	r5, [r0, #12]
 800710c:	f04f 0c00 	mov.w	ip, #0
 8007110:	f10a 0514 	add.w	r5, sl, #20
 8007114:	f10a 0010 	add.w	r0, sl, #16
 8007118:	46c2      	mov	sl, r8
 800711a:	6926      	ldr	r6, [r4, #16]
 800711c:	f104 0914 	add.w	r9, r4, #20
 8007120:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8007124:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007128:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800712c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007130:	fa1f f18b 	uxth.w	r1, fp
 8007134:	4461      	add	r1, ip
 8007136:	fa1f fc83 	uxth.w	ip, r3
 800713a:	0c1b      	lsrs	r3, r3, #16
 800713c:	eba1 010c 	sub.w	r1, r1, ip
 8007140:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007144:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007148:	b289      	uxth	r1, r1
 800714a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800714e:	454e      	cmp	r6, r9
 8007150:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007154:	f84a 3b04 	str.w	r3, [sl], #4
 8007158:	d8e6      	bhi.n	8007128 <__mdiff+0x84>
 800715a:	1b33      	subs	r3, r6, r4
 800715c:	3b15      	subs	r3, #21
 800715e:	f023 0303 	bic.w	r3, r3, #3
 8007162:	3415      	adds	r4, #21
 8007164:	3304      	adds	r3, #4
 8007166:	42a6      	cmp	r6, r4
 8007168:	bf38      	it	cc
 800716a:	2304      	movcc	r3, #4
 800716c:	441d      	add	r5, r3
 800716e:	4443      	add	r3, r8
 8007170:	461e      	mov	r6, r3
 8007172:	462c      	mov	r4, r5
 8007174:	4574      	cmp	r4, lr
 8007176:	d30e      	bcc.n	8007196 <__mdiff+0xf2>
 8007178:	f10e 0103 	add.w	r1, lr, #3
 800717c:	1b49      	subs	r1, r1, r5
 800717e:	f021 0103 	bic.w	r1, r1, #3
 8007182:	3d03      	subs	r5, #3
 8007184:	45ae      	cmp	lr, r5
 8007186:	bf38      	it	cc
 8007188:	2100      	movcc	r1, #0
 800718a:	4419      	add	r1, r3
 800718c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007190:	b18b      	cbz	r3, 80071b6 <__mdiff+0x112>
 8007192:	6117      	str	r7, [r2, #16]
 8007194:	e7a0      	b.n	80070d8 <__mdiff+0x34>
 8007196:	f854 8b04 	ldr.w	r8, [r4], #4
 800719a:	fa1f f188 	uxth.w	r1, r8
 800719e:	4461      	add	r1, ip
 80071a0:	1408      	asrs	r0, r1, #16
 80071a2:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 80071a6:	b289      	uxth	r1, r1
 80071a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80071ac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80071b0:	f846 1b04 	str.w	r1, [r6], #4
 80071b4:	e7de      	b.n	8007174 <__mdiff+0xd0>
 80071b6:	3f01      	subs	r7, #1
 80071b8:	e7e8      	b.n	800718c <__mdiff+0xe8>
 80071ba:	bf00      	nop
 80071bc:	080083d7 	.word	0x080083d7
 80071c0:	080083e8 	.word	0x080083e8

080071c4 <__d2b>:
 80071c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80071c8:	2101      	movs	r1, #1
 80071ca:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80071ce:	4690      	mov	r8, r2
 80071d0:	461d      	mov	r5, r3
 80071d2:	f7ff fcd1 	bl	8006b78 <_Balloc>
 80071d6:	4604      	mov	r4, r0
 80071d8:	b930      	cbnz	r0, 80071e8 <__d2b+0x24>
 80071da:	4602      	mov	r2, r0
 80071dc:	f240 310a 	movw	r1, #778	; 0x30a
 80071e0:	4b24      	ldr	r3, [pc, #144]	; (8007274 <__d2b+0xb0>)
 80071e2:	4825      	ldr	r0, [pc, #148]	; (8007278 <__d2b+0xb4>)
 80071e4:	f000 fa6a 	bl	80076bc <__assert_func>
 80071e8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80071ec:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80071f0:	bb2d      	cbnz	r5, 800723e <__d2b+0x7a>
 80071f2:	9301      	str	r3, [sp, #4]
 80071f4:	f1b8 0300 	subs.w	r3, r8, #0
 80071f8:	d026      	beq.n	8007248 <__d2b+0x84>
 80071fa:	4668      	mov	r0, sp
 80071fc:	9300      	str	r3, [sp, #0]
 80071fe:	f7ff fd87 	bl	8006d10 <__lo0bits>
 8007202:	9900      	ldr	r1, [sp, #0]
 8007204:	b1f0      	cbz	r0, 8007244 <__d2b+0x80>
 8007206:	9a01      	ldr	r2, [sp, #4]
 8007208:	f1c0 0320 	rsb	r3, r0, #32
 800720c:	fa02 f303 	lsl.w	r3, r2, r3
 8007210:	430b      	orrs	r3, r1
 8007212:	40c2      	lsrs	r2, r0
 8007214:	6163      	str	r3, [r4, #20]
 8007216:	9201      	str	r2, [sp, #4]
 8007218:	9b01      	ldr	r3, [sp, #4]
 800721a:	2b00      	cmp	r3, #0
 800721c:	bf14      	ite	ne
 800721e:	2102      	movne	r1, #2
 8007220:	2101      	moveq	r1, #1
 8007222:	61a3      	str	r3, [r4, #24]
 8007224:	6121      	str	r1, [r4, #16]
 8007226:	b1c5      	cbz	r5, 800725a <__d2b+0x96>
 8007228:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800722c:	4405      	add	r5, r0
 800722e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007232:	603d      	str	r5, [r7, #0]
 8007234:	6030      	str	r0, [r6, #0]
 8007236:	4620      	mov	r0, r4
 8007238:	b002      	add	sp, #8
 800723a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800723e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007242:	e7d6      	b.n	80071f2 <__d2b+0x2e>
 8007244:	6161      	str	r1, [r4, #20]
 8007246:	e7e7      	b.n	8007218 <__d2b+0x54>
 8007248:	a801      	add	r0, sp, #4
 800724a:	f7ff fd61 	bl	8006d10 <__lo0bits>
 800724e:	2101      	movs	r1, #1
 8007250:	9b01      	ldr	r3, [sp, #4]
 8007252:	6121      	str	r1, [r4, #16]
 8007254:	6163      	str	r3, [r4, #20]
 8007256:	3020      	adds	r0, #32
 8007258:	e7e5      	b.n	8007226 <__d2b+0x62>
 800725a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800725e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007262:	6038      	str	r0, [r7, #0]
 8007264:	6918      	ldr	r0, [r3, #16]
 8007266:	f7ff fd33 	bl	8006cd0 <__hi0bits>
 800726a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800726e:	6031      	str	r1, [r6, #0]
 8007270:	e7e1      	b.n	8007236 <__d2b+0x72>
 8007272:	bf00      	nop
 8007274:	080083d7 	.word	0x080083d7
 8007278:	080083e8 	.word	0x080083e8

0800727c <_calloc_r>:
 800727c:	b538      	push	{r3, r4, r5, lr}
 800727e:	fb02 f501 	mul.w	r5, r2, r1
 8007282:	4629      	mov	r1, r5
 8007284:	f000 f854 	bl	8007330 <_malloc_r>
 8007288:	4604      	mov	r4, r0
 800728a:	b118      	cbz	r0, 8007294 <_calloc_r+0x18>
 800728c:	462a      	mov	r2, r5
 800728e:	2100      	movs	r1, #0
 8007290:	f7fe f954 	bl	800553c <memset>
 8007294:	4620      	mov	r0, r4
 8007296:	bd38      	pop	{r3, r4, r5, pc}

08007298 <_free_r>:
 8007298:	b538      	push	{r3, r4, r5, lr}
 800729a:	4605      	mov	r5, r0
 800729c:	2900      	cmp	r1, #0
 800729e:	d043      	beq.n	8007328 <_free_r+0x90>
 80072a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072a4:	1f0c      	subs	r4, r1, #4
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	bfb8      	it	lt
 80072aa:	18e4      	addlt	r4, r4, r3
 80072ac:	f000 fa62 	bl	8007774 <__malloc_lock>
 80072b0:	4a1e      	ldr	r2, [pc, #120]	; (800732c <_free_r+0x94>)
 80072b2:	6813      	ldr	r3, [r2, #0]
 80072b4:	4610      	mov	r0, r2
 80072b6:	b933      	cbnz	r3, 80072c6 <_free_r+0x2e>
 80072b8:	6063      	str	r3, [r4, #4]
 80072ba:	6014      	str	r4, [r2, #0]
 80072bc:	4628      	mov	r0, r5
 80072be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072c2:	f000 ba5d 	b.w	8007780 <__malloc_unlock>
 80072c6:	42a3      	cmp	r3, r4
 80072c8:	d90a      	bls.n	80072e0 <_free_r+0x48>
 80072ca:	6821      	ldr	r1, [r4, #0]
 80072cc:	1862      	adds	r2, r4, r1
 80072ce:	4293      	cmp	r3, r2
 80072d0:	bf01      	itttt	eq
 80072d2:	681a      	ldreq	r2, [r3, #0]
 80072d4:	685b      	ldreq	r3, [r3, #4]
 80072d6:	1852      	addeq	r2, r2, r1
 80072d8:	6022      	streq	r2, [r4, #0]
 80072da:	6063      	str	r3, [r4, #4]
 80072dc:	6004      	str	r4, [r0, #0]
 80072de:	e7ed      	b.n	80072bc <_free_r+0x24>
 80072e0:	461a      	mov	r2, r3
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	b10b      	cbz	r3, 80072ea <_free_r+0x52>
 80072e6:	42a3      	cmp	r3, r4
 80072e8:	d9fa      	bls.n	80072e0 <_free_r+0x48>
 80072ea:	6811      	ldr	r1, [r2, #0]
 80072ec:	1850      	adds	r0, r2, r1
 80072ee:	42a0      	cmp	r0, r4
 80072f0:	d10b      	bne.n	800730a <_free_r+0x72>
 80072f2:	6820      	ldr	r0, [r4, #0]
 80072f4:	4401      	add	r1, r0
 80072f6:	1850      	adds	r0, r2, r1
 80072f8:	4283      	cmp	r3, r0
 80072fa:	6011      	str	r1, [r2, #0]
 80072fc:	d1de      	bne.n	80072bc <_free_r+0x24>
 80072fe:	6818      	ldr	r0, [r3, #0]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	4401      	add	r1, r0
 8007304:	6011      	str	r1, [r2, #0]
 8007306:	6053      	str	r3, [r2, #4]
 8007308:	e7d8      	b.n	80072bc <_free_r+0x24>
 800730a:	d902      	bls.n	8007312 <_free_r+0x7a>
 800730c:	230c      	movs	r3, #12
 800730e:	602b      	str	r3, [r5, #0]
 8007310:	e7d4      	b.n	80072bc <_free_r+0x24>
 8007312:	6820      	ldr	r0, [r4, #0]
 8007314:	1821      	adds	r1, r4, r0
 8007316:	428b      	cmp	r3, r1
 8007318:	bf01      	itttt	eq
 800731a:	6819      	ldreq	r1, [r3, #0]
 800731c:	685b      	ldreq	r3, [r3, #4]
 800731e:	1809      	addeq	r1, r1, r0
 8007320:	6021      	streq	r1, [r4, #0]
 8007322:	6063      	str	r3, [r4, #4]
 8007324:	6054      	str	r4, [r2, #4]
 8007326:	e7c9      	b.n	80072bc <_free_r+0x24>
 8007328:	bd38      	pop	{r3, r4, r5, pc}
 800732a:	bf00      	nop
 800732c:	20000200 	.word	0x20000200

08007330 <_malloc_r>:
 8007330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007332:	1ccd      	adds	r5, r1, #3
 8007334:	f025 0503 	bic.w	r5, r5, #3
 8007338:	3508      	adds	r5, #8
 800733a:	2d0c      	cmp	r5, #12
 800733c:	bf38      	it	cc
 800733e:	250c      	movcc	r5, #12
 8007340:	2d00      	cmp	r5, #0
 8007342:	4606      	mov	r6, r0
 8007344:	db01      	blt.n	800734a <_malloc_r+0x1a>
 8007346:	42a9      	cmp	r1, r5
 8007348:	d903      	bls.n	8007352 <_malloc_r+0x22>
 800734a:	230c      	movs	r3, #12
 800734c:	6033      	str	r3, [r6, #0]
 800734e:	2000      	movs	r0, #0
 8007350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007352:	f000 fa0f 	bl	8007774 <__malloc_lock>
 8007356:	4921      	ldr	r1, [pc, #132]	; (80073dc <_malloc_r+0xac>)
 8007358:	680a      	ldr	r2, [r1, #0]
 800735a:	4614      	mov	r4, r2
 800735c:	b99c      	cbnz	r4, 8007386 <_malloc_r+0x56>
 800735e:	4f20      	ldr	r7, [pc, #128]	; (80073e0 <_malloc_r+0xb0>)
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	b923      	cbnz	r3, 800736e <_malloc_r+0x3e>
 8007364:	4621      	mov	r1, r4
 8007366:	4630      	mov	r0, r6
 8007368:	f000 f998 	bl	800769c <_sbrk_r>
 800736c:	6038      	str	r0, [r7, #0]
 800736e:	4629      	mov	r1, r5
 8007370:	4630      	mov	r0, r6
 8007372:	f000 f993 	bl	800769c <_sbrk_r>
 8007376:	1c43      	adds	r3, r0, #1
 8007378:	d123      	bne.n	80073c2 <_malloc_r+0x92>
 800737a:	230c      	movs	r3, #12
 800737c:	4630      	mov	r0, r6
 800737e:	6033      	str	r3, [r6, #0]
 8007380:	f000 f9fe 	bl	8007780 <__malloc_unlock>
 8007384:	e7e3      	b.n	800734e <_malloc_r+0x1e>
 8007386:	6823      	ldr	r3, [r4, #0]
 8007388:	1b5b      	subs	r3, r3, r5
 800738a:	d417      	bmi.n	80073bc <_malloc_r+0x8c>
 800738c:	2b0b      	cmp	r3, #11
 800738e:	d903      	bls.n	8007398 <_malloc_r+0x68>
 8007390:	6023      	str	r3, [r4, #0]
 8007392:	441c      	add	r4, r3
 8007394:	6025      	str	r5, [r4, #0]
 8007396:	e004      	b.n	80073a2 <_malloc_r+0x72>
 8007398:	6863      	ldr	r3, [r4, #4]
 800739a:	42a2      	cmp	r2, r4
 800739c:	bf0c      	ite	eq
 800739e:	600b      	streq	r3, [r1, #0]
 80073a0:	6053      	strne	r3, [r2, #4]
 80073a2:	4630      	mov	r0, r6
 80073a4:	f000 f9ec 	bl	8007780 <__malloc_unlock>
 80073a8:	f104 000b 	add.w	r0, r4, #11
 80073ac:	1d23      	adds	r3, r4, #4
 80073ae:	f020 0007 	bic.w	r0, r0, #7
 80073b2:	1ac2      	subs	r2, r0, r3
 80073b4:	d0cc      	beq.n	8007350 <_malloc_r+0x20>
 80073b6:	1a1b      	subs	r3, r3, r0
 80073b8:	50a3      	str	r3, [r4, r2]
 80073ba:	e7c9      	b.n	8007350 <_malloc_r+0x20>
 80073bc:	4622      	mov	r2, r4
 80073be:	6864      	ldr	r4, [r4, #4]
 80073c0:	e7cc      	b.n	800735c <_malloc_r+0x2c>
 80073c2:	1cc4      	adds	r4, r0, #3
 80073c4:	f024 0403 	bic.w	r4, r4, #3
 80073c8:	42a0      	cmp	r0, r4
 80073ca:	d0e3      	beq.n	8007394 <_malloc_r+0x64>
 80073cc:	1a21      	subs	r1, r4, r0
 80073ce:	4630      	mov	r0, r6
 80073d0:	f000 f964 	bl	800769c <_sbrk_r>
 80073d4:	3001      	adds	r0, #1
 80073d6:	d1dd      	bne.n	8007394 <_malloc_r+0x64>
 80073d8:	e7cf      	b.n	800737a <_malloc_r+0x4a>
 80073da:	bf00      	nop
 80073dc:	20000200 	.word	0x20000200
 80073e0:	20000204 	.word	0x20000204

080073e4 <__ssputs_r>:
 80073e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073e8:	688e      	ldr	r6, [r1, #8]
 80073ea:	4682      	mov	sl, r0
 80073ec:	429e      	cmp	r6, r3
 80073ee:	460c      	mov	r4, r1
 80073f0:	4690      	mov	r8, r2
 80073f2:	461f      	mov	r7, r3
 80073f4:	d838      	bhi.n	8007468 <__ssputs_r+0x84>
 80073f6:	898a      	ldrh	r2, [r1, #12]
 80073f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80073fc:	d032      	beq.n	8007464 <__ssputs_r+0x80>
 80073fe:	6825      	ldr	r5, [r4, #0]
 8007400:	6909      	ldr	r1, [r1, #16]
 8007402:	3301      	adds	r3, #1
 8007404:	eba5 0901 	sub.w	r9, r5, r1
 8007408:	6965      	ldr	r5, [r4, #20]
 800740a:	444b      	add	r3, r9
 800740c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007410:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007414:	106d      	asrs	r5, r5, #1
 8007416:	429d      	cmp	r5, r3
 8007418:	bf38      	it	cc
 800741a:	461d      	movcc	r5, r3
 800741c:	0553      	lsls	r3, r2, #21
 800741e:	d531      	bpl.n	8007484 <__ssputs_r+0xa0>
 8007420:	4629      	mov	r1, r5
 8007422:	f7ff ff85 	bl	8007330 <_malloc_r>
 8007426:	4606      	mov	r6, r0
 8007428:	b950      	cbnz	r0, 8007440 <__ssputs_r+0x5c>
 800742a:	230c      	movs	r3, #12
 800742c:	f04f 30ff 	mov.w	r0, #4294967295
 8007430:	f8ca 3000 	str.w	r3, [sl]
 8007434:	89a3      	ldrh	r3, [r4, #12]
 8007436:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800743a:	81a3      	strh	r3, [r4, #12]
 800743c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007440:	464a      	mov	r2, r9
 8007442:	6921      	ldr	r1, [r4, #16]
 8007444:	f7fe f86c 	bl	8005520 <memcpy>
 8007448:	89a3      	ldrh	r3, [r4, #12]
 800744a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800744e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007452:	81a3      	strh	r3, [r4, #12]
 8007454:	6126      	str	r6, [r4, #16]
 8007456:	444e      	add	r6, r9
 8007458:	6026      	str	r6, [r4, #0]
 800745a:	463e      	mov	r6, r7
 800745c:	6165      	str	r5, [r4, #20]
 800745e:	eba5 0509 	sub.w	r5, r5, r9
 8007462:	60a5      	str	r5, [r4, #8]
 8007464:	42be      	cmp	r6, r7
 8007466:	d900      	bls.n	800746a <__ssputs_r+0x86>
 8007468:	463e      	mov	r6, r7
 800746a:	4632      	mov	r2, r6
 800746c:	4641      	mov	r1, r8
 800746e:	6820      	ldr	r0, [r4, #0]
 8007470:	f000 f966 	bl	8007740 <memmove>
 8007474:	68a3      	ldr	r3, [r4, #8]
 8007476:	6822      	ldr	r2, [r4, #0]
 8007478:	1b9b      	subs	r3, r3, r6
 800747a:	4432      	add	r2, r6
 800747c:	2000      	movs	r0, #0
 800747e:	60a3      	str	r3, [r4, #8]
 8007480:	6022      	str	r2, [r4, #0]
 8007482:	e7db      	b.n	800743c <__ssputs_r+0x58>
 8007484:	462a      	mov	r2, r5
 8007486:	f000 f981 	bl	800778c <_realloc_r>
 800748a:	4606      	mov	r6, r0
 800748c:	2800      	cmp	r0, #0
 800748e:	d1e1      	bne.n	8007454 <__ssputs_r+0x70>
 8007490:	4650      	mov	r0, sl
 8007492:	6921      	ldr	r1, [r4, #16]
 8007494:	f7ff ff00 	bl	8007298 <_free_r>
 8007498:	e7c7      	b.n	800742a <__ssputs_r+0x46>
	...

0800749c <_svfiprintf_r>:
 800749c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074a0:	4698      	mov	r8, r3
 80074a2:	898b      	ldrh	r3, [r1, #12]
 80074a4:	4607      	mov	r7, r0
 80074a6:	061b      	lsls	r3, r3, #24
 80074a8:	460d      	mov	r5, r1
 80074aa:	4614      	mov	r4, r2
 80074ac:	b09d      	sub	sp, #116	; 0x74
 80074ae:	d50e      	bpl.n	80074ce <_svfiprintf_r+0x32>
 80074b0:	690b      	ldr	r3, [r1, #16]
 80074b2:	b963      	cbnz	r3, 80074ce <_svfiprintf_r+0x32>
 80074b4:	2140      	movs	r1, #64	; 0x40
 80074b6:	f7ff ff3b 	bl	8007330 <_malloc_r>
 80074ba:	6028      	str	r0, [r5, #0]
 80074bc:	6128      	str	r0, [r5, #16]
 80074be:	b920      	cbnz	r0, 80074ca <_svfiprintf_r+0x2e>
 80074c0:	230c      	movs	r3, #12
 80074c2:	603b      	str	r3, [r7, #0]
 80074c4:	f04f 30ff 	mov.w	r0, #4294967295
 80074c8:	e0d1      	b.n	800766e <_svfiprintf_r+0x1d2>
 80074ca:	2340      	movs	r3, #64	; 0x40
 80074cc:	616b      	str	r3, [r5, #20]
 80074ce:	2300      	movs	r3, #0
 80074d0:	9309      	str	r3, [sp, #36]	; 0x24
 80074d2:	2320      	movs	r3, #32
 80074d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80074d8:	2330      	movs	r3, #48	; 0x30
 80074da:	f04f 0901 	mov.w	r9, #1
 80074de:	f8cd 800c 	str.w	r8, [sp, #12]
 80074e2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007688 <_svfiprintf_r+0x1ec>
 80074e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074ea:	4623      	mov	r3, r4
 80074ec:	469a      	mov	sl, r3
 80074ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074f2:	b10a      	cbz	r2, 80074f8 <_svfiprintf_r+0x5c>
 80074f4:	2a25      	cmp	r2, #37	; 0x25
 80074f6:	d1f9      	bne.n	80074ec <_svfiprintf_r+0x50>
 80074f8:	ebba 0b04 	subs.w	fp, sl, r4
 80074fc:	d00b      	beq.n	8007516 <_svfiprintf_r+0x7a>
 80074fe:	465b      	mov	r3, fp
 8007500:	4622      	mov	r2, r4
 8007502:	4629      	mov	r1, r5
 8007504:	4638      	mov	r0, r7
 8007506:	f7ff ff6d 	bl	80073e4 <__ssputs_r>
 800750a:	3001      	adds	r0, #1
 800750c:	f000 80aa 	beq.w	8007664 <_svfiprintf_r+0x1c8>
 8007510:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007512:	445a      	add	r2, fp
 8007514:	9209      	str	r2, [sp, #36]	; 0x24
 8007516:	f89a 3000 	ldrb.w	r3, [sl]
 800751a:	2b00      	cmp	r3, #0
 800751c:	f000 80a2 	beq.w	8007664 <_svfiprintf_r+0x1c8>
 8007520:	2300      	movs	r3, #0
 8007522:	f04f 32ff 	mov.w	r2, #4294967295
 8007526:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800752a:	f10a 0a01 	add.w	sl, sl, #1
 800752e:	9304      	str	r3, [sp, #16]
 8007530:	9307      	str	r3, [sp, #28]
 8007532:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007536:	931a      	str	r3, [sp, #104]	; 0x68
 8007538:	4654      	mov	r4, sl
 800753a:	2205      	movs	r2, #5
 800753c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007540:	4851      	ldr	r0, [pc, #324]	; (8007688 <_svfiprintf_r+0x1ec>)
 8007542:	f7ff fb0b 	bl	8006b5c <memchr>
 8007546:	9a04      	ldr	r2, [sp, #16]
 8007548:	b9d8      	cbnz	r0, 8007582 <_svfiprintf_r+0xe6>
 800754a:	06d0      	lsls	r0, r2, #27
 800754c:	bf44      	itt	mi
 800754e:	2320      	movmi	r3, #32
 8007550:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007554:	0711      	lsls	r1, r2, #28
 8007556:	bf44      	itt	mi
 8007558:	232b      	movmi	r3, #43	; 0x2b
 800755a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800755e:	f89a 3000 	ldrb.w	r3, [sl]
 8007562:	2b2a      	cmp	r3, #42	; 0x2a
 8007564:	d015      	beq.n	8007592 <_svfiprintf_r+0xf6>
 8007566:	4654      	mov	r4, sl
 8007568:	2000      	movs	r0, #0
 800756a:	f04f 0c0a 	mov.w	ip, #10
 800756e:	9a07      	ldr	r2, [sp, #28]
 8007570:	4621      	mov	r1, r4
 8007572:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007576:	3b30      	subs	r3, #48	; 0x30
 8007578:	2b09      	cmp	r3, #9
 800757a:	d94e      	bls.n	800761a <_svfiprintf_r+0x17e>
 800757c:	b1b0      	cbz	r0, 80075ac <_svfiprintf_r+0x110>
 800757e:	9207      	str	r2, [sp, #28]
 8007580:	e014      	b.n	80075ac <_svfiprintf_r+0x110>
 8007582:	eba0 0308 	sub.w	r3, r0, r8
 8007586:	fa09 f303 	lsl.w	r3, r9, r3
 800758a:	4313      	orrs	r3, r2
 800758c:	46a2      	mov	sl, r4
 800758e:	9304      	str	r3, [sp, #16]
 8007590:	e7d2      	b.n	8007538 <_svfiprintf_r+0x9c>
 8007592:	9b03      	ldr	r3, [sp, #12]
 8007594:	1d19      	adds	r1, r3, #4
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	9103      	str	r1, [sp, #12]
 800759a:	2b00      	cmp	r3, #0
 800759c:	bfbb      	ittet	lt
 800759e:	425b      	neglt	r3, r3
 80075a0:	f042 0202 	orrlt.w	r2, r2, #2
 80075a4:	9307      	strge	r3, [sp, #28]
 80075a6:	9307      	strlt	r3, [sp, #28]
 80075a8:	bfb8      	it	lt
 80075aa:	9204      	strlt	r2, [sp, #16]
 80075ac:	7823      	ldrb	r3, [r4, #0]
 80075ae:	2b2e      	cmp	r3, #46	; 0x2e
 80075b0:	d10c      	bne.n	80075cc <_svfiprintf_r+0x130>
 80075b2:	7863      	ldrb	r3, [r4, #1]
 80075b4:	2b2a      	cmp	r3, #42	; 0x2a
 80075b6:	d135      	bne.n	8007624 <_svfiprintf_r+0x188>
 80075b8:	9b03      	ldr	r3, [sp, #12]
 80075ba:	3402      	adds	r4, #2
 80075bc:	1d1a      	adds	r2, r3, #4
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	9203      	str	r2, [sp, #12]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	bfb8      	it	lt
 80075c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80075ca:	9305      	str	r3, [sp, #20]
 80075cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007698 <_svfiprintf_r+0x1fc>
 80075d0:	2203      	movs	r2, #3
 80075d2:	4650      	mov	r0, sl
 80075d4:	7821      	ldrb	r1, [r4, #0]
 80075d6:	f7ff fac1 	bl	8006b5c <memchr>
 80075da:	b140      	cbz	r0, 80075ee <_svfiprintf_r+0x152>
 80075dc:	2340      	movs	r3, #64	; 0x40
 80075de:	eba0 000a 	sub.w	r0, r0, sl
 80075e2:	fa03 f000 	lsl.w	r0, r3, r0
 80075e6:	9b04      	ldr	r3, [sp, #16]
 80075e8:	3401      	adds	r4, #1
 80075ea:	4303      	orrs	r3, r0
 80075ec:	9304      	str	r3, [sp, #16]
 80075ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075f2:	2206      	movs	r2, #6
 80075f4:	4825      	ldr	r0, [pc, #148]	; (800768c <_svfiprintf_r+0x1f0>)
 80075f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075fa:	f7ff faaf 	bl	8006b5c <memchr>
 80075fe:	2800      	cmp	r0, #0
 8007600:	d038      	beq.n	8007674 <_svfiprintf_r+0x1d8>
 8007602:	4b23      	ldr	r3, [pc, #140]	; (8007690 <_svfiprintf_r+0x1f4>)
 8007604:	bb1b      	cbnz	r3, 800764e <_svfiprintf_r+0x1b2>
 8007606:	9b03      	ldr	r3, [sp, #12]
 8007608:	3307      	adds	r3, #7
 800760a:	f023 0307 	bic.w	r3, r3, #7
 800760e:	3308      	adds	r3, #8
 8007610:	9303      	str	r3, [sp, #12]
 8007612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007614:	4433      	add	r3, r6
 8007616:	9309      	str	r3, [sp, #36]	; 0x24
 8007618:	e767      	b.n	80074ea <_svfiprintf_r+0x4e>
 800761a:	460c      	mov	r4, r1
 800761c:	2001      	movs	r0, #1
 800761e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007622:	e7a5      	b.n	8007570 <_svfiprintf_r+0xd4>
 8007624:	2300      	movs	r3, #0
 8007626:	f04f 0c0a 	mov.w	ip, #10
 800762a:	4619      	mov	r1, r3
 800762c:	3401      	adds	r4, #1
 800762e:	9305      	str	r3, [sp, #20]
 8007630:	4620      	mov	r0, r4
 8007632:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007636:	3a30      	subs	r2, #48	; 0x30
 8007638:	2a09      	cmp	r2, #9
 800763a:	d903      	bls.n	8007644 <_svfiprintf_r+0x1a8>
 800763c:	2b00      	cmp	r3, #0
 800763e:	d0c5      	beq.n	80075cc <_svfiprintf_r+0x130>
 8007640:	9105      	str	r1, [sp, #20]
 8007642:	e7c3      	b.n	80075cc <_svfiprintf_r+0x130>
 8007644:	4604      	mov	r4, r0
 8007646:	2301      	movs	r3, #1
 8007648:	fb0c 2101 	mla	r1, ip, r1, r2
 800764c:	e7f0      	b.n	8007630 <_svfiprintf_r+0x194>
 800764e:	ab03      	add	r3, sp, #12
 8007650:	9300      	str	r3, [sp, #0]
 8007652:	462a      	mov	r2, r5
 8007654:	4638      	mov	r0, r7
 8007656:	4b0f      	ldr	r3, [pc, #60]	; (8007694 <_svfiprintf_r+0x1f8>)
 8007658:	a904      	add	r1, sp, #16
 800765a:	f7fe f815 	bl	8005688 <_printf_float>
 800765e:	1c42      	adds	r2, r0, #1
 8007660:	4606      	mov	r6, r0
 8007662:	d1d6      	bne.n	8007612 <_svfiprintf_r+0x176>
 8007664:	89ab      	ldrh	r3, [r5, #12]
 8007666:	065b      	lsls	r3, r3, #25
 8007668:	f53f af2c 	bmi.w	80074c4 <_svfiprintf_r+0x28>
 800766c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800766e:	b01d      	add	sp, #116	; 0x74
 8007670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007674:	ab03      	add	r3, sp, #12
 8007676:	9300      	str	r3, [sp, #0]
 8007678:	462a      	mov	r2, r5
 800767a:	4638      	mov	r0, r7
 800767c:	4b05      	ldr	r3, [pc, #20]	; (8007694 <_svfiprintf_r+0x1f8>)
 800767e:	a904      	add	r1, sp, #16
 8007680:	f7fe fa9e 	bl	8005bc0 <_printf_i>
 8007684:	e7eb      	b.n	800765e <_svfiprintf_r+0x1c2>
 8007686:	bf00      	nop
 8007688:	08008544 	.word	0x08008544
 800768c:	0800854e 	.word	0x0800854e
 8007690:	08005689 	.word	0x08005689
 8007694:	080073e5 	.word	0x080073e5
 8007698:	0800854a 	.word	0x0800854a

0800769c <_sbrk_r>:
 800769c:	b538      	push	{r3, r4, r5, lr}
 800769e:	2300      	movs	r3, #0
 80076a0:	4d05      	ldr	r5, [pc, #20]	; (80076b8 <_sbrk_r+0x1c>)
 80076a2:	4604      	mov	r4, r0
 80076a4:	4608      	mov	r0, r1
 80076a6:	602b      	str	r3, [r5, #0]
 80076a8:	f7fa fa6a 	bl	8001b80 <_sbrk>
 80076ac:	1c43      	adds	r3, r0, #1
 80076ae:	d102      	bne.n	80076b6 <_sbrk_r+0x1a>
 80076b0:	682b      	ldr	r3, [r5, #0]
 80076b2:	b103      	cbz	r3, 80076b6 <_sbrk_r+0x1a>
 80076b4:	6023      	str	r3, [r4, #0]
 80076b6:	bd38      	pop	{r3, r4, r5, pc}
 80076b8:	2000040c 	.word	0x2000040c

080076bc <__assert_func>:
 80076bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80076be:	4614      	mov	r4, r2
 80076c0:	461a      	mov	r2, r3
 80076c2:	4b09      	ldr	r3, [pc, #36]	; (80076e8 <__assert_func+0x2c>)
 80076c4:	4605      	mov	r5, r0
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	68d8      	ldr	r0, [r3, #12]
 80076ca:	b14c      	cbz	r4, 80076e0 <__assert_func+0x24>
 80076cc:	4b07      	ldr	r3, [pc, #28]	; (80076ec <__assert_func+0x30>)
 80076ce:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80076d2:	9100      	str	r1, [sp, #0]
 80076d4:	462b      	mov	r3, r5
 80076d6:	4906      	ldr	r1, [pc, #24]	; (80076f0 <__assert_func+0x34>)
 80076d8:	f000 f80e 	bl	80076f8 <fiprintf>
 80076dc:	f000 faa2 	bl	8007c24 <abort>
 80076e0:	4b04      	ldr	r3, [pc, #16]	; (80076f4 <__assert_func+0x38>)
 80076e2:	461c      	mov	r4, r3
 80076e4:	e7f3      	b.n	80076ce <__assert_func+0x12>
 80076e6:	bf00      	nop
 80076e8:	2000000c 	.word	0x2000000c
 80076ec:	08008555 	.word	0x08008555
 80076f0:	08008562 	.word	0x08008562
 80076f4:	08008590 	.word	0x08008590

080076f8 <fiprintf>:
 80076f8:	b40e      	push	{r1, r2, r3}
 80076fa:	b503      	push	{r0, r1, lr}
 80076fc:	4601      	mov	r1, r0
 80076fe:	ab03      	add	r3, sp, #12
 8007700:	4805      	ldr	r0, [pc, #20]	; (8007718 <fiprintf+0x20>)
 8007702:	f853 2b04 	ldr.w	r2, [r3], #4
 8007706:	6800      	ldr	r0, [r0, #0]
 8007708:	9301      	str	r3, [sp, #4]
 800770a:	f000 f88d 	bl	8007828 <_vfiprintf_r>
 800770e:	b002      	add	sp, #8
 8007710:	f85d eb04 	ldr.w	lr, [sp], #4
 8007714:	b003      	add	sp, #12
 8007716:	4770      	bx	lr
 8007718:	2000000c 	.word	0x2000000c

0800771c <__ascii_mbtowc>:
 800771c:	b082      	sub	sp, #8
 800771e:	b901      	cbnz	r1, 8007722 <__ascii_mbtowc+0x6>
 8007720:	a901      	add	r1, sp, #4
 8007722:	b142      	cbz	r2, 8007736 <__ascii_mbtowc+0x1a>
 8007724:	b14b      	cbz	r3, 800773a <__ascii_mbtowc+0x1e>
 8007726:	7813      	ldrb	r3, [r2, #0]
 8007728:	600b      	str	r3, [r1, #0]
 800772a:	7812      	ldrb	r2, [r2, #0]
 800772c:	1e10      	subs	r0, r2, #0
 800772e:	bf18      	it	ne
 8007730:	2001      	movne	r0, #1
 8007732:	b002      	add	sp, #8
 8007734:	4770      	bx	lr
 8007736:	4610      	mov	r0, r2
 8007738:	e7fb      	b.n	8007732 <__ascii_mbtowc+0x16>
 800773a:	f06f 0001 	mvn.w	r0, #1
 800773e:	e7f8      	b.n	8007732 <__ascii_mbtowc+0x16>

08007740 <memmove>:
 8007740:	4288      	cmp	r0, r1
 8007742:	b510      	push	{r4, lr}
 8007744:	eb01 0402 	add.w	r4, r1, r2
 8007748:	d902      	bls.n	8007750 <memmove+0x10>
 800774a:	4284      	cmp	r4, r0
 800774c:	4623      	mov	r3, r4
 800774e:	d807      	bhi.n	8007760 <memmove+0x20>
 8007750:	1e43      	subs	r3, r0, #1
 8007752:	42a1      	cmp	r1, r4
 8007754:	d008      	beq.n	8007768 <memmove+0x28>
 8007756:	f811 2b01 	ldrb.w	r2, [r1], #1
 800775a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800775e:	e7f8      	b.n	8007752 <memmove+0x12>
 8007760:	4601      	mov	r1, r0
 8007762:	4402      	add	r2, r0
 8007764:	428a      	cmp	r2, r1
 8007766:	d100      	bne.n	800776a <memmove+0x2a>
 8007768:	bd10      	pop	{r4, pc}
 800776a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800776e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007772:	e7f7      	b.n	8007764 <memmove+0x24>

08007774 <__malloc_lock>:
 8007774:	4801      	ldr	r0, [pc, #4]	; (800777c <__malloc_lock+0x8>)
 8007776:	f000 bc15 	b.w	8007fa4 <__retarget_lock_acquire_recursive>
 800777a:	bf00      	nop
 800777c:	20000414 	.word	0x20000414

08007780 <__malloc_unlock>:
 8007780:	4801      	ldr	r0, [pc, #4]	; (8007788 <__malloc_unlock+0x8>)
 8007782:	f000 bc10 	b.w	8007fa6 <__retarget_lock_release_recursive>
 8007786:	bf00      	nop
 8007788:	20000414 	.word	0x20000414

0800778c <_realloc_r>:
 800778c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800778e:	4607      	mov	r7, r0
 8007790:	4614      	mov	r4, r2
 8007792:	460e      	mov	r6, r1
 8007794:	b921      	cbnz	r1, 80077a0 <_realloc_r+0x14>
 8007796:	4611      	mov	r1, r2
 8007798:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800779c:	f7ff bdc8 	b.w	8007330 <_malloc_r>
 80077a0:	b922      	cbnz	r2, 80077ac <_realloc_r+0x20>
 80077a2:	f7ff fd79 	bl	8007298 <_free_r>
 80077a6:	4625      	mov	r5, r4
 80077a8:	4628      	mov	r0, r5
 80077aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077ac:	f000 fc60 	bl	8008070 <_malloc_usable_size_r>
 80077b0:	42a0      	cmp	r0, r4
 80077b2:	d20f      	bcs.n	80077d4 <_realloc_r+0x48>
 80077b4:	4621      	mov	r1, r4
 80077b6:	4638      	mov	r0, r7
 80077b8:	f7ff fdba 	bl	8007330 <_malloc_r>
 80077bc:	4605      	mov	r5, r0
 80077be:	2800      	cmp	r0, #0
 80077c0:	d0f2      	beq.n	80077a8 <_realloc_r+0x1c>
 80077c2:	4631      	mov	r1, r6
 80077c4:	4622      	mov	r2, r4
 80077c6:	f7fd feab 	bl	8005520 <memcpy>
 80077ca:	4631      	mov	r1, r6
 80077cc:	4638      	mov	r0, r7
 80077ce:	f7ff fd63 	bl	8007298 <_free_r>
 80077d2:	e7e9      	b.n	80077a8 <_realloc_r+0x1c>
 80077d4:	4635      	mov	r5, r6
 80077d6:	e7e7      	b.n	80077a8 <_realloc_r+0x1c>

080077d8 <__sfputc_r>:
 80077d8:	6893      	ldr	r3, [r2, #8]
 80077da:	b410      	push	{r4}
 80077dc:	3b01      	subs	r3, #1
 80077de:	2b00      	cmp	r3, #0
 80077e0:	6093      	str	r3, [r2, #8]
 80077e2:	da07      	bge.n	80077f4 <__sfputc_r+0x1c>
 80077e4:	6994      	ldr	r4, [r2, #24]
 80077e6:	42a3      	cmp	r3, r4
 80077e8:	db01      	blt.n	80077ee <__sfputc_r+0x16>
 80077ea:	290a      	cmp	r1, #10
 80077ec:	d102      	bne.n	80077f4 <__sfputc_r+0x1c>
 80077ee:	bc10      	pop	{r4}
 80077f0:	f000 b94a 	b.w	8007a88 <__swbuf_r>
 80077f4:	6813      	ldr	r3, [r2, #0]
 80077f6:	1c58      	adds	r0, r3, #1
 80077f8:	6010      	str	r0, [r2, #0]
 80077fa:	7019      	strb	r1, [r3, #0]
 80077fc:	4608      	mov	r0, r1
 80077fe:	bc10      	pop	{r4}
 8007800:	4770      	bx	lr

08007802 <__sfputs_r>:
 8007802:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007804:	4606      	mov	r6, r0
 8007806:	460f      	mov	r7, r1
 8007808:	4614      	mov	r4, r2
 800780a:	18d5      	adds	r5, r2, r3
 800780c:	42ac      	cmp	r4, r5
 800780e:	d101      	bne.n	8007814 <__sfputs_r+0x12>
 8007810:	2000      	movs	r0, #0
 8007812:	e007      	b.n	8007824 <__sfputs_r+0x22>
 8007814:	463a      	mov	r2, r7
 8007816:	4630      	mov	r0, r6
 8007818:	f814 1b01 	ldrb.w	r1, [r4], #1
 800781c:	f7ff ffdc 	bl	80077d8 <__sfputc_r>
 8007820:	1c43      	adds	r3, r0, #1
 8007822:	d1f3      	bne.n	800780c <__sfputs_r+0xa>
 8007824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007828 <_vfiprintf_r>:
 8007828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800782c:	460d      	mov	r5, r1
 800782e:	4614      	mov	r4, r2
 8007830:	4698      	mov	r8, r3
 8007832:	4606      	mov	r6, r0
 8007834:	b09d      	sub	sp, #116	; 0x74
 8007836:	b118      	cbz	r0, 8007840 <_vfiprintf_r+0x18>
 8007838:	6983      	ldr	r3, [r0, #24]
 800783a:	b90b      	cbnz	r3, 8007840 <_vfiprintf_r+0x18>
 800783c:	f000 fb14 	bl	8007e68 <__sinit>
 8007840:	4b89      	ldr	r3, [pc, #548]	; (8007a68 <_vfiprintf_r+0x240>)
 8007842:	429d      	cmp	r5, r3
 8007844:	d11b      	bne.n	800787e <_vfiprintf_r+0x56>
 8007846:	6875      	ldr	r5, [r6, #4]
 8007848:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800784a:	07d9      	lsls	r1, r3, #31
 800784c:	d405      	bmi.n	800785a <_vfiprintf_r+0x32>
 800784e:	89ab      	ldrh	r3, [r5, #12]
 8007850:	059a      	lsls	r2, r3, #22
 8007852:	d402      	bmi.n	800785a <_vfiprintf_r+0x32>
 8007854:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007856:	f000 fba5 	bl	8007fa4 <__retarget_lock_acquire_recursive>
 800785a:	89ab      	ldrh	r3, [r5, #12]
 800785c:	071b      	lsls	r3, r3, #28
 800785e:	d501      	bpl.n	8007864 <_vfiprintf_r+0x3c>
 8007860:	692b      	ldr	r3, [r5, #16]
 8007862:	b9eb      	cbnz	r3, 80078a0 <_vfiprintf_r+0x78>
 8007864:	4629      	mov	r1, r5
 8007866:	4630      	mov	r0, r6
 8007868:	f000 f96e 	bl	8007b48 <__swsetup_r>
 800786c:	b1c0      	cbz	r0, 80078a0 <_vfiprintf_r+0x78>
 800786e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007870:	07dc      	lsls	r4, r3, #31
 8007872:	d50e      	bpl.n	8007892 <_vfiprintf_r+0x6a>
 8007874:	f04f 30ff 	mov.w	r0, #4294967295
 8007878:	b01d      	add	sp, #116	; 0x74
 800787a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800787e:	4b7b      	ldr	r3, [pc, #492]	; (8007a6c <_vfiprintf_r+0x244>)
 8007880:	429d      	cmp	r5, r3
 8007882:	d101      	bne.n	8007888 <_vfiprintf_r+0x60>
 8007884:	68b5      	ldr	r5, [r6, #8]
 8007886:	e7df      	b.n	8007848 <_vfiprintf_r+0x20>
 8007888:	4b79      	ldr	r3, [pc, #484]	; (8007a70 <_vfiprintf_r+0x248>)
 800788a:	429d      	cmp	r5, r3
 800788c:	bf08      	it	eq
 800788e:	68f5      	ldreq	r5, [r6, #12]
 8007890:	e7da      	b.n	8007848 <_vfiprintf_r+0x20>
 8007892:	89ab      	ldrh	r3, [r5, #12]
 8007894:	0598      	lsls	r0, r3, #22
 8007896:	d4ed      	bmi.n	8007874 <_vfiprintf_r+0x4c>
 8007898:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800789a:	f000 fb84 	bl	8007fa6 <__retarget_lock_release_recursive>
 800789e:	e7e9      	b.n	8007874 <_vfiprintf_r+0x4c>
 80078a0:	2300      	movs	r3, #0
 80078a2:	9309      	str	r3, [sp, #36]	; 0x24
 80078a4:	2320      	movs	r3, #32
 80078a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078aa:	2330      	movs	r3, #48	; 0x30
 80078ac:	f04f 0901 	mov.w	r9, #1
 80078b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80078b4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007a74 <_vfiprintf_r+0x24c>
 80078b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078bc:	4623      	mov	r3, r4
 80078be:	469a      	mov	sl, r3
 80078c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078c4:	b10a      	cbz	r2, 80078ca <_vfiprintf_r+0xa2>
 80078c6:	2a25      	cmp	r2, #37	; 0x25
 80078c8:	d1f9      	bne.n	80078be <_vfiprintf_r+0x96>
 80078ca:	ebba 0b04 	subs.w	fp, sl, r4
 80078ce:	d00b      	beq.n	80078e8 <_vfiprintf_r+0xc0>
 80078d0:	465b      	mov	r3, fp
 80078d2:	4622      	mov	r2, r4
 80078d4:	4629      	mov	r1, r5
 80078d6:	4630      	mov	r0, r6
 80078d8:	f7ff ff93 	bl	8007802 <__sfputs_r>
 80078dc:	3001      	adds	r0, #1
 80078de:	f000 80aa 	beq.w	8007a36 <_vfiprintf_r+0x20e>
 80078e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078e4:	445a      	add	r2, fp
 80078e6:	9209      	str	r2, [sp, #36]	; 0x24
 80078e8:	f89a 3000 	ldrb.w	r3, [sl]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	f000 80a2 	beq.w	8007a36 <_vfiprintf_r+0x20e>
 80078f2:	2300      	movs	r3, #0
 80078f4:	f04f 32ff 	mov.w	r2, #4294967295
 80078f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078fc:	f10a 0a01 	add.w	sl, sl, #1
 8007900:	9304      	str	r3, [sp, #16]
 8007902:	9307      	str	r3, [sp, #28]
 8007904:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007908:	931a      	str	r3, [sp, #104]	; 0x68
 800790a:	4654      	mov	r4, sl
 800790c:	2205      	movs	r2, #5
 800790e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007912:	4858      	ldr	r0, [pc, #352]	; (8007a74 <_vfiprintf_r+0x24c>)
 8007914:	f7ff f922 	bl	8006b5c <memchr>
 8007918:	9a04      	ldr	r2, [sp, #16]
 800791a:	b9d8      	cbnz	r0, 8007954 <_vfiprintf_r+0x12c>
 800791c:	06d1      	lsls	r1, r2, #27
 800791e:	bf44      	itt	mi
 8007920:	2320      	movmi	r3, #32
 8007922:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007926:	0713      	lsls	r3, r2, #28
 8007928:	bf44      	itt	mi
 800792a:	232b      	movmi	r3, #43	; 0x2b
 800792c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007930:	f89a 3000 	ldrb.w	r3, [sl]
 8007934:	2b2a      	cmp	r3, #42	; 0x2a
 8007936:	d015      	beq.n	8007964 <_vfiprintf_r+0x13c>
 8007938:	4654      	mov	r4, sl
 800793a:	2000      	movs	r0, #0
 800793c:	f04f 0c0a 	mov.w	ip, #10
 8007940:	9a07      	ldr	r2, [sp, #28]
 8007942:	4621      	mov	r1, r4
 8007944:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007948:	3b30      	subs	r3, #48	; 0x30
 800794a:	2b09      	cmp	r3, #9
 800794c:	d94e      	bls.n	80079ec <_vfiprintf_r+0x1c4>
 800794e:	b1b0      	cbz	r0, 800797e <_vfiprintf_r+0x156>
 8007950:	9207      	str	r2, [sp, #28]
 8007952:	e014      	b.n	800797e <_vfiprintf_r+0x156>
 8007954:	eba0 0308 	sub.w	r3, r0, r8
 8007958:	fa09 f303 	lsl.w	r3, r9, r3
 800795c:	4313      	orrs	r3, r2
 800795e:	46a2      	mov	sl, r4
 8007960:	9304      	str	r3, [sp, #16]
 8007962:	e7d2      	b.n	800790a <_vfiprintf_r+0xe2>
 8007964:	9b03      	ldr	r3, [sp, #12]
 8007966:	1d19      	adds	r1, r3, #4
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	9103      	str	r1, [sp, #12]
 800796c:	2b00      	cmp	r3, #0
 800796e:	bfbb      	ittet	lt
 8007970:	425b      	neglt	r3, r3
 8007972:	f042 0202 	orrlt.w	r2, r2, #2
 8007976:	9307      	strge	r3, [sp, #28]
 8007978:	9307      	strlt	r3, [sp, #28]
 800797a:	bfb8      	it	lt
 800797c:	9204      	strlt	r2, [sp, #16]
 800797e:	7823      	ldrb	r3, [r4, #0]
 8007980:	2b2e      	cmp	r3, #46	; 0x2e
 8007982:	d10c      	bne.n	800799e <_vfiprintf_r+0x176>
 8007984:	7863      	ldrb	r3, [r4, #1]
 8007986:	2b2a      	cmp	r3, #42	; 0x2a
 8007988:	d135      	bne.n	80079f6 <_vfiprintf_r+0x1ce>
 800798a:	9b03      	ldr	r3, [sp, #12]
 800798c:	3402      	adds	r4, #2
 800798e:	1d1a      	adds	r2, r3, #4
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	9203      	str	r2, [sp, #12]
 8007994:	2b00      	cmp	r3, #0
 8007996:	bfb8      	it	lt
 8007998:	f04f 33ff 	movlt.w	r3, #4294967295
 800799c:	9305      	str	r3, [sp, #20]
 800799e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007a84 <_vfiprintf_r+0x25c>
 80079a2:	2203      	movs	r2, #3
 80079a4:	4650      	mov	r0, sl
 80079a6:	7821      	ldrb	r1, [r4, #0]
 80079a8:	f7ff f8d8 	bl	8006b5c <memchr>
 80079ac:	b140      	cbz	r0, 80079c0 <_vfiprintf_r+0x198>
 80079ae:	2340      	movs	r3, #64	; 0x40
 80079b0:	eba0 000a 	sub.w	r0, r0, sl
 80079b4:	fa03 f000 	lsl.w	r0, r3, r0
 80079b8:	9b04      	ldr	r3, [sp, #16]
 80079ba:	3401      	adds	r4, #1
 80079bc:	4303      	orrs	r3, r0
 80079be:	9304      	str	r3, [sp, #16]
 80079c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079c4:	2206      	movs	r2, #6
 80079c6:	482c      	ldr	r0, [pc, #176]	; (8007a78 <_vfiprintf_r+0x250>)
 80079c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079cc:	f7ff f8c6 	bl	8006b5c <memchr>
 80079d0:	2800      	cmp	r0, #0
 80079d2:	d03f      	beq.n	8007a54 <_vfiprintf_r+0x22c>
 80079d4:	4b29      	ldr	r3, [pc, #164]	; (8007a7c <_vfiprintf_r+0x254>)
 80079d6:	bb1b      	cbnz	r3, 8007a20 <_vfiprintf_r+0x1f8>
 80079d8:	9b03      	ldr	r3, [sp, #12]
 80079da:	3307      	adds	r3, #7
 80079dc:	f023 0307 	bic.w	r3, r3, #7
 80079e0:	3308      	adds	r3, #8
 80079e2:	9303      	str	r3, [sp, #12]
 80079e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079e6:	443b      	add	r3, r7
 80079e8:	9309      	str	r3, [sp, #36]	; 0x24
 80079ea:	e767      	b.n	80078bc <_vfiprintf_r+0x94>
 80079ec:	460c      	mov	r4, r1
 80079ee:	2001      	movs	r0, #1
 80079f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80079f4:	e7a5      	b.n	8007942 <_vfiprintf_r+0x11a>
 80079f6:	2300      	movs	r3, #0
 80079f8:	f04f 0c0a 	mov.w	ip, #10
 80079fc:	4619      	mov	r1, r3
 80079fe:	3401      	adds	r4, #1
 8007a00:	9305      	str	r3, [sp, #20]
 8007a02:	4620      	mov	r0, r4
 8007a04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a08:	3a30      	subs	r2, #48	; 0x30
 8007a0a:	2a09      	cmp	r2, #9
 8007a0c:	d903      	bls.n	8007a16 <_vfiprintf_r+0x1ee>
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d0c5      	beq.n	800799e <_vfiprintf_r+0x176>
 8007a12:	9105      	str	r1, [sp, #20]
 8007a14:	e7c3      	b.n	800799e <_vfiprintf_r+0x176>
 8007a16:	4604      	mov	r4, r0
 8007a18:	2301      	movs	r3, #1
 8007a1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a1e:	e7f0      	b.n	8007a02 <_vfiprintf_r+0x1da>
 8007a20:	ab03      	add	r3, sp, #12
 8007a22:	9300      	str	r3, [sp, #0]
 8007a24:	462a      	mov	r2, r5
 8007a26:	4630      	mov	r0, r6
 8007a28:	4b15      	ldr	r3, [pc, #84]	; (8007a80 <_vfiprintf_r+0x258>)
 8007a2a:	a904      	add	r1, sp, #16
 8007a2c:	f7fd fe2c 	bl	8005688 <_printf_float>
 8007a30:	4607      	mov	r7, r0
 8007a32:	1c78      	adds	r0, r7, #1
 8007a34:	d1d6      	bne.n	80079e4 <_vfiprintf_r+0x1bc>
 8007a36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a38:	07d9      	lsls	r1, r3, #31
 8007a3a:	d405      	bmi.n	8007a48 <_vfiprintf_r+0x220>
 8007a3c:	89ab      	ldrh	r3, [r5, #12]
 8007a3e:	059a      	lsls	r2, r3, #22
 8007a40:	d402      	bmi.n	8007a48 <_vfiprintf_r+0x220>
 8007a42:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a44:	f000 faaf 	bl	8007fa6 <__retarget_lock_release_recursive>
 8007a48:	89ab      	ldrh	r3, [r5, #12]
 8007a4a:	065b      	lsls	r3, r3, #25
 8007a4c:	f53f af12 	bmi.w	8007874 <_vfiprintf_r+0x4c>
 8007a50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a52:	e711      	b.n	8007878 <_vfiprintf_r+0x50>
 8007a54:	ab03      	add	r3, sp, #12
 8007a56:	9300      	str	r3, [sp, #0]
 8007a58:	462a      	mov	r2, r5
 8007a5a:	4630      	mov	r0, r6
 8007a5c:	4b08      	ldr	r3, [pc, #32]	; (8007a80 <_vfiprintf_r+0x258>)
 8007a5e:	a904      	add	r1, sp, #16
 8007a60:	f7fe f8ae 	bl	8005bc0 <_printf_i>
 8007a64:	e7e4      	b.n	8007a30 <_vfiprintf_r+0x208>
 8007a66:	bf00      	nop
 8007a68:	080086bc 	.word	0x080086bc
 8007a6c:	080086dc 	.word	0x080086dc
 8007a70:	0800869c 	.word	0x0800869c
 8007a74:	08008544 	.word	0x08008544
 8007a78:	0800854e 	.word	0x0800854e
 8007a7c:	08005689 	.word	0x08005689
 8007a80:	08007803 	.word	0x08007803
 8007a84:	0800854a 	.word	0x0800854a

08007a88 <__swbuf_r>:
 8007a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a8a:	460e      	mov	r6, r1
 8007a8c:	4614      	mov	r4, r2
 8007a8e:	4605      	mov	r5, r0
 8007a90:	b118      	cbz	r0, 8007a9a <__swbuf_r+0x12>
 8007a92:	6983      	ldr	r3, [r0, #24]
 8007a94:	b90b      	cbnz	r3, 8007a9a <__swbuf_r+0x12>
 8007a96:	f000 f9e7 	bl	8007e68 <__sinit>
 8007a9a:	4b21      	ldr	r3, [pc, #132]	; (8007b20 <__swbuf_r+0x98>)
 8007a9c:	429c      	cmp	r4, r3
 8007a9e:	d12b      	bne.n	8007af8 <__swbuf_r+0x70>
 8007aa0:	686c      	ldr	r4, [r5, #4]
 8007aa2:	69a3      	ldr	r3, [r4, #24]
 8007aa4:	60a3      	str	r3, [r4, #8]
 8007aa6:	89a3      	ldrh	r3, [r4, #12]
 8007aa8:	071a      	lsls	r2, r3, #28
 8007aaa:	d52f      	bpl.n	8007b0c <__swbuf_r+0x84>
 8007aac:	6923      	ldr	r3, [r4, #16]
 8007aae:	b36b      	cbz	r3, 8007b0c <__swbuf_r+0x84>
 8007ab0:	6923      	ldr	r3, [r4, #16]
 8007ab2:	6820      	ldr	r0, [r4, #0]
 8007ab4:	b2f6      	uxtb	r6, r6
 8007ab6:	1ac0      	subs	r0, r0, r3
 8007ab8:	6963      	ldr	r3, [r4, #20]
 8007aba:	4637      	mov	r7, r6
 8007abc:	4283      	cmp	r3, r0
 8007abe:	dc04      	bgt.n	8007aca <__swbuf_r+0x42>
 8007ac0:	4621      	mov	r1, r4
 8007ac2:	4628      	mov	r0, r5
 8007ac4:	f000 f93c 	bl	8007d40 <_fflush_r>
 8007ac8:	bb30      	cbnz	r0, 8007b18 <__swbuf_r+0x90>
 8007aca:	68a3      	ldr	r3, [r4, #8]
 8007acc:	3001      	adds	r0, #1
 8007ace:	3b01      	subs	r3, #1
 8007ad0:	60a3      	str	r3, [r4, #8]
 8007ad2:	6823      	ldr	r3, [r4, #0]
 8007ad4:	1c5a      	adds	r2, r3, #1
 8007ad6:	6022      	str	r2, [r4, #0]
 8007ad8:	701e      	strb	r6, [r3, #0]
 8007ada:	6963      	ldr	r3, [r4, #20]
 8007adc:	4283      	cmp	r3, r0
 8007ade:	d004      	beq.n	8007aea <__swbuf_r+0x62>
 8007ae0:	89a3      	ldrh	r3, [r4, #12]
 8007ae2:	07db      	lsls	r3, r3, #31
 8007ae4:	d506      	bpl.n	8007af4 <__swbuf_r+0x6c>
 8007ae6:	2e0a      	cmp	r6, #10
 8007ae8:	d104      	bne.n	8007af4 <__swbuf_r+0x6c>
 8007aea:	4621      	mov	r1, r4
 8007aec:	4628      	mov	r0, r5
 8007aee:	f000 f927 	bl	8007d40 <_fflush_r>
 8007af2:	b988      	cbnz	r0, 8007b18 <__swbuf_r+0x90>
 8007af4:	4638      	mov	r0, r7
 8007af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007af8:	4b0a      	ldr	r3, [pc, #40]	; (8007b24 <__swbuf_r+0x9c>)
 8007afa:	429c      	cmp	r4, r3
 8007afc:	d101      	bne.n	8007b02 <__swbuf_r+0x7a>
 8007afe:	68ac      	ldr	r4, [r5, #8]
 8007b00:	e7cf      	b.n	8007aa2 <__swbuf_r+0x1a>
 8007b02:	4b09      	ldr	r3, [pc, #36]	; (8007b28 <__swbuf_r+0xa0>)
 8007b04:	429c      	cmp	r4, r3
 8007b06:	bf08      	it	eq
 8007b08:	68ec      	ldreq	r4, [r5, #12]
 8007b0a:	e7ca      	b.n	8007aa2 <__swbuf_r+0x1a>
 8007b0c:	4621      	mov	r1, r4
 8007b0e:	4628      	mov	r0, r5
 8007b10:	f000 f81a 	bl	8007b48 <__swsetup_r>
 8007b14:	2800      	cmp	r0, #0
 8007b16:	d0cb      	beq.n	8007ab0 <__swbuf_r+0x28>
 8007b18:	f04f 37ff 	mov.w	r7, #4294967295
 8007b1c:	e7ea      	b.n	8007af4 <__swbuf_r+0x6c>
 8007b1e:	bf00      	nop
 8007b20:	080086bc 	.word	0x080086bc
 8007b24:	080086dc 	.word	0x080086dc
 8007b28:	0800869c 	.word	0x0800869c

08007b2c <__ascii_wctomb>:
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	4608      	mov	r0, r1
 8007b30:	b141      	cbz	r1, 8007b44 <__ascii_wctomb+0x18>
 8007b32:	2aff      	cmp	r2, #255	; 0xff
 8007b34:	d904      	bls.n	8007b40 <__ascii_wctomb+0x14>
 8007b36:	228a      	movs	r2, #138	; 0x8a
 8007b38:	f04f 30ff 	mov.w	r0, #4294967295
 8007b3c:	601a      	str	r2, [r3, #0]
 8007b3e:	4770      	bx	lr
 8007b40:	2001      	movs	r0, #1
 8007b42:	700a      	strb	r2, [r1, #0]
 8007b44:	4770      	bx	lr
	...

08007b48 <__swsetup_r>:
 8007b48:	4b32      	ldr	r3, [pc, #200]	; (8007c14 <__swsetup_r+0xcc>)
 8007b4a:	b570      	push	{r4, r5, r6, lr}
 8007b4c:	681d      	ldr	r5, [r3, #0]
 8007b4e:	4606      	mov	r6, r0
 8007b50:	460c      	mov	r4, r1
 8007b52:	b125      	cbz	r5, 8007b5e <__swsetup_r+0x16>
 8007b54:	69ab      	ldr	r3, [r5, #24]
 8007b56:	b913      	cbnz	r3, 8007b5e <__swsetup_r+0x16>
 8007b58:	4628      	mov	r0, r5
 8007b5a:	f000 f985 	bl	8007e68 <__sinit>
 8007b5e:	4b2e      	ldr	r3, [pc, #184]	; (8007c18 <__swsetup_r+0xd0>)
 8007b60:	429c      	cmp	r4, r3
 8007b62:	d10f      	bne.n	8007b84 <__swsetup_r+0x3c>
 8007b64:	686c      	ldr	r4, [r5, #4]
 8007b66:	89a3      	ldrh	r3, [r4, #12]
 8007b68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b6c:	0719      	lsls	r1, r3, #28
 8007b6e:	d42c      	bmi.n	8007bca <__swsetup_r+0x82>
 8007b70:	06dd      	lsls	r5, r3, #27
 8007b72:	d411      	bmi.n	8007b98 <__swsetup_r+0x50>
 8007b74:	2309      	movs	r3, #9
 8007b76:	6033      	str	r3, [r6, #0]
 8007b78:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b80:	81a3      	strh	r3, [r4, #12]
 8007b82:	e03e      	b.n	8007c02 <__swsetup_r+0xba>
 8007b84:	4b25      	ldr	r3, [pc, #148]	; (8007c1c <__swsetup_r+0xd4>)
 8007b86:	429c      	cmp	r4, r3
 8007b88:	d101      	bne.n	8007b8e <__swsetup_r+0x46>
 8007b8a:	68ac      	ldr	r4, [r5, #8]
 8007b8c:	e7eb      	b.n	8007b66 <__swsetup_r+0x1e>
 8007b8e:	4b24      	ldr	r3, [pc, #144]	; (8007c20 <__swsetup_r+0xd8>)
 8007b90:	429c      	cmp	r4, r3
 8007b92:	bf08      	it	eq
 8007b94:	68ec      	ldreq	r4, [r5, #12]
 8007b96:	e7e6      	b.n	8007b66 <__swsetup_r+0x1e>
 8007b98:	0758      	lsls	r0, r3, #29
 8007b9a:	d512      	bpl.n	8007bc2 <__swsetup_r+0x7a>
 8007b9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b9e:	b141      	cbz	r1, 8007bb2 <__swsetup_r+0x6a>
 8007ba0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ba4:	4299      	cmp	r1, r3
 8007ba6:	d002      	beq.n	8007bae <__swsetup_r+0x66>
 8007ba8:	4630      	mov	r0, r6
 8007baa:	f7ff fb75 	bl	8007298 <_free_r>
 8007bae:	2300      	movs	r3, #0
 8007bb0:	6363      	str	r3, [r4, #52]	; 0x34
 8007bb2:	89a3      	ldrh	r3, [r4, #12]
 8007bb4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007bb8:	81a3      	strh	r3, [r4, #12]
 8007bba:	2300      	movs	r3, #0
 8007bbc:	6063      	str	r3, [r4, #4]
 8007bbe:	6923      	ldr	r3, [r4, #16]
 8007bc0:	6023      	str	r3, [r4, #0]
 8007bc2:	89a3      	ldrh	r3, [r4, #12]
 8007bc4:	f043 0308 	orr.w	r3, r3, #8
 8007bc8:	81a3      	strh	r3, [r4, #12]
 8007bca:	6923      	ldr	r3, [r4, #16]
 8007bcc:	b94b      	cbnz	r3, 8007be2 <__swsetup_r+0x9a>
 8007bce:	89a3      	ldrh	r3, [r4, #12]
 8007bd0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007bd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bd8:	d003      	beq.n	8007be2 <__swsetup_r+0x9a>
 8007bda:	4621      	mov	r1, r4
 8007bdc:	4630      	mov	r0, r6
 8007bde:	f000 fa07 	bl	8007ff0 <__smakebuf_r>
 8007be2:	89a0      	ldrh	r0, [r4, #12]
 8007be4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007be8:	f010 0301 	ands.w	r3, r0, #1
 8007bec:	d00a      	beq.n	8007c04 <__swsetup_r+0xbc>
 8007bee:	2300      	movs	r3, #0
 8007bf0:	60a3      	str	r3, [r4, #8]
 8007bf2:	6963      	ldr	r3, [r4, #20]
 8007bf4:	425b      	negs	r3, r3
 8007bf6:	61a3      	str	r3, [r4, #24]
 8007bf8:	6923      	ldr	r3, [r4, #16]
 8007bfa:	b943      	cbnz	r3, 8007c0e <__swsetup_r+0xc6>
 8007bfc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007c00:	d1ba      	bne.n	8007b78 <__swsetup_r+0x30>
 8007c02:	bd70      	pop	{r4, r5, r6, pc}
 8007c04:	0781      	lsls	r1, r0, #30
 8007c06:	bf58      	it	pl
 8007c08:	6963      	ldrpl	r3, [r4, #20]
 8007c0a:	60a3      	str	r3, [r4, #8]
 8007c0c:	e7f4      	b.n	8007bf8 <__swsetup_r+0xb0>
 8007c0e:	2000      	movs	r0, #0
 8007c10:	e7f7      	b.n	8007c02 <__swsetup_r+0xba>
 8007c12:	bf00      	nop
 8007c14:	2000000c 	.word	0x2000000c
 8007c18:	080086bc 	.word	0x080086bc
 8007c1c:	080086dc 	.word	0x080086dc
 8007c20:	0800869c 	.word	0x0800869c

08007c24 <abort>:
 8007c24:	2006      	movs	r0, #6
 8007c26:	b508      	push	{r3, lr}
 8007c28:	f000 fa52 	bl	80080d0 <raise>
 8007c2c:	2001      	movs	r0, #1
 8007c2e:	f7f9 ff34 	bl	8001a9a <_exit>
	...

08007c34 <__sflush_r>:
 8007c34:	898a      	ldrh	r2, [r1, #12]
 8007c36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c3a:	4605      	mov	r5, r0
 8007c3c:	0710      	lsls	r0, r2, #28
 8007c3e:	460c      	mov	r4, r1
 8007c40:	d458      	bmi.n	8007cf4 <__sflush_r+0xc0>
 8007c42:	684b      	ldr	r3, [r1, #4]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	dc05      	bgt.n	8007c54 <__sflush_r+0x20>
 8007c48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	dc02      	bgt.n	8007c54 <__sflush_r+0x20>
 8007c4e:	2000      	movs	r0, #0
 8007c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c56:	2e00      	cmp	r6, #0
 8007c58:	d0f9      	beq.n	8007c4e <__sflush_r+0x1a>
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c60:	682f      	ldr	r7, [r5, #0]
 8007c62:	602b      	str	r3, [r5, #0]
 8007c64:	d032      	beq.n	8007ccc <__sflush_r+0x98>
 8007c66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c68:	89a3      	ldrh	r3, [r4, #12]
 8007c6a:	075a      	lsls	r2, r3, #29
 8007c6c:	d505      	bpl.n	8007c7a <__sflush_r+0x46>
 8007c6e:	6863      	ldr	r3, [r4, #4]
 8007c70:	1ac0      	subs	r0, r0, r3
 8007c72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c74:	b10b      	cbz	r3, 8007c7a <__sflush_r+0x46>
 8007c76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c78:	1ac0      	subs	r0, r0, r3
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c80:	4628      	mov	r0, r5
 8007c82:	6a21      	ldr	r1, [r4, #32]
 8007c84:	47b0      	blx	r6
 8007c86:	1c43      	adds	r3, r0, #1
 8007c88:	89a3      	ldrh	r3, [r4, #12]
 8007c8a:	d106      	bne.n	8007c9a <__sflush_r+0x66>
 8007c8c:	6829      	ldr	r1, [r5, #0]
 8007c8e:	291d      	cmp	r1, #29
 8007c90:	d82c      	bhi.n	8007cec <__sflush_r+0xb8>
 8007c92:	4a2a      	ldr	r2, [pc, #168]	; (8007d3c <__sflush_r+0x108>)
 8007c94:	40ca      	lsrs	r2, r1
 8007c96:	07d6      	lsls	r6, r2, #31
 8007c98:	d528      	bpl.n	8007cec <__sflush_r+0xb8>
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	6062      	str	r2, [r4, #4]
 8007c9e:	6922      	ldr	r2, [r4, #16]
 8007ca0:	04d9      	lsls	r1, r3, #19
 8007ca2:	6022      	str	r2, [r4, #0]
 8007ca4:	d504      	bpl.n	8007cb0 <__sflush_r+0x7c>
 8007ca6:	1c42      	adds	r2, r0, #1
 8007ca8:	d101      	bne.n	8007cae <__sflush_r+0x7a>
 8007caa:	682b      	ldr	r3, [r5, #0]
 8007cac:	b903      	cbnz	r3, 8007cb0 <__sflush_r+0x7c>
 8007cae:	6560      	str	r0, [r4, #84]	; 0x54
 8007cb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cb2:	602f      	str	r7, [r5, #0]
 8007cb4:	2900      	cmp	r1, #0
 8007cb6:	d0ca      	beq.n	8007c4e <__sflush_r+0x1a>
 8007cb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007cbc:	4299      	cmp	r1, r3
 8007cbe:	d002      	beq.n	8007cc6 <__sflush_r+0x92>
 8007cc0:	4628      	mov	r0, r5
 8007cc2:	f7ff fae9 	bl	8007298 <_free_r>
 8007cc6:	2000      	movs	r0, #0
 8007cc8:	6360      	str	r0, [r4, #52]	; 0x34
 8007cca:	e7c1      	b.n	8007c50 <__sflush_r+0x1c>
 8007ccc:	6a21      	ldr	r1, [r4, #32]
 8007cce:	2301      	movs	r3, #1
 8007cd0:	4628      	mov	r0, r5
 8007cd2:	47b0      	blx	r6
 8007cd4:	1c41      	adds	r1, r0, #1
 8007cd6:	d1c7      	bne.n	8007c68 <__sflush_r+0x34>
 8007cd8:	682b      	ldr	r3, [r5, #0]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d0c4      	beq.n	8007c68 <__sflush_r+0x34>
 8007cde:	2b1d      	cmp	r3, #29
 8007ce0:	d001      	beq.n	8007ce6 <__sflush_r+0xb2>
 8007ce2:	2b16      	cmp	r3, #22
 8007ce4:	d101      	bne.n	8007cea <__sflush_r+0xb6>
 8007ce6:	602f      	str	r7, [r5, #0]
 8007ce8:	e7b1      	b.n	8007c4e <__sflush_r+0x1a>
 8007cea:	89a3      	ldrh	r3, [r4, #12]
 8007cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cf0:	81a3      	strh	r3, [r4, #12]
 8007cf2:	e7ad      	b.n	8007c50 <__sflush_r+0x1c>
 8007cf4:	690f      	ldr	r7, [r1, #16]
 8007cf6:	2f00      	cmp	r7, #0
 8007cf8:	d0a9      	beq.n	8007c4e <__sflush_r+0x1a>
 8007cfa:	0793      	lsls	r3, r2, #30
 8007cfc:	bf18      	it	ne
 8007cfe:	2300      	movne	r3, #0
 8007d00:	680e      	ldr	r6, [r1, #0]
 8007d02:	bf08      	it	eq
 8007d04:	694b      	ldreq	r3, [r1, #20]
 8007d06:	eba6 0807 	sub.w	r8, r6, r7
 8007d0a:	600f      	str	r7, [r1, #0]
 8007d0c:	608b      	str	r3, [r1, #8]
 8007d0e:	f1b8 0f00 	cmp.w	r8, #0
 8007d12:	dd9c      	ble.n	8007c4e <__sflush_r+0x1a>
 8007d14:	4643      	mov	r3, r8
 8007d16:	463a      	mov	r2, r7
 8007d18:	4628      	mov	r0, r5
 8007d1a:	6a21      	ldr	r1, [r4, #32]
 8007d1c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d1e:	47b0      	blx	r6
 8007d20:	2800      	cmp	r0, #0
 8007d22:	dc06      	bgt.n	8007d32 <__sflush_r+0xfe>
 8007d24:	89a3      	ldrh	r3, [r4, #12]
 8007d26:	f04f 30ff 	mov.w	r0, #4294967295
 8007d2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d2e:	81a3      	strh	r3, [r4, #12]
 8007d30:	e78e      	b.n	8007c50 <__sflush_r+0x1c>
 8007d32:	4407      	add	r7, r0
 8007d34:	eba8 0800 	sub.w	r8, r8, r0
 8007d38:	e7e9      	b.n	8007d0e <__sflush_r+0xda>
 8007d3a:	bf00      	nop
 8007d3c:	20400001 	.word	0x20400001

08007d40 <_fflush_r>:
 8007d40:	b538      	push	{r3, r4, r5, lr}
 8007d42:	690b      	ldr	r3, [r1, #16]
 8007d44:	4605      	mov	r5, r0
 8007d46:	460c      	mov	r4, r1
 8007d48:	b913      	cbnz	r3, 8007d50 <_fflush_r+0x10>
 8007d4a:	2500      	movs	r5, #0
 8007d4c:	4628      	mov	r0, r5
 8007d4e:	bd38      	pop	{r3, r4, r5, pc}
 8007d50:	b118      	cbz	r0, 8007d5a <_fflush_r+0x1a>
 8007d52:	6983      	ldr	r3, [r0, #24]
 8007d54:	b90b      	cbnz	r3, 8007d5a <_fflush_r+0x1a>
 8007d56:	f000 f887 	bl	8007e68 <__sinit>
 8007d5a:	4b14      	ldr	r3, [pc, #80]	; (8007dac <_fflush_r+0x6c>)
 8007d5c:	429c      	cmp	r4, r3
 8007d5e:	d11b      	bne.n	8007d98 <_fflush_r+0x58>
 8007d60:	686c      	ldr	r4, [r5, #4]
 8007d62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d0ef      	beq.n	8007d4a <_fflush_r+0xa>
 8007d6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d6c:	07d0      	lsls	r0, r2, #31
 8007d6e:	d404      	bmi.n	8007d7a <_fflush_r+0x3a>
 8007d70:	0599      	lsls	r1, r3, #22
 8007d72:	d402      	bmi.n	8007d7a <_fflush_r+0x3a>
 8007d74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d76:	f000 f915 	bl	8007fa4 <__retarget_lock_acquire_recursive>
 8007d7a:	4628      	mov	r0, r5
 8007d7c:	4621      	mov	r1, r4
 8007d7e:	f7ff ff59 	bl	8007c34 <__sflush_r>
 8007d82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d84:	4605      	mov	r5, r0
 8007d86:	07da      	lsls	r2, r3, #31
 8007d88:	d4e0      	bmi.n	8007d4c <_fflush_r+0xc>
 8007d8a:	89a3      	ldrh	r3, [r4, #12]
 8007d8c:	059b      	lsls	r3, r3, #22
 8007d8e:	d4dd      	bmi.n	8007d4c <_fflush_r+0xc>
 8007d90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d92:	f000 f908 	bl	8007fa6 <__retarget_lock_release_recursive>
 8007d96:	e7d9      	b.n	8007d4c <_fflush_r+0xc>
 8007d98:	4b05      	ldr	r3, [pc, #20]	; (8007db0 <_fflush_r+0x70>)
 8007d9a:	429c      	cmp	r4, r3
 8007d9c:	d101      	bne.n	8007da2 <_fflush_r+0x62>
 8007d9e:	68ac      	ldr	r4, [r5, #8]
 8007da0:	e7df      	b.n	8007d62 <_fflush_r+0x22>
 8007da2:	4b04      	ldr	r3, [pc, #16]	; (8007db4 <_fflush_r+0x74>)
 8007da4:	429c      	cmp	r4, r3
 8007da6:	bf08      	it	eq
 8007da8:	68ec      	ldreq	r4, [r5, #12]
 8007daa:	e7da      	b.n	8007d62 <_fflush_r+0x22>
 8007dac:	080086bc 	.word	0x080086bc
 8007db0:	080086dc 	.word	0x080086dc
 8007db4:	0800869c 	.word	0x0800869c

08007db8 <std>:
 8007db8:	2300      	movs	r3, #0
 8007dba:	b510      	push	{r4, lr}
 8007dbc:	4604      	mov	r4, r0
 8007dbe:	e9c0 3300 	strd	r3, r3, [r0]
 8007dc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007dc6:	6083      	str	r3, [r0, #8]
 8007dc8:	8181      	strh	r1, [r0, #12]
 8007dca:	6643      	str	r3, [r0, #100]	; 0x64
 8007dcc:	81c2      	strh	r2, [r0, #14]
 8007dce:	6183      	str	r3, [r0, #24]
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	2208      	movs	r2, #8
 8007dd4:	305c      	adds	r0, #92	; 0x5c
 8007dd6:	f7fd fbb1 	bl	800553c <memset>
 8007dda:	4b05      	ldr	r3, [pc, #20]	; (8007df0 <std+0x38>)
 8007ddc:	6224      	str	r4, [r4, #32]
 8007dde:	6263      	str	r3, [r4, #36]	; 0x24
 8007de0:	4b04      	ldr	r3, [pc, #16]	; (8007df4 <std+0x3c>)
 8007de2:	62a3      	str	r3, [r4, #40]	; 0x28
 8007de4:	4b04      	ldr	r3, [pc, #16]	; (8007df8 <std+0x40>)
 8007de6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007de8:	4b04      	ldr	r3, [pc, #16]	; (8007dfc <std+0x44>)
 8007dea:	6323      	str	r3, [r4, #48]	; 0x30
 8007dec:	bd10      	pop	{r4, pc}
 8007dee:	bf00      	nop
 8007df0:	08008109 	.word	0x08008109
 8007df4:	0800812b 	.word	0x0800812b
 8007df8:	08008163 	.word	0x08008163
 8007dfc:	08008187 	.word	0x08008187

08007e00 <_cleanup_r>:
 8007e00:	4901      	ldr	r1, [pc, #4]	; (8007e08 <_cleanup_r+0x8>)
 8007e02:	f000 b8af 	b.w	8007f64 <_fwalk_reent>
 8007e06:	bf00      	nop
 8007e08:	08007d41 	.word	0x08007d41

08007e0c <__sfmoreglue>:
 8007e0c:	b570      	push	{r4, r5, r6, lr}
 8007e0e:	2568      	movs	r5, #104	; 0x68
 8007e10:	1e4a      	subs	r2, r1, #1
 8007e12:	4355      	muls	r5, r2
 8007e14:	460e      	mov	r6, r1
 8007e16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007e1a:	f7ff fa89 	bl	8007330 <_malloc_r>
 8007e1e:	4604      	mov	r4, r0
 8007e20:	b140      	cbz	r0, 8007e34 <__sfmoreglue+0x28>
 8007e22:	2100      	movs	r1, #0
 8007e24:	e9c0 1600 	strd	r1, r6, [r0]
 8007e28:	300c      	adds	r0, #12
 8007e2a:	60a0      	str	r0, [r4, #8]
 8007e2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007e30:	f7fd fb84 	bl	800553c <memset>
 8007e34:	4620      	mov	r0, r4
 8007e36:	bd70      	pop	{r4, r5, r6, pc}

08007e38 <__sfp_lock_acquire>:
 8007e38:	4801      	ldr	r0, [pc, #4]	; (8007e40 <__sfp_lock_acquire+0x8>)
 8007e3a:	f000 b8b3 	b.w	8007fa4 <__retarget_lock_acquire_recursive>
 8007e3e:	bf00      	nop
 8007e40:	20000418 	.word	0x20000418

08007e44 <__sfp_lock_release>:
 8007e44:	4801      	ldr	r0, [pc, #4]	; (8007e4c <__sfp_lock_release+0x8>)
 8007e46:	f000 b8ae 	b.w	8007fa6 <__retarget_lock_release_recursive>
 8007e4a:	bf00      	nop
 8007e4c:	20000418 	.word	0x20000418

08007e50 <__sinit_lock_acquire>:
 8007e50:	4801      	ldr	r0, [pc, #4]	; (8007e58 <__sinit_lock_acquire+0x8>)
 8007e52:	f000 b8a7 	b.w	8007fa4 <__retarget_lock_acquire_recursive>
 8007e56:	bf00      	nop
 8007e58:	20000413 	.word	0x20000413

08007e5c <__sinit_lock_release>:
 8007e5c:	4801      	ldr	r0, [pc, #4]	; (8007e64 <__sinit_lock_release+0x8>)
 8007e5e:	f000 b8a2 	b.w	8007fa6 <__retarget_lock_release_recursive>
 8007e62:	bf00      	nop
 8007e64:	20000413 	.word	0x20000413

08007e68 <__sinit>:
 8007e68:	b510      	push	{r4, lr}
 8007e6a:	4604      	mov	r4, r0
 8007e6c:	f7ff fff0 	bl	8007e50 <__sinit_lock_acquire>
 8007e70:	69a3      	ldr	r3, [r4, #24]
 8007e72:	b11b      	cbz	r3, 8007e7c <__sinit+0x14>
 8007e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e78:	f7ff bff0 	b.w	8007e5c <__sinit_lock_release>
 8007e7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007e80:	6523      	str	r3, [r4, #80]	; 0x50
 8007e82:	4b13      	ldr	r3, [pc, #76]	; (8007ed0 <__sinit+0x68>)
 8007e84:	4a13      	ldr	r2, [pc, #76]	; (8007ed4 <__sinit+0x6c>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	62a2      	str	r2, [r4, #40]	; 0x28
 8007e8a:	42a3      	cmp	r3, r4
 8007e8c:	bf08      	it	eq
 8007e8e:	2301      	moveq	r3, #1
 8007e90:	4620      	mov	r0, r4
 8007e92:	bf08      	it	eq
 8007e94:	61a3      	streq	r3, [r4, #24]
 8007e96:	f000 f81f 	bl	8007ed8 <__sfp>
 8007e9a:	6060      	str	r0, [r4, #4]
 8007e9c:	4620      	mov	r0, r4
 8007e9e:	f000 f81b 	bl	8007ed8 <__sfp>
 8007ea2:	60a0      	str	r0, [r4, #8]
 8007ea4:	4620      	mov	r0, r4
 8007ea6:	f000 f817 	bl	8007ed8 <__sfp>
 8007eaa:	2200      	movs	r2, #0
 8007eac:	2104      	movs	r1, #4
 8007eae:	60e0      	str	r0, [r4, #12]
 8007eb0:	6860      	ldr	r0, [r4, #4]
 8007eb2:	f7ff ff81 	bl	8007db8 <std>
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	2109      	movs	r1, #9
 8007eba:	68a0      	ldr	r0, [r4, #8]
 8007ebc:	f7ff ff7c 	bl	8007db8 <std>
 8007ec0:	2202      	movs	r2, #2
 8007ec2:	2112      	movs	r1, #18
 8007ec4:	68e0      	ldr	r0, [r4, #12]
 8007ec6:	f7ff ff77 	bl	8007db8 <std>
 8007eca:	2301      	movs	r3, #1
 8007ecc:	61a3      	str	r3, [r4, #24]
 8007ece:	e7d1      	b.n	8007e74 <__sinit+0xc>
 8007ed0:	0800831c 	.word	0x0800831c
 8007ed4:	08007e01 	.word	0x08007e01

08007ed8 <__sfp>:
 8007ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eda:	4607      	mov	r7, r0
 8007edc:	f7ff ffac 	bl	8007e38 <__sfp_lock_acquire>
 8007ee0:	4b1e      	ldr	r3, [pc, #120]	; (8007f5c <__sfp+0x84>)
 8007ee2:	681e      	ldr	r6, [r3, #0]
 8007ee4:	69b3      	ldr	r3, [r6, #24]
 8007ee6:	b913      	cbnz	r3, 8007eee <__sfp+0x16>
 8007ee8:	4630      	mov	r0, r6
 8007eea:	f7ff ffbd 	bl	8007e68 <__sinit>
 8007eee:	3648      	adds	r6, #72	; 0x48
 8007ef0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007ef4:	3b01      	subs	r3, #1
 8007ef6:	d503      	bpl.n	8007f00 <__sfp+0x28>
 8007ef8:	6833      	ldr	r3, [r6, #0]
 8007efa:	b30b      	cbz	r3, 8007f40 <__sfp+0x68>
 8007efc:	6836      	ldr	r6, [r6, #0]
 8007efe:	e7f7      	b.n	8007ef0 <__sfp+0x18>
 8007f00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007f04:	b9d5      	cbnz	r5, 8007f3c <__sfp+0x64>
 8007f06:	4b16      	ldr	r3, [pc, #88]	; (8007f60 <__sfp+0x88>)
 8007f08:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007f0c:	60e3      	str	r3, [r4, #12]
 8007f0e:	6665      	str	r5, [r4, #100]	; 0x64
 8007f10:	f000 f847 	bl	8007fa2 <__retarget_lock_init_recursive>
 8007f14:	f7ff ff96 	bl	8007e44 <__sfp_lock_release>
 8007f18:	2208      	movs	r2, #8
 8007f1a:	4629      	mov	r1, r5
 8007f1c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007f20:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007f24:	6025      	str	r5, [r4, #0]
 8007f26:	61a5      	str	r5, [r4, #24]
 8007f28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007f2c:	f7fd fb06 	bl	800553c <memset>
 8007f30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007f34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007f38:	4620      	mov	r0, r4
 8007f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f3c:	3468      	adds	r4, #104	; 0x68
 8007f3e:	e7d9      	b.n	8007ef4 <__sfp+0x1c>
 8007f40:	2104      	movs	r1, #4
 8007f42:	4638      	mov	r0, r7
 8007f44:	f7ff ff62 	bl	8007e0c <__sfmoreglue>
 8007f48:	4604      	mov	r4, r0
 8007f4a:	6030      	str	r0, [r6, #0]
 8007f4c:	2800      	cmp	r0, #0
 8007f4e:	d1d5      	bne.n	8007efc <__sfp+0x24>
 8007f50:	f7ff ff78 	bl	8007e44 <__sfp_lock_release>
 8007f54:	230c      	movs	r3, #12
 8007f56:	603b      	str	r3, [r7, #0]
 8007f58:	e7ee      	b.n	8007f38 <__sfp+0x60>
 8007f5a:	bf00      	nop
 8007f5c:	0800831c 	.word	0x0800831c
 8007f60:	ffff0001 	.word	0xffff0001

08007f64 <_fwalk_reent>:
 8007f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f68:	4606      	mov	r6, r0
 8007f6a:	4688      	mov	r8, r1
 8007f6c:	2700      	movs	r7, #0
 8007f6e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007f72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f76:	f1b9 0901 	subs.w	r9, r9, #1
 8007f7a:	d505      	bpl.n	8007f88 <_fwalk_reent+0x24>
 8007f7c:	6824      	ldr	r4, [r4, #0]
 8007f7e:	2c00      	cmp	r4, #0
 8007f80:	d1f7      	bne.n	8007f72 <_fwalk_reent+0xe>
 8007f82:	4638      	mov	r0, r7
 8007f84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f88:	89ab      	ldrh	r3, [r5, #12]
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d907      	bls.n	8007f9e <_fwalk_reent+0x3a>
 8007f8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f92:	3301      	adds	r3, #1
 8007f94:	d003      	beq.n	8007f9e <_fwalk_reent+0x3a>
 8007f96:	4629      	mov	r1, r5
 8007f98:	4630      	mov	r0, r6
 8007f9a:	47c0      	blx	r8
 8007f9c:	4307      	orrs	r7, r0
 8007f9e:	3568      	adds	r5, #104	; 0x68
 8007fa0:	e7e9      	b.n	8007f76 <_fwalk_reent+0x12>

08007fa2 <__retarget_lock_init_recursive>:
 8007fa2:	4770      	bx	lr

08007fa4 <__retarget_lock_acquire_recursive>:
 8007fa4:	4770      	bx	lr

08007fa6 <__retarget_lock_release_recursive>:
 8007fa6:	4770      	bx	lr

08007fa8 <__swhatbuf_r>:
 8007fa8:	b570      	push	{r4, r5, r6, lr}
 8007faa:	460e      	mov	r6, r1
 8007fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fb0:	4614      	mov	r4, r2
 8007fb2:	2900      	cmp	r1, #0
 8007fb4:	461d      	mov	r5, r3
 8007fb6:	b096      	sub	sp, #88	; 0x58
 8007fb8:	da07      	bge.n	8007fca <__swhatbuf_r+0x22>
 8007fba:	2300      	movs	r3, #0
 8007fbc:	602b      	str	r3, [r5, #0]
 8007fbe:	89b3      	ldrh	r3, [r6, #12]
 8007fc0:	061a      	lsls	r2, r3, #24
 8007fc2:	d410      	bmi.n	8007fe6 <__swhatbuf_r+0x3e>
 8007fc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fc8:	e00e      	b.n	8007fe8 <__swhatbuf_r+0x40>
 8007fca:	466a      	mov	r2, sp
 8007fcc:	f000 f902 	bl	80081d4 <_fstat_r>
 8007fd0:	2800      	cmp	r0, #0
 8007fd2:	dbf2      	blt.n	8007fba <__swhatbuf_r+0x12>
 8007fd4:	9a01      	ldr	r2, [sp, #4]
 8007fd6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007fda:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007fde:	425a      	negs	r2, r3
 8007fe0:	415a      	adcs	r2, r3
 8007fe2:	602a      	str	r2, [r5, #0]
 8007fe4:	e7ee      	b.n	8007fc4 <__swhatbuf_r+0x1c>
 8007fe6:	2340      	movs	r3, #64	; 0x40
 8007fe8:	2000      	movs	r0, #0
 8007fea:	6023      	str	r3, [r4, #0]
 8007fec:	b016      	add	sp, #88	; 0x58
 8007fee:	bd70      	pop	{r4, r5, r6, pc}

08007ff0 <__smakebuf_r>:
 8007ff0:	898b      	ldrh	r3, [r1, #12]
 8007ff2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ff4:	079d      	lsls	r5, r3, #30
 8007ff6:	4606      	mov	r6, r0
 8007ff8:	460c      	mov	r4, r1
 8007ffa:	d507      	bpl.n	800800c <__smakebuf_r+0x1c>
 8007ffc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008000:	6023      	str	r3, [r4, #0]
 8008002:	6123      	str	r3, [r4, #16]
 8008004:	2301      	movs	r3, #1
 8008006:	6163      	str	r3, [r4, #20]
 8008008:	b002      	add	sp, #8
 800800a:	bd70      	pop	{r4, r5, r6, pc}
 800800c:	466a      	mov	r2, sp
 800800e:	ab01      	add	r3, sp, #4
 8008010:	f7ff ffca 	bl	8007fa8 <__swhatbuf_r>
 8008014:	9900      	ldr	r1, [sp, #0]
 8008016:	4605      	mov	r5, r0
 8008018:	4630      	mov	r0, r6
 800801a:	f7ff f989 	bl	8007330 <_malloc_r>
 800801e:	b948      	cbnz	r0, 8008034 <__smakebuf_r+0x44>
 8008020:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008024:	059a      	lsls	r2, r3, #22
 8008026:	d4ef      	bmi.n	8008008 <__smakebuf_r+0x18>
 8008028:	f023 0303 	bic.w	r3, r3, #3
 800802c:	f043 0302 	orr.w	r3, r3, #2
 8008030:	81a3      	strh	r3, [r4, #12]
 8008032:	e7e3      	b.n	8007ffc <__smakebuf_r+0xc>
 8008034:	4b0d      	ldr	r3, [pc, #52]	; (800806c <__smakebuf_r+0x7c>)
 8008036:	62b3      	str	r3, [r6, #40]	; 0x28
 8008038:	89a3      	ldrh	r3, [r4, #12]
 800803a:	6020      	str	r0, [r4, #0]
 800803c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008040:	81a3      	strh	r3, [r4, #12]
 8008042:	9b00      	ldr	r3, [sp, #0]
 8008044:	6120      	str	r0, [r4, #16]
 8008046:	6163      	str	r3, [r4, #20]
 8008048:	9b01      	ldr	r3, [sp, #4]
 800804a:	b15b      	cbz	r3, 8008064 <__smakebuf_r+0x74>
 800804c:	4630      	mov	r0, r6
 800804e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008052:	f000 f8d1 	bl	80081f8 <_isatty_r>
 8008056:	b128      	cbz	r0, 8008064 <__smakebuf_r+0x74>
 8008058:	89a3      	ldrh	r3, [r4, #12]
 800805a:	f023 0303 	bic.w	r3, r3, #3
 800805e:	f043 0301 	orr.w	r3, r3, #1
 8008062:	81a3      	strh	r3, [r4, #12]
 8008064:	89a0      	ldrh	r0, [r4, #12]
 8008066:	4305      	orrs	r5, r0
 8008068:	81a5      	strh	r5, [r4, #12]
 800806a:	e7cd      	b.n	8008008 <__smakebuf_r+0x18>
 800806c:	08007e01 	.word	0x08007e01

08008070 <_malloc_usable_size_r>:
 8008070:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008074:	1f18      	subs	r0, r3, #4
 8008076:	2b00      	cmp	r3, #0
 8008078:	bfbc      	itt	lt
 800807a:	580b      	ldrlt	r3, [r1, r0]
 800807c:	18c0      	addlt	r0, r0, r3
 800807e:	4770      	bx	lr

08008080 <_raise_r>:
 8008080:	291f      	cmp	r1, #31
 8008082:	b538      	push	{r3, r4, r5, lr}
 8008084:	4604      	mov	r4, r0
 8008086:	460d      	mov	r5, r1
 8008088:	d904      	bls.n	8008094 <_raise_r+0x14>
 800808a:	2316      	movs	r3, #22
 800808c:	6003      	str	r3, [r0, #0]
 800808e:	f04f 30ff 	mov.w	r0, #4294967295
 8008092:	bd38      	pop	{r3, r4, r5, pc}
 8008094:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008096:	b112      	cbz	r2, 800809e <_raise_r+0x1e>
 8008098:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800809c:	b94b      	cbnz	r3, 80080b2 <_raise_r+0x32>
 800809e:	4620      	mov	r0, r4
 80080a0:	f000 f830 	bl	8008104 <_getpid_r>
 80080a4:	462a      	mov	r2, r5
 80080a6:	4601      	mov	r1, r0
 80080a8:	4620      	mov	r0, r4
 80080aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080ae:	f000 b817 	b.w	80080e0 <_kill_r>
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d00a      	beq.n	80080cc <_raise_r+0x4c>
 80080b6:	1c59      	adds	r1, r3, #1
 80080b8:	d103      	bne.n	80080c2 <_raise_r+0x42>
 80080ba:	2316      	movs	r3, #22
 80080bc:	6003      	str	r3, [r0, #0]
 80080be:	2001      	movs	r0, #1
 80080c0:	e7e7      	b.n	8008092 <_raise_r+0x12>
 80080c2:	2400      	movs	r4, #0
 80080c4:	4628      	mov	r0, r5
 80080c6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80080ca:	4798      	blx	r3
 80080cc:	2000      	movs	r0, #0
 80080ce:	e7e0      	b.n	8008092 <_raise_r+0x12>

080080d0 <raise>:
 80080d0:	4b02      	ldr	r3, [pc, #8]	; (80080dc <raise+0xc>)
 80080d2:	4601      	mov	r1, r0
 80080d4:	6818      	ldr	r0, [r3, #0]
 80080d6:	f7ff bfd3 	b.w	8008080 <_raise_r>
 80080da:	bf00      	nop
 80080dc:	2000000c 	.word	0x2000000c

080080e0 <_kill_r>:
 80080e0:	b538      	push	{r3, r4, r5, lr}
 80080e2:	2300      	movs	r3, #0
 80080e4:	4d06      	ldr	r5, [pc, #24]	; (8008100 <_kill_r+0x20>)
 80080e6:	4604      	mov	r4, r0
 80080e8:	4608      	mov	r0, r1
 80080ea:	4611      	mov	r1, r2
 80080ec:	602b      	str	r3, [r5, #0]
 80080ee:	f7f9 fcc4 	bl	8001a7a <_kill>
 80080f2:	1c43      	adds	r3, r0, #1
 80080f4:	d102      	bne.n	80080fc <_kill_r+0x1c>
 80080f6:	682b      	ldr	r3, [r5, #0]
 80080f8:	b103      	cbz	r3, 80080fc <_kill_r+0x1c>
 80080fa:	6023      	str	r3, [r4, #0]
 80080fc:	bd38      	pop	{r3, r4, r5, pc}
 80080fe:	bf00      	nop
 8008100:	2000040c 	.word	0x2000040c

08008104 <_getpid_r>:
 8008104:	f7f9 bcb2 	b.w	8001a6c <_getpid>

08008108 <__sread>:
 8008108:	b510      	push	{r4, lr}
 800810a:	460c      	mov	r4, r1
 800810c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008110:	f000 f894 	bl	800823c <_read_r>
 8008114:	2800      	cmp	r0, #0
 8008116:	bfab      	itete	ge
 8008118:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800811a:	89a3      	ldrhlt	r3, [r4, #12]
 800811c:	181b      	addge	r3, r3, r0
 800811e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008122:	bfac      	ite	ge
 8008124:	6563      	strge	r3, [r4, #84]	; 0x54
 8008126:	81a3      	strhlt	r3, [r4, #12]
 8008128:	bd10      	pop	{r4, pc}

0800812a <__swrite>:
 800812a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800812e:	461f      	mov	r7, r3
 8008130:	898b      	ldrh	r3, [r1, #12]
 8008132:	4605      	mov	r5, r0
 8008134:	05db      	lsls	r3, r3, #23
 8008136:	460c      	mov	r4, r1
 8008138:	4616      	mov	r6, r2
 800813a:	d505      	bpl.n	8008148 <__swrite+0x1e>
 800813c:	2302      	movs	r3, #2
 800813e:	2200      	movs	r2, #0
 8008140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008144:	f000 f868 	bl	8008218 <_lseek_r>
 8008148:	89a3      	ldrh	r3, [r4, #12]
 800814a:	4632      	mov	r2, r6
 800814c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008150:	81a3      	strh	r3, [r4, #12]
 8008152:	4628      	mov	r0, r5
 8008154:	463b      	mov	r3, r7
 8008156:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800815a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800815e:	f000 b817 	b.w	8008190 <_write_r>

08008162 <__sseek>:
 8008162:	b510      	push	{r4, lr}
 8008164:	460c      	mov	r4, r1
 8008166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800816a:	f000 f855 	bl	8008218 <_lseek_r>
 800816e:	1c43      	adds	r3, r0, #1
 8008170:	89a3      	ldrh	r3, [r4, #12]
 8008172:	bf15      	itete	ne
 8008174:	6560      	strne	r0, [r4, #84]	; 0x54
 8008176:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800817a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800817e:	81a3      	strheq	r3, [r4, #12]
 8008180:	bf18      	it	ne
 8008182:	81a3      	strhne	r3, [r4, #12]
 8008184:	bd10      	pop	{r4, pc}

08008186 <__sclose>:
 8008186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800818a:	f000 b813 	b.w	80081b4 <_close_r>
	...

08008190 <_write_r>:
 8008190:	b538      	push	{r3, r4, r5, lr}
 8008192:	4604      	mov	r4, r0
 8008194:	4608      	mov	r0, r1
 8008196:	4611      	mov	r1, r2
 8008198:	2200      	movs	r2, #0
 800819a:	4d05      	ldr	r5, [pc, #20]	; (80081b0 <_write_r+0x20>)
 800819c:	602a      	str	r2, [r5, #0]
 800819e:	461a      	mov	r2, r3
 80081a0:	f7f9 fca2 	bl	8001ae8 <_write>
 80081a4:	1c43      	adds	r3, r0, #1
 80081a6:	d102      	bne.n	80081ae <_write_r+0x1e>
 80081a8:	682b      	ldr	r3, [r5, #0]
 80081aa:	b103      	cbz	r3, 80081ae <_write_r+0x1e>
 80081ac:	6023      	str	r3, [r4, #0]
 80081ae:	bd38      	pop	{r3, r4, r5, pc}
 80081b0:	2000040c 	.word	0x2000040c

080081b4 <_close_r>:
 80081b4:	b538      	push	{r3, r4, r5, lr}
 80081b6:	2300      	movs	r3, #0
 80081b8:	4d05      	ldr	r5, [pc, #20]	; (80081d0 <_close_r+0x1c>)
 80081ba:	4604      	mov	r4, r0
 80081bc:	4608      	mov	r0, r1
 80081be:	602b      	str	r3, [r5, #0]
 80081c0:	f7f9 fcae 	bl	8001b20 <_close>
 80081c4:	1c43      	adds	r3, r0, #1
 80081c6:	d102      	bne.n	80081ce <_close_r+0x1a>
 80081c8:	682b      	ldr	r3, [r5, #0]
 80081ca:	b103      	cbz	r3, 80081ce <_close_r+0x1a>
 80081cc:	6023      	str	r3, [r4, #0]
 80081ce:	bd38      	pop	{r3, r4, r5, pc}
 80081d0:	2000040c 	.word	0x2000040c

080081d4 <_fstat_r>:
 80081d4:	b538      	push	{r3, r4, r5, lr}
 80081d6:	2300      	movs	r3, #0
 80081d8:	4d06      	ldr	r5, [pc, #24]	; (80081f4 <_fstat_r+0x20>)
 80081da:	4604      	mov	r4, r0
 80081dc:	4608      	mov	r0, r1
 80081de:	4611      	mov	r1, r2
 80081e0:	602b      	str	r3, [r5, #0]
 80081e2:	f7f9 fca8 	bl	8001b36 <_fstat>
 80081e6:	1c43      	adds	r3, r0, #1
 80081e8:	d102      	bne.n	80081f0 <_fstat_r+0x1c>
 80081ea:	682b      	ldr	r3, [r5, #0]
 80081ec:	b103      	cbz	r3, 80081f0 <_fstat_r+0x1c>
 80081ee:	6023      	str	r3, [r4, #0]
 80081f0:	bd38      	pop	{r3, r4, r5, pc}
 80081f2:	bf00      	nop
 80081f4:	2000040c 	.word	0x2000040c

080081f8 <_isatty_r>:
 80081f8:	b538      	push	{r3, r4, r5, lr}
 80081fa:	2300      	movs	r3, #0
 80081fc:	4d05      	ldr	r5, [pc, #20]	; (8008214 <_isatty_r+0x1c>)
 80081fe:	4604      	mov	r4, r0
 8008200:	4608      	mov	r0, r1
 8008202:	602b      	str	r3, [r5, #0]
 8008204:	f7f9 fca6 	bl	8001b54 <_isatty>
 8008208:	1c43      	adds	r3, r0, #1
 800820a:	d102      	bne.n	8008212 <_isatty_r+0x1a>
 800820c:	682b      	ldr	r3, [r5, #0]
 800820e:	b103      	cbz	r3, 8008212 <_isatty_r+0x1a>
 8008210:	6023      	str	r3, [r4, #0]
 8008212:	bd38      	pop	{r3, r4, r5, pc}
 8008214:	2000040c 	.word	0x2000040c

08008218 <_lseek_r>:
 8008218:	b538      	push	{r3, r4, r5, lr}
 800821a:	4604      	mov	r4, r0
 800821c:	4608      	mov	r0, r1
 800821e:	4611      	mov	r1, r2
 8008220:	2200      	movs	r2, #0
 8008222:	4d05      	ldr	r5, [pc, #20]	; (8008238 <_lseek_r+0x20>)
 8008224:	602a      	str	r2, [r5, #0]
 8008226:	461a      	mov	r2, r3
 8008228:	f7f9 fc9e 	bl	8001b68 <_lseek>
 800822c:	1c43      	adds	r3, r0, #1
 800822e:	d102      	bne.n	8008236 <_lseek_r+0x1e>
 8008230:	682b      	ldr	r3, [r5, #0]
 8008232:	b103      	cbz	r3, 8008236 <_lseek_r+0x1e>
 8008234:	6023      	str	r3, [r4, #0]
 8008236:	bd38      	pop	{r3, r4, r5, pc}
 8008238:	2000040c 	.word	0x2000040c

0800823c <_read_r>:
 800823c:	b538      	push	{r3, r4, r5, lr}
 800823e:	4604      	mov	r4, r0
 8008240:	4608      	mov	r0, r1
 8008242:	4611      	mov	r1, r2
 8008244:	2200      	movs	r2, #0
 8008246:	4d05      	ldr	r5, [pc, #20]	; (800825c <_read_r+0x20>)
 8008248:	602a      	str	r2, [r5, #0]
 800824a:	461a      	mov	r2, r3
 800824c:	f7f9 fc2f 	bl	8001aae <_read>
 8008250:	1c43      	adds	r3, r0, #1
 8008252:	d102      	bne.n	800825a <_read_r+0x1e>
 8008254:	682b      	ldr	r3, [r5, #0]
 8008256:	b103      	cbz	r3, 800825a <_read_r+0x1e>
 8008258:	6023      	str	r3, [r4, #0]
 800825a:	bd38      	pop	{r3, r4, r5, pc}
 800825c:	2000040c 	.word	0x2000040c

08008260 <_init>:
 8008260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008262:	bf00      	nop
 8008264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008266:	bc08      	pop	{r3}
 8008268:	469e      	mov	lr, r3
 800826a:	4770      	bx	lr

0800826c <_fini>:
 800826c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800826e:	bf00      	nop
 8008270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008272:	bc08      	pop	{r3}
 8008274:	469e      	mov	lr, r3
 8008276:	4770      	bx	lr
